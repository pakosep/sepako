ARM GAS  /tmp/cc4JdRoe.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"itoa.c"
  12              	@ GNU C99 (15:7-2018-q2-6) version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907]
  13              	@	compiled by GNU C version 8.2.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  14              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  15              	@ options passed:  -I . -imultilib thumb/v7-m -MD out/itoa.d -MF out/itoa.d
  16              	@ -MP -MQ out/itoa.o -D__USES_INITFINI__ -D RAMCODE -D STM32F10X_HD
  17              	@ inc/tool/itoa.c -mcpu=cortex-m3 -mthumb -auxbase-strip out/itoa.o -O2
  18              	@ -Wall -Wstrict-prototypes -Wextra -Wno-uninitialized
  19              	@ -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable
  20              	@ -std=gnu99 -ffunction-sections -fdata-sections -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -ffunction-sections -fgcse -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions-called-once -finline-small-functions
  36              	@ -fipa-bit-cp -fipa-cp -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fipa-vrp -fira-hoist-pressure -fira-share-save-slots
  39              	@ -fira-share-spill-slots -fisolate-erroneous-paths-dereference -fivopts
  40              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse -flra-remat
  41              	@ -flto-odr-type-merging -fmath-errno -fmerge-constants
  42              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  43              	@ -foptimize-sibling-calls -foptimize-strlen -fpartial-inlining -fpeephole
  44              	@ -fpeephole2 -fplt -fprefetch-loop-arrays -freg-struct-return
  45              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  46              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  47              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  48              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  49              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  50              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  51              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  52              	@ -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-backprop -fssa-phiopt
  53              	@ -fstdarg-opt -fstore-merging -fstrict-aliasing -fstrict-overflow
  54              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  55              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  56              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim
  57              	@ -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
ARM GAS  /tmp/cc4JdRoe.s 			page 2


  58              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  59              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
  60              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr
  61              	@ -ftree-sra -ftree-switch-conversion -ftree-tail-merge -ftree-ter
  62              	@ -ftree-vrp -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss
  63              	@ -masm-syntax-unified -mfix-cortex-m3-ldrd -mlittle-endian
  64              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  65              	@ -mvectorize-with-neon-quad
  66              	
  67              		.text
  68              		.section	.text.itoa,"ax",%progbits
  69              		.align	1
  70              		.p2align 2,,3
  71              		.global	itoa
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  76              		.type	itoa, %function
  77              	itoa:
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81 0000 F0B4     		push	{r4, r5, r6, r7}	@
  82              	@ inc/tool/itoa.c:71: 		if ((base>=2)&&(base<=16))							// is the base valid?
  83 0002 941E     		subs	r4, r2, #2	@ tmp157, base,
  84 0004 0E2C     		cmp	r4, #14	@ tmp157,
  85 0006 2AD8     		bhi	.L7	@,
  86              	@ inc/tool/itoa.c:73: 			if (base == 10 && (sign = value) < 0)	// negative value and base == 10? st
  87 0008 0A2A     		cmp	r2, #10	@ base,
  88 000a 0346     		mov	r3, r0	@ value, value
  89 000c 2DD0     		beq	.L13	@,
  90              	@ inc/tool/itoa.c:68: 		int32_t sign=0;
  91 000e 0020     		movs	r0, #0	@ sign,
  92              	.L3:
  93 0010 0E46     		mov	r6, r1	@ buffer, buffer
  94 0012 DFF860C0 		ldr	ip, .L14	@ tmp176,
  95 0016 00E0     		b	.L4	@
  96              	.L9:
  97 0018 2646     		mov	r6, r4	@ buffer, buffer
  98              	.L4:
  99              	@ inc/tool/itoa.c:78: 				quot=value/base;						// calculate quotient and remainder
 100 001a 93FBF2F5 		sdiv	r5, r3, r2	@ quot, value, base
 101              	@ inc/tool/itoa.c:80: 				*buffer++ = digits[rem];		// append the remainder to the string
 102 001e 3446     		mov	r4, r6	@ buffer, buffer
 103              	@ inc/tool/itoa.c:79: 				rem=value%base;
 104 0020 02FB1533 		mls	r3, r2, r5, r3	@ rem, base, quot, value
 105              	@ inc/tool/itoa.c:80: 				*buffer++ = digits[rem];		// append the remainder to the string
 106 0024 1CF80370 		ldrb	r7, [ip, r3]	@ zero_extendqisi2	@ tmp167, digits
 107              	@ inc/tool/itoa.c:81: 			} while ((value=quot));				// loop while there is something to convert
 108 0028 2B46     		mov	r3, r5	@ value, quot
 109              	@ inc/tool/itoa.c:80: 				*buffer++ = digits[rem];		// append the remainder to the string
 110 002a 04F8017B 		strb	r7, [r4], #1	@ tmp167, MEM[base: buffer_21, offset: 4294967295B]
 111              	@ inc/tool/itoa.c:81: 			} while ((value=quot));				// loop while there is something to convert
 112 002e 002D     		cmp	r5, #0	@ value
 113 0030 F2D1     		bne	.L9	@
 114              	@ inc/tool/itoa.c:83: 			if (sign<0)										// was the value negative?
ARM GAS  /tmp/cc4JdRoe.s 			page 3


 115 0032 0028     		cmp	r0, #0	@ sign,
 116 0034 02DA     		bge	.L5	@,
 117              	@ inc/tool/itoa.c:84: 			*buffer++='-';								// append the sign
 118 0036 2D23     		movs	r3, #45	@ tmp169,
 119 0038 B41C     		adds	r4, r6, #2	@ buffer, buffer,
 120 003a 7370     		strb	r3, [r6, #1]	@ tmp169, MEM[(char *)buffer_7 + 1B]
 121              	.L5:
 122              	@ inc/tool/itoa.c:86: 			__reverse(buffer_copy,buffer-1);		// reverse the string
 123 003c 631E     		subs	r3, r4, #1	@ end, buffer,
 124              	@ inc/tool/itoa.c:111: 	while (end>begin)
 125 003e 8B42     		cmp	r3, r1	@ end, buffer
 126 0040 08D9     		bls	.L2	@,
 127 0042 0A46     		mov	r2, r1	@ begin, buffer
 128              	.L6:
 129              	@ inc/tool/itoa.c:113: 		temp=*end;
 130 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2	@ temp, MEM[base: end_45, offset: 0B]
 131              	@ inc/tool/itoa.c:114: 		*end--=*begin;
 132 0046 1678     		ldrb	r6, [r2]	@ zero_extendqisi2	@ _30, MEM[base: begin_46, offset: 0B]
 133 0048 03F80169 		strb	r6, [r3], #-1	@ _30, MEM[base: end_28, offset: 1B]
 134              	@ inc/tool/itoa.c:115: 		*begin++=temp;
 135 004c 02F8015B 		strb	r5, [r2], #1	@ temp, MEM[base: begin_31, offset: 4294967295B]
 136              	@ inc/tool/itoa.c:111: 	while (end>begin)
 137 0050 9342     		cmp	r3, r2	@ end, begin
 138 0052 F7D8     		bhi	.L6	@,
 139              	.L2:
 140              	@ inc/tool/itoa.c:89: 		*buffer='\0';
 141 0054 0023     		movs	r3, #0	@ tmp173,
 142 0056 2370     		strb	r3, [r4]	@ tmp173, *buffer_9
 143              	@ inc/tool/itoa.c:91: 	}
 144 0058 0846     		mov	r0, r1	@, buffer
 145 005a F0BC     		pop	{r4, r5, r6, r7}	@
 146 005c 7047     		bx	lr	@
 147              	.L7:
 148 005e 0C46     		mov	r4, r1	@ buffer, buffer
 149              	@ inc/tool/itoa.c:89: 		*buffer='\0';
 150 0060 0023     		movs	r3, #0	@ tmp173,
 151 0062 2370     		strb	r3, [r4]	@ tmp173, *buffer_9
 152              	@ inc/tool/itoa.c:91: 	}
 153 0064 0846     		mov	r0, r1	@, buffer
 154 0066 F0BC     		pop	{r4, r5, r6, r7}	@
 155 0068 7047     		bx	lr	@
 156              	.L13:
 157 006a 0028     		cmp	r0, #0	@ value,
 158 006c B8BF     		it	lt
 159 006e 4342     		rsblt	r3, r0, #0	@ value, value,
 160 0070 CEE7     		b	.L3	@
 161              	.L15:
 162 0072 00BF     		.align	2
 163              	.L14:
 164 0074 00000000 		.word	.LANCHOR0
 165              		.size	itoa, .-itoa
 166              		.section	.rodata.digits.4158,"a",%progbits
 167              		.align	2
 168              		.set	.LANCHOR0,. + 0
 169              		.type	digits.4158, %object
 170              		.size	digits.4158, 17
 171              	digits.4158:
ARM GAS  /tmp/cc4JdRoe.s 			page 4


 172 0000 30313233 		.ascii	"0123456789abcdef\000"
 172      34353637 
 172      38396162 
 172      63646566 
 172      00
 173              		.ident	"GCC: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907]"
ARM GAS  /tmp/cc4JdRoe.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 itoa.c
     /tmp/cc4JdRoe.s:69     .text.itoa:00000000 $t
     /tmp/cc4JdRoe.s:77     .text.itoa:00000000 itoa
     /tmp/cc4JdRoe.s:164    .text.itoa:00000074 $d
     /tmp/cc4JdRoe.s:167    .rodata.digits.4158:00000000 $d
     /tmp/cc4JdRoe.s:171    .rodata.digits.4158:00000000 digits.4158

NO UNDEFINED SYMBOLS
