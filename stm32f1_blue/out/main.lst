ARM GAS  /tmp/ccrMssCc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"main.c"
  12              	@ GNU C99 (15:7-2018-q2-6) version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907]
  13              	@	compiled by GNU C version 8.2.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  14              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  15              	@ options passed:  -I . -imultilib thumb/v7-m -MD out/main.d -MF out/main.d
  16              	@ -MP -MQ out/main.o -D__USES_INITFINI__ -D RAMCODE -D STM32F10X_HD main.c
  17              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip out/main.o -O2 -Wall
  18              	@ -Wstrict-prototypes -Wextra -Wno-uninitialized
  19              	@ -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable
  20              	@ -std=gnu99 -ffunction-sections -fdata-sections -fverbose-asm
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -ffunction-sections -fgcse -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions-called-once -finline-small-functions
  36              	@ -fipa-bit-cp -fipa-cp -fipa-icf -fipa-icf-functions -fipa-icf-variables
  37              	@ -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra
  38              	@ -fipa-vrp -fira-hoist-pressure -fira-share-save-slots
  39              	@ -fira-share-spill-slots -fisolate-erroneous-paths-dereference -fivopts
  40              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse -flra-remat
  41              	@ -flto-odr-type-merging -fmath-errno -fmerge-constants
  42              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  43              	@ -foptimize-sibling-calls -foptimize-strlen -fpartial-inlining -fpeephole
  44              	@ -fpeephole2 -fplt -fprefetch-loop-arrays -freg-struct-return
  45              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  46              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  47              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  48              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  49              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  50              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  51              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  52              	@ -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-backprop -fssa-phiopt
  53              	@ -fstdarg-opt -fstore-merging -fstrict-aliasing -fstrict-overflow
  54              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  55              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  56              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim
  57              	@ -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
ARM GAS  /tmp/ccrMssCc.s 			page 2


  58              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  59              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
  60              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr
  61              	@ -ftree-sra -ftree-switch-conversion -ftree-tail-merge -ftree-ter
  62              	@ -ftree-vrp -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss
  63              	@ -masm-syntax-unified -mfix-cortex-m3-ldrd -mlittle-endian
  64              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  65              	@ -mvectorize-with-neon-quad
  66              	
  67              		.text
  68              		.section	.text.gmtime_r.isra.0.constprop.2,"ax",%progbits
  69              		.align	1
  70              		.p2align 2,,3
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  75              		.type	gmtime_r.isra.0.constprop.2, %function
  76              	gmtime_r.isra.0.constprop.2:
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}	@
  80              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
  81 0004 4FF46164 		mov	r4, #3600	@ tmp221,
  82              	@ main.c:5677: 	dayclock = (u32) time % SECS_DAY;
  83 0008 524B     		ldr	r3, .L35	@ tmp191,
  84 000a 534A     		ldr	r2, .L35+4	@ tmp193,
  85 000c A3FB0013 		umull	r1, r3, r3, r0	@ tmp372, tmp190, tmp191, ISRA.308
  86 0010 190C     		lsrs	r1, r3, #16	@ dayclock, tmp190,
  87 0012 02FB1101 		mls	r1, r2, r1, r0	@ dayclock, tmp193, dayclock, ISRA.308
  88              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
  89 0016 514A     		ldr	r2, .L35+8	@ tmp219,
  90              	@ main.c:5678: 	dayno = (u32) time / SECS_DAY;
  91 0018 1B0C     		lsrs	r3, r3, #16	@ dayno, tmp190,
  92              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
  93 001a A2FB012E 		umull	r2, lr, r2, r1	@ tmp373, tmp218, tmp219, dayclock
  94              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  95 001e 504A     		ldr	r2, .L35+12	@ tmp252,
  96 0020 1D1D     		adds	r5, r3, #4	@ tmp250, dayno,
  97              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
  98 0022 4FEADE2E 		lsr	lr, lr, #11	@ tmp217, tmp218,
  99              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 100 0026 A2FB0502 		umull	r0, r2, r2, r5	@ tmp374, tmp251, tmp252, tmp250
 101              	@ main.c:5680: 	tmbuf->tm_sec = dayclock % 60;
 102 002a 4E4E     		ldr	r6, .L35+16	@ tmp198,
 103              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
 104 002c 04FB1E10 		mls	r0, r4, lr, r1	@ tmp222, tmp221, tmp217, dayclock
 105              	@ main.c:5680: 	tmbuf->tm_sec = dayclock % 60;
 106 0030 A6FB0174 		umull	r7, r4, r6, r1	@ tmp375, tmp197, tmp198, dayclock
 107              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 108 0034 AF1A     		subs	r7, r5, r2	@ tmp253, tmp250, tmp251
 109              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
 110 0036 A6FB0060 		umull	r6, r0, r6, r0	@ tmp376, tmp232, tmp198, tmp222
 111              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 112 003a 02EB5702 		add	r2, r2, r7, lsr #1	@ tmp255, tmp251, tmp253,
 113 003e 9208     		lsrs	r2, r2, #2	@ tmp256, tmp255,
 114              	@ main.c:5680: 	tmbuf->tm_sec = dayclock % 60;
ARM GAS  /tmp/ccrMssCc.s 			page 3


 115 0040 6409     		lsrs	r4, r4, #5	@ tmp199, tmp197,
 116 0042 DFF82CC1 		ldr	ip, .L35+28	@ tmp364,
 117              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 118 0046 C2EBC202 		rsb	r2, r2, r2, lsl #3	@ tmp259, tmp256, tmp256,
 119              	@ main.c:5680: 	tmbuf->tm_sec = dayclock % 60;
 120 004a C4EB0414 		rsb	r4, r4, r4, lsl #4	@ tmp202, tmp199, tmp199,
 121              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 122 004e AA1A     		subs	r2, r5, r2	@ tmp260, tmp250, tmp259
 123              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
 124 0050 4009     		lsrs	r0, r0, #5	@ tmp234, tmp232,
 125              	@ main.c:5680: 	tmbuf->tm_sec = dayclock % 60;
 126 0052 A1EB8401 		sub	r1, r1, r4, lsl #2	@ tmp204, dayclock, tmp202,
 127              	@ main.c:5683: 	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 128 0056 CCF81820 		str	r2, [ip, #24]	@ tmp260, ptm.tm_wday
 129              	@ main.c:5681: 	tmbuf->tm_min = (dayclock % 3600) / 60;
 130 005a CCE90010 		strd	r1, r0, [ip]	@ tmp204, tmp234, tmp364
 131              	@ main.c:5675: 	int year = EPOCH_YR;
 132 005e 40F2B272 		movw	r2, #1970	@ year,
 133              	@ main.c:5686: 		dayno -= YEARSIZE(year);
 134 0062 40F26D18 		movw	r8, #365	@ iftmp.285_20,
 135              	@ main.c:5684: 	while (dayno >= (u32) YEARSIZE(year))
 136 0066 404D     		ldr	r5, .L35+20	@ tmp368,
 137 0068 6420     		movs	r0, #100	@ tmp369,
 138 006a 4FF4C877 		mov	r7, #400	@ tmp371,
 139 006e 10E0     		b	.L2	@
 140              	.L31:
 141 0070 A5FB0241 		umull	r4, r1, r5, r2	@ tmp377, tmp285, tmp368, year
 142 0074 4C09     		lsrs	r4, r1, #5	@ _24, tmp285,
 143 0076 00FB1424 		mls	r4, r0, r4, r2	@ _24, tmp369, _24, year
 144 007a 9CB9     		cbnz	r4, .L5	@ _24,
 145 007c C909     		lsrs	r1, r1, #7	@ tmp365, tmp285,
 146 007e 07FB1121 		mls	r1, r7, r1, r2	@ _125, tmp371, tmp365, year
 147 0082 D9B9     		cbnz	r1, .L29	@ _125,
 148 0084 B3F5B77F 		cmp	r3, #366	@ dayno,
 149 0088 61D3     		bcc	.L30	@,
 150              	.L23:
 151              	@ main.c:5686: 		dayno -= YEARSIZE(year);
 152 008a 4FF4B771 		mov	r1, #366	@ iftmp.285_20,
 153              	.L3:
 154 008e 5B1A     		subs	r3, r3, r1	@ dayno, dayno, iftmp.285_20
 155              	@ main.c:5687: 		year++;
 156 0090 0132     		adds	r2, r2, #1	@ year, year,
 157              	.L2:
 158              	@ main.c:5684: 	while (dayno >= (u32) YEARSIZE(year))
 159 0092 12F00306 		ands	r6, r2, #3	@ _15, year,
 160 0096 EBD0     		beq	.L31	@,
 161 0098 B3F5B67F 		cmp	r3, #364	@ dayno,
 162 009c 13D9     		bls	.L32	@,
 163              	@ main.c:5686: 		dayno -= YEARSIZE(year);
 164 009e 40F26D11 		movw	r1, #365	@ iftmp.285_20,
 165 00a2 F4E7     		b	.L3	@
 166              	.L5:
 167              	@ main.c:5684: 	while (dayno >= (u32) YEARSIZE(year))
 168 00a4 B3F5B77F 		cmp	r3, #366	@ dayno,
 169 00a8 EFD2     		bcs	.L23	@,
 170              	.L17:
 171 00aa 4FF4C870 		mov	r0, #400	@ tmp355,
ARM GAS  /tmp/ccrMssCc.s 			page 4


 172 00ae 2E49     		ldr	r1, .L35+20	@ tmp353,
 173 00b0 A1FB0251 		umull	r5, r1, r1, r2	@ tmp379, tmp352, tmp353, year
 174 00b4 C909     		lsrs	r1, r1, #7	@ _125, tmp352,
 175 00b6 00FB1121 		mls	r1, r0, r1, r2	@ _125, tmp355, _125, year
 176 00ba 10E0     		b	.L14	@
 177              	.L29:
 178 00bc B3F5B67F 		cmp	r3, #364	@ dayno,
 179 00c0 F3D9     		bls	.L17	@,
 180              	@ main.c:5686: 		dayno -= YEARSIZE(year);
 181 00c2 4146     		mov	r1, r8	@ iftmp.285_20, iftmp.285_20
 182 00c4 E3E7     		b	.L3	@
 183              	.L32:
 184 00c6 6425     		movs	r5, #100	@ tmp335,
 185 00c8 4FF4C870 		mov	r0, #400	@ tmp345,
 186 00cc 2649     		ldr	r1, .L35+20	@ tmp333,
 187 00ce A1FB0241 		umull	r4, r1, r1, r2	@ tmp378, tmp332, tmp333, year
 188 00d2 4C09     		lsrs	r4, r1, #5	@ _24, tmp332,
 189 00d4 C909     		lsrs	r1, r1, #7	@ _125, tmp332,
 190 00d6 05FB1424 		mls	r4, r5, r4, r2	@ _24, tmp335, _24, year
 191 00da 00FB1121 		mls	r1, r0, r1, r2	@ _125, tmp345, _125, year
 192              	.L14:
 193              	@ main.c:5690: 	tmbuf->tm_yday = dayno;
 194 00de CCF81C30 		str	r3, [ip, #28]	@ dayno, ptm.tm_yday
 195 00e2 2248     		ldr	r0, .L35+24	@ ivtmp.413,
 196 00e4 002C     		cmp	r4, #0	@ _24,
 197 00e6 14BF     		ite	ne	@
 198 00e8 4FF03008 		movne	r8, #48	@, tmp315,
 199 00ec 4FF00008 		moveq	r8, #0	@, tmp315,
 200 00f0 0029     		cmp	r1, #0	@ _125,
 201 00f2 0CBF     		ite	eq	@
 202 00f4 4FF03009 		moveq	r9, #48	@, tmp321,
 203 00f8 4FF00009 		movne	r9, #0	@, tmp321,
 204              	@ main.c:5694: 		dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 205 00fc 0025     		movs	r5, #0	@ ivtmp.411,
 206              	@ main.c:5692: 	while (dayno >= (u32) _ytab[LEAPYEAR(year)][tmbuf->tm_mon])
 207 00fe 5EB9     		cbnz	r6, .L10	@ _15,
 208              	.L34:
 209 0100 D4B9     		cbnz	r4, .L11	@ _24,
 210 0102 F9B9     		cbnz	r1, .L33	@ _125,
 211 0104 076B     		ldr	r7, [r0, #48]	@ MEM[base: _42, offset: 48B], MEM[base: _42, offset: 48B]
 212 0106 BB42     		cmp	r3, r7	@ dayno, MEM[base: _42, offset: 48B]
 213 0108 09D3     		bcc	.L16	@,
 214              	.L15:
 215 010a 50F80970 		ldr	r7, [r0, r9]	@ _73, MEM[base: _120, index: _18, offset: 0B]
 216              	.L9:
 217              	@ main.c:5694: 		dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 218 010e DB1B     		subs	r3, r3, r7	@ dayno, dayno, _73
 219 0110 0135     		adds	r5, r5, #1	@ ivtmp.411, ivtmp.411,
 220 0112 0430     		adds	r0, r0, #4	@ ivtmp.413, ivtmp.413,
 221              	@ main.c:5692: 	while (dayno >= (u32) _ytab[LEAPYEAR(year)][tmbuf->tm_mon])
 222 0114 002E     		cmp	r6, #0	@ _15
 223 0116 F3D0     		beq	.L34	@
 224              	.L10:
 225 0118 0768     		ldr	r7, [r0]	@ _73, MEM[base: _121, offset: 0B]
 226 011a BB42     		cmp	r3, r7	@ dayno, _73
 227 011c F7D2     		bcs	.L9	@,
 228              	.L16:
ARM GAS  /tmp/ccrMssCc.s 			page 5


 229              	@ main.c:5698: 	tmbuf->tm_isdst = 1;
 230 011e 0121     		movs	r1, #1	@ tmp325,
 231              	@ main.c:5697: 	tmbuf->tm_mday = dayno + 1;
 232 0120 0B44     		add	r3, r3, r1	@ tmp323,
 233              	@ main.c:5699: 	tmbuf->tm_hour += TIMEZONE - tmbuf->tm_isdst;
 234 0122 0EEB0100 		add	r0, lr, r1	@ tmp327, tmp217,
 235              	@ main.c:5701: 	tmbuf->tm_mon  += 1;
 236 0126 0D44     		add	r5, r5, r1	@ tmp330,
 237              	@ main.c:5699: 	tmbuf->tm_hour += TIMEZONE - tmbuf->tm_isdst;
 238 0128 CCE90203 		strd	r0, r3, [ip, #8]	@ tmp327, tmp323, tmp364,
 239              	@ main.c:5700: 	tmbuf->tm_year += YEAR0;
 240 012c CCE90452 		strd	r5, r2, [ip, #16]	@ tmp330, year, tmp364,
 241              	@ main.c:5698: 	tmbuf->tm_isdst = 1;
 242 0130 CCF82010 		str	r1, [ip, #32]	@ tmp325, ptm.tm_isdst
 243              	@ main.c:5703: }
 244 0134 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 245              	.L11:
 246              	@ main.c:5692: 	while (dayno >= (u32) _ytab[LEAPYEAR(year)][tmbuf->tm_mon])
 247 0138 50F80870 		ldr	r7, [r0, r8]	@ MEM[base: _88, index: _74, offset: 0B], MEM[base: _88, index: _74, offset: 0B]
 248 013c BB42     		cmp	r3, r7	@ dayno, MEM[base: _88, index: _74, offset: 0B]
 249 013e EED3     		bcc	.L16	@,
 250 0140 076B     		ldr	r7, [r0, #48]	@ _73, MEM[base: _88, offset: 48B]
 251 0142 E4E7     		b	.L9	@
 252              	.L33:
 253 0144 50F80870 		ldr	r7, [r0, r8]	@ MEM[base: _32, index: _74, offset: 0B], MEM[base: _32, index: _74, offset: 0B]
 254 0148 BB42     		cmp	r3, r7	@ dayno, MEM[base: _32, index: _74, offset: 0B]
 255 014a DED2     		bcs	.L15	@,
 256 014c E7E7     		b	.L16	@
 257              	.L30:
 258              	@ main.c:5684: 	while (dayno >= (u32) YEARSIZE(year))
 259 014e 0C46     		mov	r4, r1	@ _24, _125
 260 0150 C5E7     		b	.L14	@
 261              	.L36:
 262 0152 00BF     		.align	2
 263              	.L35:
 264 0154 07452EC2 		.word	-1037155065
 265 0158 80510100 		.word	86400
 266 015c C5B3A291 		.word	-1851608123
 267 0160 25499224 		.word	613566757
 268 0164 89888888 		.word	-2004318071
 269 0168 1F85EB51 		.word	1374389535
 270 016c 00000000 		.word	.LANCHOR0
 271 0170 00000000 		.word	ptm
 272              		.size	gmtime_r.isra.0.constprop.2, .-gmtime_r.isra.0.constprop.2
 273              		.section	.text.head,"ax",%progbits
 274              		.align	1
 275              		.p2align 2,,3
 276              		.global	head
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu softvfp
 281              		.type	head, %function
 282              	head:
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285 0000 08B5     		push	{r3, lr}	@
ARM GAS  /tmp/ccrMssCc.s 			page 6


 286              	@ main.c:216: 		tr_pen_color( TGREEN );
 287 0002 0220     		movs	r0, #2	@,
 288 0004 FFF7FEFF 		bl	tr_pen_color	@
 289              	@ main.c:218: 		UaPutK("\f\r\n Mini STM32F103C8T6 RAM   "); // Boot from RAM 	 = B0+ B1+
 290 0008 0648     		ldr	r0, .L39	@,
 291 000a FFF7FEFF 		bl	UaPutK	@
 292              	@ main.c:222: 		uint2uart(F_CPU/1e6);	UaPutK(" MHz");
 293 000e 4820     		movs	r0, #72	@,
 294 0010 FFF7FEFF 		bl	uint2uart	@
 295 0014 0448     		ldr	r0, .L39+4	@,
 296 0016 FFF7FEFF 		bl	UaPutK	@
 297              	@ main.c:224: 	}
 298 001a BDE80840 		pop	{r3, lr}	@
 299              	@ main.c:223: 		tr_pen_color( TYELLOW );
 300 001e 0320     		movs	r0, #3	@,
 301 0020 FFF7FEBF 		b	tr_pen_color	@
 302              	.L40:
 303              		.align	2
 304              	.L39:
 305 0024 00000000 		.word	.LC10
 306 0028 20000000 		.word	.LC11
 307              		.size	head, .-head
 308              		.section	.text.liontrend,"ax",%progbits
 309              		.align	1
 310              		.p2align 2,,3
 311              		.global	liontrend
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu softvfp
 316              		.type	liontrend, %function
 317              	liontrend:
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 321              	@ main.c:246: 		v[6] = (100*(v[0]-v[1]))/(v[2]-v[3]); //a=(y2-y1)/(x2-x1)
 322 0004 6423     		movs	r3, #100	@ tmp194,
 323 0006 B0F90060 		ldrsh	r6, [r0]	@ _1, *v_82(D)
 324 000a B0F902E0 		ldrsh	lr, [r0, #2]	@ _3, MEM[(s16 *)v_82(D) + 2B]
 325 000e B0F90440 		ldrsh	r4, [r0, #4]	@ _8, MEM[(s16 *)v_82(D) + 4B]
 326 0012 A6EB0E0C 		sub	ip, r6, lr	@ tmp192, _1, _3
 327 0016 03FB0CFC 		mul	ip, r3, ip	@ tmp193, tmp194, tmp192
 328 001a B0F90620 		ldrsh	r2, [r0, #6]	@ _10, MEM[(s16 *)v_82(D) + 6B]
 329              	@ main.c:244: void liontrend(s16 v[],s16 c[]){
 330 001e 0546     		mov	r5, r0	@ v, v
 331              	@ main.c:246: 		v[6] = (100*(v[0]-v[1]))/(v[2]-v[3]); //a=(y2-y1)/(x2-x1)
 332 0020 A01A     		subs	r0, r4, r2	@ tmp195, _8, _10
 333 0022 9CFBF0FC 		sdiv	ip, ip, r0	@ tmp197, tmp193, tmp195
 334 0026 0FFA8CFC 		sxth	ip, ip	@ _13, tmp197
 335              	@ main.c:247: 		v[5] = v[0]-v[6]*v[2]/100;  //b=y-ax
 336 002a 0CFB04F4 		mul	r4, ip, r4	@ tmp199, _13, _8
 337 002e 3D4F     		ldr	r7, .L43	@ tmp202,
 338              	@ main.c:248: 		v[4] = v[1]-v[6]*v[3]/100;  //b=y-ax;
 339 0030 0CFB02F2 		mul	r2, ip, r2	@ tmp209, _13, _10
 340              	@ main.c:247: 		v[5] = v[0]-v[6]*v[2]/100;  //b=y-ax
 341 0034 87FB0408 		smull	r0, r8, r7, r4	@ tmp275, tmp201, tmp202, tmp199
 342 0038 E017     		asrs	r0, r4, #31	@ tmp204, tmp199,
ARM GAS  /tmp/ccrMssCc.s 			page 7


 343 003a A0EB6810 		sub	r0, r0, r8, asr #5	@ tmp200, tmp204, tmp201,
 344 003e 3044     		add	r0, r0, r6	@ tmp207, _1
 345 0040 00B2     		sxth	r0, r0	@ _20, tmp207
 346              	@ main.c:249: 		v[7] = 100*(339-v[5])/v[6]; //x=(y-b)/a
 347 0042 C0F5A974 		rsb	r4, r0, #338	@ tmp220, _20,
 348 0046 0134     		adds	r4, r4, #1	@ tmp220, tmp220,
 349 0048 03FB04F4 		mul	r4, r3, r4	@ tmp221, tmp194, tmp220
 350 004c 94FBFCF4 		sdiv	r4, r4, ip	@ tmp224, tmp221, _13
 351              	@ main.c:244: void liontrend(s16 v[],s16 c[]){
 352 0050 0E46     		mov	r6, r1	@ c, c
 353              	@ main.c:248: 		v[4] = v[1]-v[6]*v[3]/100;  //b=y-ax;
 354 0052 87FB0281 		smull	r8, r1, r7, r2	@ tmp276, tmp211, tmp202, tmp209
 355 0056 D217     		asrs	r2, r2, #31	@ tmp214, tmp209,
 356 0058 A2EB6112 		sub	r2, r2, r1, asr #5	@ tmp210, tmp214, tmp211,
 357 005c 7244     		add	r2, r2, lr	@ tmp217, _3
 358 005e 2A81     		strh	r2, [r5, #8]	@ movhi	@ tmp217, MEM[(s16 *)v_82(D) + 8B]
 359              	@ main.c:247: 		v[5] = v[0]-v[6]*v[2]/100;  //b=y-ax
 360 0060 6881     		strh	r0, [r5, #10]	@ movhi	@ _20, MEM[(s16 *)v_82(D) + 10B]
 361              	@ main.c:249: 		v[7] = 100*(339-v[5])/v[6]; //x=(y-b)/a
 362 0062 EC81     		strh	r4, [r5, #14]	@ movhi	@ tmp224, MEM[(s16 *)v_82(D) + 14B]
 363              	@ main.c:246: 		v[6] = (100*(v[0]-v[1]))/(v[2]-v[3]); //a=(y2-y1)/(x2-x1)
 364 0064 A5F80CC0 		strh	ip, [r5, #12]	@ movhi	@ _13, MEM[(s16 *)v_82(D) + 12B]
 365              	@ main.c:251: 		c[6] = (100*(c[0]-c[1]))/(c[2]-c[3]);
 366 0068 B6F900E0 		ldrsh	lr, [r6]	@ _32, *c_87(D)
 367 006c B6F902C0 		ldrsh	ip, [r6, #2]	@ _34, MEM[(s16 *)c_87(D) + 2B]
 368 0070 B6F90440 		ldrsh	r4, [r6, #4]	@ _39, MEM[(s16 *)c_87(D) + 4B]
 369 0074 AEEB0C02 		sub	r2, lr, ip	@ tmp226, _32, _34
 370 0078 03FB02F3 		mul	r3, r3, r2	@ tmp227, tmp194, tmp226
 371 007c B6F90610 		ldrsh	r1, [r6, #6]	@ _41, MEM[(s16 *)c_87(D) + 6B]
 372              	@ main.c:256: 		UaPutS("v="); sint2uart(v[6]); sint2uart(v[5]); sint2uart(v[4]); sint2uart(v[7]); U
 373 0080 2948     		ldr	r0, .L43+4	@,
 374              	@ main.c:251: 		c[6] = (100*(c[0]-c[1]))/(c[2]-c[3]);
 375 0082 621A     		subs	r2, r4, r1	@ tmp229, _39, _41
 376 0084 93FBF2F3 		sdiv	r3, r3, r2	@ tmp231, tmp227, tmp229
 377 0088 1BB2     		sxth	r3, r3	@ _44, tmp231
 378              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 379 008a 03FB04F4 		mul	r4, r3, r4	@ tmp233, _44, _39
 380              	@ main.c:253: 		c[4] = c[1]-c[6]*c[3]/100;//y-ax
 381 008e 03FB01F1 		mul	r1, r3, r1	@ tmp243, _44, _41
 382              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 383 0092 87FB0429 		smull	r2, r9, r7, r4	@ tmp277, tmp235, tmp202, tmp233
 384              	@ main.c:253: 		c[4] = c[1]-c[6]*c[3]/100;//y-ax
 385 0096 87FB0128 		smull	r2, r8, r7, r1	@ tmp278, tmp245, tmp202, tmp243
 386              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 387 009a E217     		asrs	r2, r4, #31	@ tmp238, tmp233,
 388 009c A2EB6912 		sub	r2, r2, r9, asr #5	@ tmp234, tmp238, tmp235,
 389              	@ main.c:253: 		c[4] = c[1]-c[6]*c[3]/100;//y-ax
 390 00a0 C917     		asrs	r1, r1, #31	@ tmp248, tmp243,
 391              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 392 00a2 7244     		add	r2, r2, lr	@ tmp241, _32
 393              	@ main.c:253: 		c[4] = c[1]-c[6]*c[3]/100;//y-ax
 394 00a4 A1EB6811 		sub	r1, r1, r8, asr #5	@ tmp244, tmp248, tmp245,
 395 00a8 6144     		add	r1, r1, ip	@ tmp251, _34
 396              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 397 00aa 92B2     		uxth	r2, r2	@ _50, tmp241
 398              	@ main.c:251: 		c[6] = (100*(c[0]-c[1]))/(c[2]-c[3]);
 399 00ac B381     		strh	r3, [r6, #12]	@ movhi	@ _44, MEM[(s16 *)c_87(D) + 12B]
ARM GAS  /tmp/ccrMssCc.s 			page 8


 400              	@ main.c:252: 		c[5] = c[0]-c[6]*c[2]/100;//y-ax
 401 00ae 7281     		strh	r2, [r6, #10]	@ movhi	@ _50, MEM[(s16 *)c_87(D) + 10B]
 402              	@ main.c:253: 		c[4] = c[1]-c[6]*c[3]/100;//y-ax
 403 00b0 3181     		strh	r1, [r6, #8]	@ movhi	@ tmp251, MEM[(s16 *)c_87(D) + 8B]
 404              	@ main.c:254: 		c[7] = c[5]+c[6]*v[7]/100;// szukana pojemnosc
 405 00b2 B5F90E10 		ldrsh	r1, [r5, #14]	@ MEM[(s16 *)v_82(D) + 14B], MEM[(s16 *)v_82(D) + 14B]
 406              	@ main.c:256: 		UaPutS("v="); sint2uart(v[6]); sint2uart(v[5]); sint2uart(v[4]); sint2uart(v[7]); U
 407 00b6 1D4C     		ldr	r4, .L43+8	@ tmp268,
 408              	@ main.c:254: 		c[7] = c[5]+c[6]*v[7]/100;// szukana pojemnosc
 409 00b8 03FB01F3 		mul	r3, r3, r1	@ tmp254, _44, MEM[(s16 *)v_82(D) + 14B]
 410 00bc 87FB0317 		smull	r1, r7, r7, r3	@ tmp279, tmp256, tmp202, tmp254
 411 00c0 DB17     		asrs	r3, r3, #31	@ tmp259, tmp254,
 412 00c2 C3EB6713 		rsb	r3, r3, r7, asr #5	@ tmp255, tmp259, tmp256,
 413 00c6 1A44     		add	r2, r2, r3	@ tmp261, tmp255
 414 00c8 F281     		strh	r2, [r6, #14]	@ movhi	@ tmp261, MEM[(s16 *)c_87(D) + 14B]
 415              	@ main.c:256: 		UaPutS("v="); sint2uart(v[6]); sint2uart(v[5]); sint2uart(v[4]); sint2uart(v[7]); U
 416 00ca FFF7FEFF 		bl	UaPutS	@
 417 00ce B5F90C00 		ldrsh	r0, [r5, #12]	@, MEM[(s16 *)v_82(D) + 12B]
 418 00d2 FFF7FEFF 		bl	sint2uart	@
 419 00d6 B5F90A00 		ldrsh	r0, [r5, #10]	@, MEM[(s16 *)v_82(D) + 10B]
 420 00da FFF7FEFF 		bl	sint2uart	@
 421 00de B5F90800 		ldrsh	r0, [r5, #8]	@, MEM[(s16 *)v_82(D) + 8B]
 422 00e2 FFF7FEFF 		bl	sint2uart	@
 423 00e6 B5F90E00 		ldrsh	r0, [r5, #14]	@, MEM[(s16 *)v_82(D) + 14B]
 424 00ea FFF7FEFF 		bl	sint2uart	@
 425 00ee 2046     		mov	r0, r4	@, tmp268
 426 00f0 FFF7FEFF 		bl	UaPutS	@
 427              	@ main.c:257: 		UaPutS("c="); sint2uart(c[6]); sint2uart(c[5]); sint2uart(c[4]); sint2uart(c[7]); U
 428 00f4 0E48     		ldr	r0, .L43+12	@,
 429 00f6 FFF7FEFF 		bl	UaPutS	@
 430 00fa B6F90C00 		ldrsh	r0, [r6, #12]	@, MEM[(s16 *)c_87(D) + 12B]
 431 00fe FFF7FEFF 		bl	sint2uart	@
 432 0102 B6F90A00 		ldrsh	r0, [r6, #10]	@, MEM[(s16 *)c_87(D) + 10B]
 433 0106 FFF7FEFF 		bl	sint2uart	@
 434 010a B6F90800 		ldrsh	r0, [r6, #8]	@, MEM[(s16 *)c_87(D) + 8B]
 435 010e FFF7FEFF 		bl	sint2uart	@
 436 0112 B6F90E00 		ldrsh	r0, [r6, #14]	@, MEM[(s16 *)c_87(D) + 14B]
 437 0116 FFF7FEFF 		bl	sint2uart	@
 438 011a 2046     		mov	r0, r4	@, tmp268
 439              	@ main.c:258: 	}
 440 011c BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 441              	@ main.c:257: 		UaPutS("c="); sint2uart(c[6]); sint2uart(c[5]); sint2uart(c[4]); sint2uart(c[7]); U
 442 0120 FFF7FEBF 		b	UaPutS	@
 443              	.L44:
 444              		.align	2
 445              	.L43:
 446 0124 1F85EB51 		.word	1374389535
 447 0128 00000000 		.word	.LC12
 448 012c 04000000 		.word	.LC13
 449 0130 08000000 		.word	.LC14
 450              		.size	liontrend, .-liontrend
 451              		.section	.text.oblicz,"ax",%progbits
 452              		.align	1
 453              		.p2align 2,,3
 454              		.global	oblicz
 455              		.syntax unified
 456              		.thumb
ARM GAS  /tmp/ccrMssCc.s 			page 9


 457              		.thumb_func
 458              		.fpu softvfp
 459              		.type	oblicz, %function
 460              	oblicz:
 461              		@ Volatile: function does not return.
 462              		@ args = 0, pretend = 0, frame = 80
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              	@ main.c:5437: 	USART1->BRR = (F_CPU+UART1_SPEED/2)/UART1_SPEED;
 465 0000 40F27126 		movw	r6, #625	@ tmp141,
 466              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 467 0004 2025     		movs	r5, #32	@ tmp143,
 468              	@ main.c:259: void oblicz(void){
 469 0006 80B5     		push	{r7, lr}	@
 470 0008 94B0     		sub	sp, sp, #80	@,,
 471              	@ main.c:261: 		BkpRegInit();
 472 000a FFF7FEFF 		bl	BkpRegInit	@
 473              	@ main.c:267: 		PB12_o = 0;		// rozladowanie
 474 000e 0022     		movs	r2, #0	@ tmp150,
 475              	@ main.c:269: 		PB14_o = 1;   // dzwonek
 476 0010 0121     		movs	r1, #1	@ tmp154,
 477              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 478 0012 324F     		ldr	r7, .L48	@ tmp126,
 479              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 480 0014 3248     		ldr	r0, .L48+4	@ tmp128,
 481              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 482 0016 BB69     		ldr	r3, [r7, #24]	@ _28, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 483              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 484 0018 324C     		ldr	r4, .L48+8	@ tmp131,
 485              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 486 001a 43F48043 		orr	r3, r3, #16384	@ _29, _28,
 487 001e BB61     		str	r3, [r7, #24]	@ _29, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 488              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 489 0020 4368     		ldr	r3, [r0, #4]	@ _30, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 490              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 491 0022 314F     		ldr	r7, .L48+12	@ tmp142,
 492              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 493 0024 23F47F63 		bic	r3, r3, #4080	@ tmp129, _30,
 494 0028 43F49263 		orr	r3, r3, #1168	@ _32, tmp129,
 495 002c 4360     		str	r3, [r0, #4]	@ _32, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 496              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 497 002e A389     		ldrh	r3, [r4, #12]	@, MEM[(struct USART_TypeDef *)1073821696B].CR1
 498              	@ main.c:267: 		PB12_o = 0;		// rozladowanie
 499 0030 DFF8D8C0 		ldr	ip, .L48+48	@ tmp149,
 500              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 501 0034 43F40053 		orr	r3, r3, #8192	@ _34, MEM[(struct USART_TypeDef *)1073821696B].CR1,
 502 0038 43F02C03 		orr	r3, r3, #44	@ _34, _34,
 503 003c A381     		strh	r3, [r4, #12]	@ movhi	@ _34, MEM[(struct USART_TypeDef *)1073821696B].CR1
 504              	@ main.c:5437: 	USART1->BRR = (F_CPU+UART1_SPEED/2)/UART1_SPEED;
 505 003e 2681     		strh	r6, [r4, #8]	@ movhi	@ tmp141, MEM[(struct USART_TypeDef *)1073821696B].BRR
 506              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 507 0040 7D60     		str	r5, [r7, #4]	@ tmp143, MEM[(struct NVIC_Type *)3758153984B].ISER
 508              	@ main.c:265: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 509 0042 D0F80434 		ldr	r3, [r0, #1028]	@ _1, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 510              	@ main.c:268: 		PB13_o = 0;   // ladowanie
 511 0046 294F     		ldr	r7, .L48+16	@ tmp151,
 512              	@ main.c:265: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 513 0048 23F07F63 		bic	r3, r3, #267386880	@ tmp145, _1,
ARM GAS  /tmp/ccrMssCc.s 			page 10


 514 004c 23F47023 		bic	r3, r3, #983040	@ tmp145, tmp145,
 515 0050 43F0AA63 		orr	r3, r3, #89128960	@ _3, tmp145,
 516              	@ main.c:269: 		PB14_o = 1;   // dzwonek
 517 0054 264E     		ldr	r6, .L48+20	@ tmp153,
 518              	@ main.c:265: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 519 0056 43F4A023 		orr	r3, r3, #327680	@ _3, _3,
 520 005a C0F80434 		str	r3, [r0, #1028]	@ _3, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 521              	@ main.c:271: 		PutChar = UART1_putc;	tr_pen_color ( TYELLOW );
 522 005e 254D     		ldr	r5, .L48+24	@ tmp155,
 523 0060 254B     		ldr	r3, .L48+28	@ tmp156,
 524              	@ main.c:267: 		PB12_o = 0;		// rozladowanie
 525 0062 CCF80020 		str	r2, [ip]	@ tmp150, MEM[(volatile long unsigned int *)1109492144B]
 526              	@ main.c:271: 		PutChar = UART1_putc;	tr_pen_color ( TYELLOW );
 527 0066 0320     		movs	r0, #3	@,
 528              	@ main.c:268: 		PB13_o = 0;   // ladowanie
 529 0068 3A60     		str	r2, [r7]	@ tmp150, MEM[(volatile long unsigned int *)1109492148B]
 530              	@ main.c:269: 		PB14_o = 1;   // dzwonek
 531 006a 3160     		str	r1, [r6]	@ tmp154, MEM[(volatile long unsigned int *)1109492152B]
 532              	@ main.c:271: 		PutChar = UART1_putc;	tr_pen_color ( TYELLOW );
 533 006c 2B60     		str	r3, [r5]	@ tmp156, PutChar
 534 006e FFF7FEFF 		bl	tr_pen_color	@
 535              	@ main.c:272: 		UaPutS("\f UART1 "); UaPutS (uint2str( (F_CPU/1)/(1*USART1->BRR-1),buf));	
 536 0072 2248     		ldr	r0, .L48+32	@,
 537 0074 FFF7FEFF 		bl	UaPutS	@
 538 0078 2389     		ldrh	r3, [r4, #8]	@, MEM[(struct USART_TypeDef *)1073821696B].BRR
 539 007a 2148     		ldr	r0, .L48+36	@ tmp165,
 540 007c 013B     		subs	r3, r3, #1	@ tmp162, MEM[(struct USART_TypeDef *)1073821696B].BRR,
 541 007e B0FBF3F0 		udiv	r0, r0, r3	@, tmp165, tmp162
 542 0082 01A9     		add	r1, sp, #4	@,,
 543 0084 FFF7FEFF 		bl	uint2str	@
 544              	@ main.c:276: 		s16 v[8]={365,356,0, 30,0,0,0,0};
 545 0088 1E4C     		ldr	r4, .L48+40	@ tmp167,
 546              	@ main.c:272: 		UaPutS("\f UART1 "); UaPutS (uint2str( (F_CPU/1)/(1*USART1->BRR-1),buf));	
 547 008a FFF7FEFF 		bl	UaPutS	@
 548              	@ main.c:273: 		UaPutS (" b/s \r\n");
 549 008e 1E48     		ldr	r0, .L48+44	@,
 550 0090 FFF7FEFF 		bl	UaPutS	@
 551              	@ main.c:276: 		s16 v[8]={365,356,0, 30,0,0,0,0};
 552 0094 94E80F00 		ldm	r4, {r0, r1, r2, r3}	@ tmp167,,,,
 553              	@ main.c:277: 		s16 c[8]={2000 ,6400 ,0, 30,0,0,0,0};
 554 0098 04F11005 		add	r5, r4, #16	@ tmp172, tmp167,
 555 009c 0DF1200C 		add	ip, sp, #32	@ tmp171,,
 556              	@ main.c:279: 		s16 a[8]={342,336,0,2,0,0,0,0};
 557 00a0 04F12006 		add	r6, r4, #32	@ tmp175, tmp167,
 558              	@ main.c:276: 		s16 v[8]={365,356,0, 30,0,0,0,0};
 559 00a4 04AF     		add	r7, sp, #16	@ tmp168,,
 560 00a6 87E80F00 		stm	r7, {r0, r1, r2, r3}	@ tmp168,,,,
 561              	@ main.c:277: 		s16 c[8]={2000 ,6400 ,0, 30,0,0,0,0};
 562 00aa 95E80F00 		ldm	r5, {r0, r1, r2, r3}	@ tmp172,,,,
 563              	@ main.c:280: 		s16 b[8]={114,263,0,2,0,0,0,0};
 564 00ae 3034     		adds	r4, r4, #48	@ tmp178, tmp167,
 565              	@ main.c:279: 		s16 a[8]={342,336,0,2,0,0,0,0};
 566 00b0 0CAD     		add	r5, sp, #48	@ tmp174,,
 567              	@ main.c:277: 		s16 c[8]={2000 ,6400 ,0, 30,0,0,0,0};
 568 00b2 8CE80F00 		stm	ip, {r0, r1, r2, r3}	@ tmp171,,,,
 569              	@ main.c:279: 		s16 a[8]={342,336,0,2,0,0,0,0};
 570 00b6 96E80F00 		ldm	r6, {r0, r1, r2, r3}	@ tmp175,,,,
ARM GAS  /tmp/ccrMssCc.s 			page 11


 571              	@ main.c:280: 		s16 b[8]={114,263,0,2,0,0,0,0};
 572 00ba 10AE     		add	r6, sp, #64	@ tmp177,,
 573              	@ main.c:279: 		s16 a[8]={342,336,0,2,0,0,0,0};
 574 00bc 85E80F00 		stm	r5, {r0, r1, r2, r3}	@ tmp174,,,,
 575              	@ main.c:280: 		s16 b[8]={114,263,0,2,0,0,0,0};
 576 00c0 94E80F00 		ldm	r4, {r0, r1, r2, r3}	@ tmp178,,,,
 577 00c4 86E80F00 		stm	r6, {r0, r1, r2, r3}	@ tmp177,,,,
 578              	@ main.c:282: 		liontrend(v,c);
 579 00c8 6146     		mov	r1, ip	@, tmp171
 580 00ca 3846     		mov	r0, r7	@, tmp168
 581 00cc FFF7FEFF 		bl	liontrend	@
 582              	@ main.c:283: 		liontrend(a,b);
 583 00d0 3146     		mov	r1, r6	@, tmp177
 584 00d2 2846     		mov	r0, r5	@, tmp174
 585 00d4 FFF7FEFF 		bl	liontrend	@
 586              	.L46:
 587 00d8 FEE7     		b	.L46	@
 588              	.L49:
 589 00da 00BF     		.align	2
 590              	.L48:
 591 00dc 00100240 		.word	1073876992
 592 00e0 00080140 		.word	1073809408
 593 00e4 00380140 		.word	1073821696
 594 00e8 00E100E0 		.word	-536813312
 595 00ec B4812142 		.word	1109492148
 596 00f0 B8812142 		.word	1109492152
 597 00f4 00000000 		.word	PutChar
 598 00f8 00000000 		.word	UART1_putc
 599 00fc 00000000 		.word	.LC15
 600 0100 00A24A04 		.word	72000000
 601 0104 00000000 		.word	.LANCHOR1
 602 0108 0C000000 		.word	.LC16
 603 010c B0812142 		.word	1109492144
 604              		.size	oblicz, .-oblicz
 605              		.section	.text.lion_updown,"ax",%progbits
 606              		.align	1
 607              		.p2align 2,,3
 608              		.global	lion_updown
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu softvfp
 613              		.type	lion_updown, %function
 614              	lion_updown:
 615              		@ args = 0, pretend = 0, frame = 112
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 618 0004 9DB0     		sub	sp, sp, #116	@,,
 619              	@ main.c:297: 		BkpRegInit();
 620 0006 FFF7FEFF 		bl	BkpRegInit	@
 621              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 622 000a 42F22C02 		movw	r2, #8236	@ tmp351,
 623              	@ main.c:5437: 	USART1->BRR = (F_CPU+UART1_SPEED/2)/UART1_SPEED;
 624 000e 40F27126 		movw	r6, #625	@ tmp357,
 625              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 626 0012 2025     		movs	r5, #32	@ tmp359,
 627 0014 4FF0400C 		mov	ip, #64	@ tmp377,
ARM GAS  /tmp/ccrMssCc.s 			page 12


 628              	@ main.c:5444: 	USART2->BRR = ((F_CPU+UART2_SPEED/2)/UART2_SPEED)/2;
 629 0018 4FF49C77 		mov	r7, #312	@ tmp375,
 630              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 631 001c BE4B     		ldr	r3, .L114	@ tmp342,
 632              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 633 001e DFF874E3 		ldr	lr, .L114+124	@ tmp344,
 634              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 635 0022 9969     		ldr	r1, [r3, #24]	@ _448, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 636              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 637 0024 BD4C     		ldr	r4, .L114+4	@ tmp347,
 638              	@ main.c:5434: 	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 639 0026 41F48041 		orr	r1, r1, #16384	@ _449, _448,
 640 002a 9961     		str	r1, [r3, #24]	@ _449, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 641              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 642 002c DEF80410 		ldr	r1, [lr, #4]	@ _450, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 643              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 644 0030 BB48     		ldr	r0, .L114+8	@ tmp358,
 645              	@ main.c:5435: 	GPIOA->CRH = (GPIOA->CRH & 0xfffff00f) | 0x00000490; // PA9=TX, PA10=RX
 646 0032 21F47F61 		bic	r1, r1, #4080	@ tmp345, _450,
 647 0036 41F49261 		orr	r1, r1, #1168	@ _452, tmp345,
 648 003a CEF80410 		str	r1, [lr, #4]	@ _452, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 649              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 650 003e A189     		ldrh	r1, [r4, #12]	@, MEM[(struct USART_TypeDef *)1073821696B].CR1
 651              	@ main.c:5443: 	USART2->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 652 0040 DFF85483 		ldr	r8, .L114+128	@ tmp365,
 653              	@ main.c:5436: 	USART1->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 654 0044 1143     		orrs	r1, r1, r2	@, _454, MEM[(struct USART_TypeDef *)1073821696B].CR1, tmp351
 655 0046 A181     		strh	r1, [r4, #12]	@ movhi	@ _454, MEM[(struct USART_TypeDef *)1073821696B].CR1
 656              	@ main.c:5437: 	USART1->BRR = (F_CPU+UART1_SPEED/2)/UART1_SPEED;
 657 0048 2681     		strh	r6, [r4, #8]	@ movhi	@ tmp357, MEM[(struct USART_TypeDef *)1073821696B].BRR
 658              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 659 004a 4560     		str	r5, [r0, #4]	@ tmp359, MEM[(struct NVIC_Type *)3758153984B].ISER
 660              	@ main.c:5441: 	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 661 004c D969     		ldr	r1, [r3, #28]	@ _441, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 662              	@ main.c:5449: 	GPIOB->CRH  = (GPIOB->CRH & 0xffff00ff)| 0x00004900; //PB10=TX, PB11=RX zerowanie
 663 004e B54E     		ldr	r6, .L114+12	@ tmp380,
 664              	@ main.c:5441: 	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 665 0050 41F40031 		orr	r1, r1, #131072	@ _442, _441,
 666 0054 D961     		str	r1, [r3, #28]	@ _442, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 667              	@ main.c:5442: 	GPIOA->CRL = (GPIOA->CRL & 0xffff00ff) | 0x00004900; // PA2=TX, PA3=RX 
 668 0056 DEF80010 		ldr	r1, [lr]	@ _443, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 669              	@ main.c:5450: 	USART3->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 670 005a B34D     		ldr	r5, .L114+16	@ tmp383,
 671              	@ main.c:5442: 	GPIOA->CRL = (GPIOA->CRL & 0xffff00ff) | 0x00004900; // PA2=TX, PA3=RX 
 672 005c 21F47F41 		bic	r1, r1, #65280	@ tmp363, _443,
 673 0060 41F49241 		orr	r1, r1, #18688	@ _445, tmp363,
 674 0064 CEF80010 		str	r1, [lr]	@ _445, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 675              	@ main.c:5443: 	USART2->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 676 0068 B8F80C10 		ldrh	r1, [r8, #12]	@, MEM[(struct USART_TypeDef *)1073759232B].CR1
 677              	@ main.c:377: 		cah = (BKP->DR2<<16) + BKP->DR1;
 678 006c DFF82C93 		ldr	r9, .L114+132	@ tmp931,
 679              	@ main.c:5443: 	USART2->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 680 0070 1143     		orrs	r1, r1, r2	@, _447, MEM[(struct USART_TypeDef *)1073759232B].CR1, tmp351
 681 0072 A8F80C10 		strh	r1, [r8, #12]	@ movhi	@ _447, MEM[(struct USART_TypeDef *)1073759232B].CR1
 682              	@ main.c:5444: 	USART2->BRR = ((F_CPU+UART2_SPEED/2)/UART2_SPEED)/2;
 683 0076 A8F80870 		strh	r7, [r8, #8]	@ movhi	@ tmp375, MEM[(struct USART_TypeDef *)1073759232B].BRR
 684              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
ARM GAS  /tmp/ccrMssCc.s 			page 13


 685 007a C0F804C0 		str	ip, [r0, #4]	@ tmp377, MEM[(struct NVIC_Type *)3758153984B].ISER
 686              	@ main.c:5448: 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 687 007e D969     		ldr	r1, [r3, #28]	@ _434, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 688              	@ main.c:306: 		PutChar = UART2_putc;	tr_pen_color ( TYELLOW );
 689 0080 0320     		movs	r0, #3	@,
 690              	@ main.c:5448: 	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 691 0082 41F48021 		orr	r1, r1, #262144	@ _435, _434,
 692 0086 D961     		str	r1, [r3, #28]	@ _435, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 693              	@ main.c:5449: 	GPIOB->CRH  = (GPIOB->CRH & 0xffff00ff)| 0x00004900; //PB10=TX, PB11=RX zerowanie
 694 0088 7368     		ldr	r3, [r6, #4]	@ _436, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 695 008a DFF81483 		ldr	r8, .L114+136	@ tmp942,
 696 008e 23F47F43 		bic	r3, r3, #65280	@ tmp381, _436,
 697 0092 43F49243 		orr	r3, r3, #18688	@ _438, tmp381,
 698 0096 7360     		str	r3, [r6, #4]	@ _438, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 699              	@ main.c:5450: 	USART3->CR1 |= (USART_CR1_UE |USART_CR1_TE | USART_CR1_RE	|USART_CR1_RXNEIE);
 700 0098 AB89     		ldrh	r3, [r5, #12]	@, MEM[(struct USART_TypeDef *)1073760256B].CR1
 701 009a DFF808A3 		ldr	r10, .L114+140	@ tmp940,
 702 009e 1A43     		orrs	r2, r2, r3	@, _440, tmp351, MEM[(struct USART_TypeDef *)1073760256B].CR1
 703 00a0 AA81     		strh	r2, [r5, #12]	@ movhi	@ _440, MEM[(struct USART_TypeDef *)1073760256B].CR1
 704              	@ main.c:306: 		PutChar = UART2_putc;	tr_pen_color ( TYELLOW );
 705 00a2 A24B     		ldr	r3, .L114+20	@ tmp971,
 706 00a4 A24A     		ldr	r2, .L114+24	@ tmp972,
 707              	@ main.c:5451: 	USART3->BRR = ((F_CPU+UART3_SPEED/2)/UART3_SPEED)/2;
 708 00a6 2F81     		strh	r7, [r5, #8]	@ movhi	@ tmp375, MEM[(struct USART_TypeDef *)1073760256B].BRR
 709              	@ main.c:306: 		PutChar = UART2_putc;	tr_pen_color ( TYELLOW );
 710 00a8 1A60     		str	r2, [r3]	@ tmp972, PutChar
 711 00aa FFF7FEFF 		bl	tr_pen_color	@
 712              	@ main.c:307: 		UaPutS("\f UART2 "); UaPutS (uint2str( (F_CPU/1)/(1*USART1->BRR-1),buf));	
 713 00ae A148     		ldr	r0, .L114+28	@,
 714 00b0 FFF7FEFF 		bl	UaPutS	@
 715 00b4 2389     		ldrh	r3, [r4, #8]	@, MEM[(struct USART_TypeDef *)1073821696B].BRR
 716 00b6 A048     		ldr	r0, .L114+32	@ tmp404,
 717 00b8 013B     		subs	r3, r3, #1	@ tmp401, MEM[(struct USART_TypeDef *)1073821696B].BRR,
 718 00ba B0FBF3F0 		udiv	r0, r0, r3	@, tmp404, tmp401
 719 00be 08A9     		add	r1, sp, #32	@,,
 720              	@ main.c:332: 		const u08 i2cnf[3]={0,0x1e,0x67},i2trig_bus[3]={0,0x1e,0x67};
 721 00c0 9E4F     		ldr	r7, .L114+36	@ tmp406,
 722              	@ main.c:307: 		UaPutS("\f UART2 "); UaPutS (uint2str( (F_CPU/1)/(1*USART1->BRR-1),buf));	
 723 00c2 FFF7FEFF 		bl	uint2str	@
 724 00c6 FFF7FEFF 		bl	UaPutS	@
 725              	@ main.c:352: 		char tstat[7][8]={" PojLad"," PojRoz"," Czekaj"," Napiec"," KonLad"," KonRoz"," Lad
 726 00ca 07F14405 		add	r5, r7, #68	@ tmp422, tmp406,
 727              	@ main.c:308: 		UaPutS (" b/s \r\n"); 
 728 00ce 9C48     		ldr	r0, .L114+40	@,
 729              	@ main.c:352: 		char tstat[7][8]={" PojLad"," PojRoz"," Czekaj"," Napiec"," KonLad"," KonRoz"," Lad
 730 00d0 0EAC     		add	r4, sp, #56	@ tmp973,,
 731              	@ main.c:308: 		UaPutS (" b/s \r\n"); 
 732 00d2 FFF7FEFF 		bl	UaPutS	@
 733              	@ main.c:352: 		char tstat[7][8]={" PojLad"," PojRoz"," Czekaj"," Napiec"," KonLad"," KonRoz"," Lad
 734 00d6 0FCD     		ldmia	r5!, {r0, r1, r2, r3}	@ tmp422,,,,
 735 00d8 0FC4     		stmia	r4!, {r0, r1, r2, r3}	@ tmp421,,,,
 736 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}	@ tmp422,,,,
 737 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}	@ tmp421,,,,
 738 00de 0FCD     		ldmia	r5!, {r0, r1, r2, r3}	@ tmp422,,,,
 739 00e0 0FC4     		stmia	r4!, {r0, r1, r2, r3}	@ tmp421,,,,
 740 00e2 95E80300 		ldm	r5, {r0, r1}	@ tmp422,,
 741              	@ main.c:332: 		const u08 i2cnf[3]={0,0x1e,0x67},i2trig_bus[3]={0,0x1e,0x67};
ARM GAS  /tmp/ccrMssCc.s 			page 14


 742 00e6 3B6C     		ldr	r3, [r7, #64]	@ tmp409,
 743              	@ main.c:382: 		stat = czk;
 744 00e8 0225     		movs	r5, #2	@ stat,
 745              	@ main.c:332: 		const u08 i2cnf[3]={0,0x1e,0x67},i2trig_bus[3]={0,0x1e,0x67};
 746 00ea 1A0C     		lsrs	r2, r3, #16	@ tmp411, tmp409,
 747 00ec ADF81430 		strh	r3, [sp, #20]	@ movhi	@ tmp409, i2cnf
 748 00f0 ADF81830 		strh	r3, [sp, #24]	@ movhi	@ tmp409, i2trig_bus
 749 00f4 8DF81620 		strb	r2, [sp, #22]	@ tmp411, i2cnf
 750 00f8 8DF81A20 		strb	r2, [sp, #26]	@ tmp411, i2trig_bus
 751              	@ main.c:352: 		char tstat[7][8]={" PojLad"," PojRoz"," Czekaj"," Napiec"," KonLad"," KonRoz"," Lad
 752 00fc 84E80300 		stm	r4, {r0, r1}	@ tmp421,,
 753              	@ main.c:354: 		i2c1r_init();
 754 0100 FFF7FEFF 		bl	i2c1r_init	@
 755              	@ main.c:359: 		i2c1_write(INA219_ADDR,(u08 *)i2cnf,3);
 756 0104 05A9     		add	r1, sp, #20	@ tmp974,,
 757 0106 0322     		movs	r2, #3	@,
 758 0108 8020     		movs	r0, #128	@,
 759 010a FFF7FEFF 		bl	i2c1_write	@
 760              	@ main.c:361: 		i2weg[0]=5;    // Calibration Register 0x1e63 continus
 761 010e 40F60574 		movw	r4, #3845	@ tmp425,
 762              	@ main.c:362: 		i2weg[1]=0x0f; // MSB Data
 763 0112 DB23     		movs	r3, #219	@ tmp426,
 764              	@ main.c:364: 		i2c1_write(INA219_ADDR,i2weg,3);
 765 0114 0322     		movs	r2, #3	@,
 766 0116 04A9     		add	r1, sp, #16	@,,
 767 0118 8020     		movs	r0, #128	@,
 768              	@ main.c:361: 		i2weg[0]=5;    // Calibration Register 0x1e63 continus
 769 011a ADF81040 		strh	r4, [sp, #16]	@ movhi	@ tmp425, MEM[(u08[3] *)&i2weg]
 770              	@ main.c:362: 		i2weg[1]=0x0f; // MSB Data
 771 011e 8DF81230 		strb	r3, [sp, #18]	@ tmp426, MEM[(u08[3] *)&i2weg + 2B]
 772              	@ main.c:364: 		i2c1_write(INA219_ADDR,i2weg,3);
 773 0122 FFF7FEFF 		bl	i2c1_write	@
 774              	@ main.c:366: 		i2c1_read (INA219_ADDR,0,i2reg,2);
 775 0126 03AA     		add	r2, sp, #12	@ tmp975,,
 776 0128 0223     		movs	r3, #2	@,
 777 012a 0021     		movs	r1, #0	@,
 778 012c 8020     		movs	r0, #128	@,
 779 012e FFF7FEFF 		bl	i2c1_read	@
 780              	@ main.c:380: 		LAD = 0; ROZ = 0;	BEP = 1; 
 781 0132 0022     		movs	r2, #0	@ tmp454,
 782 0134 4FF0010E 		mov	lr, #1	@ tmp458,
 783              	@ main.c:371: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 784 0138 7768     		ldr	r7, [r6, #4]	@ _7, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 785              	@ main.c:377: 		cah = (BKP->DR2<<16) + BKP->DR1;
 786 013a 8249     		ldr	r1, .L114+44	@ tmp435,
 787              	@ main.c:371: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 788 013c 27F07F67 		bic	r7, r7, #267386880	@ tmp431, _7,
 789 0140 27F47027 		bic	r7, r7, #983040	@ tmp431, tmp431,
 790 0144 47F0AA67 		orr	r7, r7, #89128960	@ _9, tmp431,
 791 0148 47F4A027 		orr	r7, r7, #327680	@ _9, _9,
 792              	@ main.c:381: 		beep=0; 
 793 014c 0192     		str	r2, [sp, #4]	@ tmp454, %sfp
 794              	@ main.c:371: 		GPIOB->CRH = (GPIOB->CRH & 0xf000ffff) | 0x05550000;
 795 014e 7760     		str	r7, [r6, #4]	@ _9, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 796              	@ main.c:377: 		cah = (BKP->DR2<<16) + BKP->DR1;
 797 0150 0F89     		ldrh	r7, [r1, #8]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR2
 798 0152 8E88     		ldrh	r6, [r1, #4]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR1
ARM GAS  /tmp/ccrMssCc.s 			page 15


 799              	@ main.c:380: 		LAD = 0; ROZ = 0;	BEP = 1; 
 800 0154 7C48     		ldr	r0, .L114+48	@ tmp455,
 801              	@ main.c:377: 		cah = (BKP->DR2<<16) + BKP->DR1;
 802 0156 06EB0746 		add	r6, r6, r7, lsl #16	@ tmp443, MEM[(struct BKP_TypeDef *)1073769472B].DR1, MEM[(struct BKP_Type
 803              	@ main.c:378: 		cwh = (BKP->DR4<<16) + BKP->DR3;
 804 015a 0F8A     		ldrh	r7, [r1, #16]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR4
 805 015c 8989     		ldrh	r1, [r1, #12]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR3
 806              	@ main.c:377: 		cah = (BKP->DR2<<16) + BKP->DR1;
 807 015e C9F80060 		str	r6, [r9]	@ tmp443, cah
 808              	@ main.c:378: 		cwh = (BKP->DR4<<16) + BKP->DR3;
 809 0162 01EB0741 		add	r1, r1, r7, lsl #16	@ tmp452, MEM[(struct BKP_TypeDef *)1073769472B].DR3, MEM[(struct BKP_Type
 810              	@ main.c:380: 		LAD = 0; ROZ = 0;	BEP = 1; 
 811 0166 DFF80CC2 		ldr	ip, .L114+92	@ tmp453,
 812 016a 784E     		ldr	r6, .L114+52	@ tmp457,
 813              	@ main.c:378: 		cwh = (BKP->DR4<<16) + BKP->DR3;
 814 016c 784F     		ldr	r7, .L114+56	@ tmp976,
 815              	@ main.c:383: 		trg1  = SysTick->VAL;	
 816 016e 794B     		ldr	r3, .L114+60	@ tmp459,
 817              	@ main.c:378: 		cwh = (BKP->DR4<<16) + BKP->DR3;
 818 0170 3960     		str	r1, [r7]	@ tmp452, cwh
 819              	@ main.c:380: 		LAD = 0; ROZ = 0;	BEP = 1; 
 820 0172 CCF80020 		str	r2, [ip]	@ tmp454, MEM[(volatile long unsigned int *)1109492148B]
 821 0176 0260     		str	r2, [r0]	@ tmp454, MEM[(volatile long unsigned int *)1109492144B]
 822 0178 C6F800E0 		str	lr, [r6]	@ tmp458, MEM[(volatile long unsigned int *)1109492152B]
 823              	@ main.c:383: 		trg1  = SysTick->VAL;	
 824 017c 9A68     		ldr	r2, [r3, #8]	@ _24, MEM[(struct SysTick_Type *)3758153744B].VAL
 825 017e 7649     		ldr	r1, .L114+64	@ tmp977,
 826              	@ main.c:388: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 827 0180 1C46     		mov	r4, r3	@ tmp464, tmp459
 828              	@ main.c:383: 		trg1  = SysTick->VAL;	
 829 0182 0A60     		str	r2, [r1]	@ _24, trg1
 830              	@ main.c:384: 		trg0  = SysTick->VAL;
 831 0184 9B68     		ldr	r3, [r3, #8]	@ _25, MEM[(struct SysTick_Type *)3758153744B].VAL
 832 0186 754A     		ldr	r2, .L114+68	@ tmp978,
 833 0188 1360     		str	r3, [r2]	@ _25, trg0
 834              	.L86:
 835              	@ main.c:388: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 836 018a 744B     		ldr	r3, .L114+68	@ tmp979,
 837 018c 1B68     		ldr	r3, [r3]	@ trg0.1_26, trg0
 838 018e A268     		ldr	r2, [r4, #8]	@ _27, MEM[(struct SysTick_Type *)3758153744B].VAL
 839 0190 9B1A     		subs	r3, r3, r2	@ tmp465, trg0.1_26, _27
 840 0192 734A     		ldr	r2, .L114+72	@ tmp980,
 841 0194 9342     		cmp	r3, r2	@ tmp465, tmp980
 842 0196 00F24F82 		bhi	.L108	@,
 843              	.L51:
 844              	@ main.c:479: 			if( (STCLK_MS*2000 < (trg1 - SysTick->VAL)) ){	
 845 019a 6F4B     		ldr	r3, .L114+64	@ tmp1029,
 846 019c 714A     		ldr	r2, .L114+76	@ tmp709,
 847 019e 1F46     		mov	r7, r3	@ tmp1029, tmp1029
 848 01a0 1B68     		ldr	r3, [r3]	@ trg1.42_151, trg1
 849 01a2 A168     		ldr	r1, [r4, #8]	@ _152, MEM[(struct SysTick_Type *)3758153744B].VAL
 850 01a4 5B1A     		subs	r3, r3, r1	@ tmp708, trg1.42_151, _152
 851 01a6 9342     		cmp	r3, r2	@ tmp708, tmp709
 852 01a8 47D9     		bls	.L57	@,
 853              	@ main.c:482: 				if(abs(cur) < 1000 && vbus > 4200 && stat == lad){ // start rozladowanie
 854 01aa 6F4A     		ldr	r2, .L114+80	@ tmp1030,
 855 01ac 4FF0460B 		mov	fp, #70	@ tmp718,
ARM GAS  /tmp/ccrMssCc.s 			page 16


 856 01b0 1388     		ldrh	r3, [r2]	@ cur.44_156, cur
 857 01b2 6E4A     		ldr	r2, .L114+84	@ tmp1100,
 858 01b4 40F2CE7E 		movw	lr, #1998	@ tmp721,
 859 01b8 B2F900C0 		ldrsh	ip, [r2]	@ pretmp_550, vbus
 860 01bc 6C4A     		ldr	r2, .L114+88	@ tmp1031,
 861 01be 03F2E731 		addw	r1, r3, #999	@ tmp719, cur.44_156,
 862 01c2 1088     		ldrh	r0, [r2]	@ vr1, vr1
 863 01c4 6FF4FA62 		mvn	r2, #2000	@,
 864 01c8 89B2     		uxth	r1, r1	@ tmp720, tmp719
 865 01ca 0BFB00F0 		mul	r0, fp, r0	@ _601, tmp718, vr1
 866              	@ main.c:480: 				trg1  = SysTick->VAL;	
 867 01ce D4F808B0 		ldr	fp, [r4, #8]	@ _154, MEM[(struct SysTick_Type *)3758153744B].VAL
 868 01d2 6244     		add	r2, ip, r2	@ tmp715, pretmp_550,
 869              	@ main.c:482: 				if(abs(cur) < 1000 && vbus > 4200 && stat == lad){ // start rozladowanie
 870 01d4 7145     		cmp	r1, lr	@ tmp720, tmp721
 871 01d6 92B2     		uxth	r2, r2	@ _495, tmp715
 872              	@ main.c:480: 				trg1  = SysTick->VAL;	
 873 01d8 C7F800B0 		str	fp, [r7]	@ _154, trg1
 874              	@ main.c:482: 				if(abs(cur) < 1000 && vbus > 4200 && stat == lad){ // start rozladowanie
 875 01dc 00F2CB81 		bhi	.L58	@,
 876              	@ main.c:482: 				if(abs(cur) < 1000 && vbus > 4200 && stat == lad){ // start rozladowanie
 877 01e0 41F26801 		movw	r1, #4200	@ tmp722,
 878 01e4 8C45     		cmp	ip, r1	@ pretmp_550, tmp722
 879 01e6 40F3C681 		ble	.L58	@,
 880              	@ main.c:482: 				if(abs(cur) < 1000 && vbus > 4200 && stat == lad){ // start rozladowanie
 881 01ea 002D     		cmp	r5, #0	@ stat
 882 01ec 40F0C381 		bne	.L58	@
 883              	@ main.c:484: 					ROZ = 1;
 884 01f0 0121     		movs	r1, #1	@ tmp726,
 885              	@ main.c:491: 				if(vbus < 2600 && vbus > 2000 && stat==roz) { // koniec rozladowania
 886 01f2 40F2562E 		movw	lr, #598	@ tmp731,
 887              	@ main.c:484: 					ROZ = 1;
 888 01f6 544E     		ldr	r6, .L114+48	@ tmp1033,
 889              	@ main.c:483: 					LAD = 0;
 890 01f8 DFF878B1 		ldr	fp, .L114+92	@ tmp723,
 891              	@ main.c:491: 				if(vbus < 2600 && vbus > 2000 && stat==roz) { // koniec rozladowania
 892 01fc 7245     		cmp	r2, lr	@ _495, tmp731
 893              	@ main.c:483: 					LAD = 0;
 894 01fe CBF80050 		str	r5, [fp]	@ stat, MEM[(volatile long unsigned int *)1109492148B]
 895              	@ main.c:484: 					ROZ = 1;
 896 0202 3160     		str	r1, [r6]	@ tmp726, MEM[(volatile long unsigned int *)1109492144B]
 897              	@ main.c:486: 					cwh = 0;
 898 0204 524E     		ldr	r6, .L114+56	@ tmp1034,
 899              	@ main.c:485: 					cah = 0;
 900 0206 C9F80050 		str	r5, [r9]	@ stat, cah
 901              	@ main.c:486: 					cwh = 0;
 902 020a 3560     		str	r5, [r6]	@ stat, cwh
 903              	@ main.c:491: 				if(vbus < 2600 && vbus > 2000 && stat==roz) { // koniec rozladowania
 904 020c 40F25F83 		bls	.L62	@,
 905              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 906 0210 D8F80020 		ldr	r2, [r8]	@ Cah, Cah
 907              	@ main.c:487: 					stat = roz;
 908 0214 0D46     		mov	r5, r1	@ stat, tmp726
 909              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 910 0216 8242     		cmp	r2, r0	@ Cah, _601
 911 0218 0FD8     		bhi	.L57	@,
 912              	.L68:
ARM GAS  /tmp/ccrMssCc.s 			page 17


 913              	@ main.c:521: 				if(abs(cur) < 100 && vbus > 4200 && stat == dal){ // koniec ladownia
 914 021a 6333     		adds	r3, r3, #99	@ tmp778, cur.44_156,
 915 021c 9BB2     		uxth	r3, r3	@ tmp779, tmp778
 916 021e C62B     		cmp	r3, #198	@ tmp779,
 917 0220 0BD8     		bhi	.L57	@,
 918              	@ main.c:521: 				if(abs(cur) < 100 && vbus > 4200 && stat == dal){ // koniec ladownia
 919 0222 41F26803 		movw	r3, #4200	@ tmp780,
 920 0226 9C45     		cmp	ip, r3	@ pretmp_550, tmp780
 921 0228 07DD     		ble	.L57	@,
 922              	@ main.c:521: 				if(abs(cur) < 100 && vbus > 4200 && stat == dal){ // koniec ladownia
 923 022a 062D     		cmp	r5, #6	@ stat,
 924 022c 05D1     		bne	.L57	@,
 925              	@ main.c:522: 					LAD = 0;
 926 022e 0023     		movs	r3, #0	@ tmp782,
 927              	@ main.c:525: 					stat = czk;
 928 0230 0225     		movs	r5, #2	@ stat,
 929              	@ main.c:522: 					LAD = 0;
 930 0232 504A     		ldr	r2, .L114+92	@ tmp781,
 931 0234 1360     		str	r3, [r2]	@ tmp782, MEM[(volatile long unsigned int *)1109492148B]
 932              	@ main.c:523: 					ROZ = 0;
 933 0236 42F8043C 		str	r3, [r2, #-4]	@ tmp782, MEM[(volatile long unsigned int *)1109492144B]
 934              	.L57:
 935              	@ main.c:529: 			if( (STCLK_MS*500   < (trg2 - SysTick->VAL))) {
 936 023a 4F48     		ldr	r0, .L114+96	@ tmp1049,
 937 023c 4F4A     		ldr	r2, .L114+100	@ tmp788,
 938 023e 0368     		ldr	r3, [r0]	@ trg2.59_169, trg2
 939 0240 A168     		ldr	r1, [r4, #8]	@ _170, MEM[(struct SysTick_Type *)3758153744B].VAL
 940 0242 5B1A     		subs	r3, r3, r1	@ tmp787, trg2.59_169, _170
 941 0244 9342     		cmp	r3, r2	@ tmp787, tmp788
 942 0246 05D9     		bls	.L67	@,
 943              	@ main.c:530: 				trg2  = SysTick->VAL;	
 944 0248 A368     		ldr	r3, [r4, #8]	@ _172, MEM[(struct SysTick_Type *)3758153744B].VAL
 945 024a 0360     		str	r3, [r0]	@ _172, trg2
 946              	@ main.c:531: 				if(beep){	BEP ^= 1; }
 947 024c 019B     		ldr	r3, [sp, #4]	@ beep, %sfp
 948 024e 002B     		cmp	r3, #0	@ beep
 949 0250 40F0EA82 		bne	.L87	@
 950              	.L67:
 951              	@ main.c:534: 			if( (STCLK_MS*100   < (trg3 - SysTick->VAL))) {
 952 0254 4A48     		ldr	r0, .L114+104	@ tmp1054,
 953 0256 4B4A     		ldr	r2, .L114+108	@ tmp796,
 954 0258 0368     		ldr	r3, [r0]	@ trg3.60_175, trg3
 955 025a A168     		ldr	r1, [r4, #8]	@ _176, MEM[(struct SysTick_Type *)3758153744B].VAL
 956 025c 5B1A     		subs	r3, r3, r1	@ tmp795, trg3.60_175, _176
 957 025e 9342     		cmp	r3, r2	@ tmp795, tmp796
 958 0260 06D9     		bls	.L71	@,
 959              	@ main.c:535: 				trg3  = SysTick->VAL;	
 960 0262 A368     		ldr	r3, [r4, #8]	@ _178, MEM[(struct SysTick_Type *)3758153744B].VAL
 961              	@ main.c:536: 				LED ^= 1;	
 962 0264 484A     		ldr	r2, .L114+112	@ tmp799,
 963              	@ main.c:535: 				trg3  = SysTick->VAL;	
 964 0266 0360     		str	r3, [r0]	@ _178, trg3
 965              	@ main.c:536: 				LED ^= 1;	
 966 0268 1368     		ldr	r3, [r2]	@ _179, MEM[(volatile long unsigned int *)1109524916B]
 967 026a 83F00103 		eor	r3, r3, #1	@ _180, _179,
 968 026e 1360     		str	r3, [r2]	@ _180, MEM[(volatile long unsigned int *)1109524916B]
 969              	.L71:
ARM GAS  /tmp/ccrMssCc.s 			page 18


 970              	@ main.c:539: 			if(p_Fifo1->rct){
 971 0270 DAF80030 		ldr	r3, [r10]	@ p_Fifo1.61_181, p_Fifo1
 972 0274 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.61_181->rct
 973 0276 9BB2     		uxth	r3, r3	@ _182, p_Fifo1.61_181->rct
 974 0278 002B     		cmp	r3, #0	@ _182
 975 027a 86D0     		beq	.L86	@
 976              	@ main.c:540: 				UART_getChar( (char*)&swh);
 977 027c 0DF10B00 		add	r0, sp, #11	@ tmp1056,,
 978 0280 FFF7FEFF 		bl	UART_getChar	@
 979              	@ main.c:543: 				switch (swh)	{
 980 0284 9DF80B30 		ldrb	r3, [sp, #11]	@ zero_extendqisi2	@ swh, swh
 981 0288 613B     		subs	r3, r3, #97	@ tmp806, swh,
 982 028a 192B     		cmp	r3, #25	@ tmp806,
 983 028c 3FF67DAF 		bhi	.L86	@
 984 0290 01A2     		adr	r2, .L74	@ tmp969,
 985 0292 52F823F0 		ldr	pc, [r2, r3, lsl #2]	@ tmp969, tmp806
 986 0296 00BF     		.p2align 2
 987              	.L74:
 988 0298 61050000 		.word	.L73+1
 989 029c 55050000 		.word	.L75+1
 990 02a0 8B010000 		.word	.L86+1
 991 02a4 41050000 		.word	.L76+1
 992 02a8 8B010000 		.word	.L86+1
 993 02ac 8B010000 		.word	.L86+1
 994 02b0 8B010000 		.word	.L86+1
 995 02b4 8B010000 		.word	.L86+1
 996 02b8 8B010000 		.word	.L86+1
 997 02bc 8B010000 		.word	.L86+1
 998 02c0 B3040000 		.word	.L77+1
 999 02c4 A3040000 		.word	.L78+1
 1000 02c8 65040000 		.word	.L79+1
 1001 02cc 8B010000 		.word	.L86+1
 1002 02d0 8B010000 		.word	.L86+1
 1003 02d4 8B010000 		.word	.L86+1
 1004 02d8 51040000 		.word	.L80+1
 1005 02dc 8B010000 		.word	.L86+1
 1006 02e0 8B010000 		.word	.L86+1
 1007 02e4 B9030000 		.word	.L81+1
 1008 02e8 8B010000 		.word	.L86+1
 1009 02ec A9030000 		.word	.L82+1
 1010 02f0 8B010000 		.word	.L86+1
 1011 02f4 8B010000 		.word	.L86+1
 1012 02f8 8B010000 		.word	.L86+1
 1013 02fc 01030000 		.word	.L83+1
 1014              		.p2align 1
 1015              	.L83:
 1016              	@ main.c:607: 						cah = 0;
 1017 0300 0023     		movs	r3, #0	@ tmp875,
 1018              	@ main.c:608: 						cwh = 0;
 1019 0302 134A     		ldr	r2, .L114+56	@ tmp1072,
 1020              	@ main.c:607: 						cah = 0;
 1021 0304 C9F80030 		str	r3, [r9]	@ tmp875, cah
 1022              	@ main.c:608: 						cwh = 0;
 1023 0308 1360     		str	r3, [r2]	@ tmp875, cwh
 1024              	@ main.c:609: 						cnt = 0;
 1025 030a 204A     		ldr	r2, .L114+116	@ tmp1099,
 1026 030c 1380     		strh	r3, [r2]	@ movhi	@ tmp875, cnt
ARM GAS  /tmp/ccrMssCc.s 			page 19


 1027              	@ main.c:610: 						Rwa[0] = 0;
 1028 030e 204A     		ldr	r2, .L114+120	@ tmp1073,
 1029              	@ main.c:611: 						Rwa[1] = 0;
 1030 0310 C2E90033 		strd	r3, r3, [r2]	@ tmp875, tmp875, tmp1073
 1031              	@ main.c:616: 					break;
 1032 0314 39E7     		b	.L86	@
 1033              	.L115:
 1034 0316 00BF     		.align	2
 1035              	.L114:
 1036 0318 00100240 		.word	1073876992
 1037 031c 00380140 		.word	1073821696
 1038 0320 00E100E0 		.word	-536813312
 1039 0324 000C0140 		.word	1073810432
 1040 0328 00480040 		.word	1073760256
 1041 032c 00000000 		.word	PutChar
 1042 0330 00000000 		.word	UART2_putc
 1043 0334 00000000 		.word	.LC17
 1044 0338 00A24A04 		.word	72000000
 1045 033c 00000000 		.word	.LANCHOR1
 1046 0340 0C000000 		.word	.LC16
 1047 0344 006C0040 		.word	1073769472
 1048 0348 B0812142 		.word	1109492144
 1049 034c B8812142 		.word	1109492152
 1050 0350 00000000 		.word	.LANCHOR3
 1051 0354 10E000E0 		.word	-536813552
 1052 0358 00000000 		.word	trg1
 1053 035c 00000000 		.word	trg0
 1054 0360 40548900 		.word	9000000
 1055 0364 80A81201 		.word	18000000
 1056 0368 00000000 		.word	.LANCHOR8
 1057 036c 00000000 		.word	.LANCHOR4
 1058 0370 00000000 		.word	.LANCHOR14
 1059 0374 B4812142 		.word	1109492148
 1060 0378 00000000 		.word	trg2
 1061 037c 20AA4400 		.word	4500000
 1062 0380 00000000 		.word	trg3
 1063 0384 A0BB0D00 		.word	900000
 1064 0388 B4012242 		.word	1109524916
 1065 038c 00000000 		.word	.LANCHOR6
 1066 0390 00000000 		.word	.LANCHOR9
 1067 0394 00080140 		.word	1073809408
 1068 0398 00440040 		.word	1073759232
 1069 039c 00000000 		.word	.LANCHOR2
 1070 03a0 00000000 		.word	.LANCHOR11
 1071 03a4 00000000 		.word	p_Fifo1
 1072              	.L82:
 1073              	@ main.c:647: 						LAD = 1;
 1074 03a8 0121     		movs	r1, #1	@ tmp906,
 1075              	@ main.c:648: 						ROZ = 0;
 1076 03aa 0023     		movs	r3, #0	@ tmp908,
 1077              	@ main.c:647: 						LAD = 1;
 1078 03ac 8C4A     		ldr	r2, .L116	@ tmp905,
 1079              	@ main.c:649: 						stat = pom;
 1080 03ae 0325     		movs	r5, #3	@ stat,
 1081              	@ main.c:647: 						LAD = 1;
 1082 03b0 1160     		str	r1, [r2]	@ tmp906, MEM[(volatile long unsigned int *)1109492148B]
 1083              	@ main.c:648: 						ROZ = 0;
ARM GAS  /tmp/ccrMssCc.s 			page 20


 1084 03b2 42F8043C 		str	r3, [r2, #-4]	@ tmp908,
 1085              	@ main.c:651: 					break;
 1086 03b6 E8E6     		b	.L86	@
 1087              	.L81:
 1088              	@ main.c:545: 						UaPutS(TRCLS);
 1089 03b8 8A48     		ldr	r0, .L116+4	@,
 1090 03ba FFF7FEFF 		bl	UaPutS	@
 1091              	@ main.c:547: 						tr_locate(4,1);
 1092 03be 0121     		movs	r1, #1	@,
 1093 03c0 0420     		movs	r0, #4	@,
 1094 03c2 FFF7FEFF 		bl	tr_locate	@
 1095              	@ main.c:548:   					UaPutS("0        1         2         3         4         5");
 1096 03c6 8848     		ldr	r0, .L116+8	@,
 1097 03c8 FFF7FEFF 		bl	UaPutS	@
 1098              	@ main.c:549: 						tr_locate(5,1);
 1099 03cc 0121     		movs	r1, #1	@,
 1100 03ce 0520     		movs	r0, #5	@,
 1101 03d0 FFF7FEFF 		bl	tr_locate	@
 1102              	@ main.c:550:   					UaPutS("123456789 123456789 123456789 123456789 123456789 1234567890");
 1103 03d4 8548     		ldr	r0, .L116+12	@,
 1104 03d6 FFF7FEFF 		bl	UaPutS	@
 1105              	@ main.c:551: 						tr_locate(10,20);
 1106 03da 1421     		movs	r1, #20	@,
 1107 03dc 0A20     		movs	r0, #10	@,
 1108 03de FFF7FEFF 		bl	tr_locate	@
 1109              	@ main.c:552: 						UaPutS("Podaj wrtosc= ");
 1110 03e2 8348     		ldr	r0, .L116+16	@,
 1111 03e4 FFF7FEFF 		bl	UaPutS	@
 1112              	@ main.c:553: 						tr_locate(10,37);
 1113 03e8 2521     		movs	r1, #37	@,
 1114 03ea 0A20     		movs	r0, #10	@,
 1115 03ec FFF7FEFF 		bl	tr_locate	@
 1116              	@ main.c:554: 						UaPutS(TRCLS);
 1117 03f0 7C48     		ldr	r0, .L116+4	@,
 1118 03f2 FFF7FEFF 		bl	UaPutS	@
 1119              	@ main.c:555: 						vr4 = UART_getDec((s32*)&vr3) ;
 1120 03f6 7F48     		ldr	r0, .L116+20	@,
 1121 03f8 FFF7FEFF 		bl	UART_getDec	@
 1122 03fc 7E4E     		ldr	r6, .L116+24	@ tmp1057,
 1123              	@ main.c:557: 						tr_locate(11,20);
 1124 03fe 1421     		movs	r1, #20	@,
 1125              	@ main.c:555: 						vr4 = UART_getDec((s32*)&vr3) ;
 1126 0400 3060     		str	r0, [r6]	@, vr4
 1127              	@ main.c:557: 						tr_locate(11,20);
 1128 0402 0B20     		movs	r0, #11	@,
 1129 0404 FFF7FEFF 		bl	tr_locate	@
 1130              	@ main.c:558: 					  UaPutS(TRCLS"Wartosc ileZnak= ");  
 1131 0408 7C48     		ldr	r0, .L116+28	@,
 1132 040a FFF7FEFF 		bl	UaPutS	@
 1133              	@ main.c:559:  						UaPutS("\033[11;36H");
 1134 040e 7C48     		ldr	r0, .L116+32	@,
 1135 0410 FFF7FEFF 		bl	UaPutS	@
 1136              	@ main.c:560:  						sint2uart (vr3);
 1137 0414 774B     		ldr	r3, .L116+20	@ tmp1058,
 1138 0416 1868     		ldr	r0, [r3]	@, vr3
 1139 0418 FFF7FEFF 		bl	sint2uart	@
 1140              	@ main.c:561: 					  sint2uart (vr4-1); 
ARM GAS  /tmp/ccrMssCc.s 			page 21


 1141 041c 3068     		ldr	r0, [r6]	@ vr4, vr4
 1142 041e 0138     		subs	r0, r0, #1	@, vr4,
 1143 0420 FFF7FEFF 		bl	sint2uart	@
 1144              	@ main.c:562:  						tr_locate(12,20);
 1145 0424 1421     		movs	r1, #20	@,
 1146 0426 0C20     		movs	r0, #12	@,
 1147 0428 FFF7FEFF 		bl	tr_locate	@
 1148              	@ main.c:563: 						UaPutS("Zerowanie t/n=");
 1149 042c 7548     		ldr	r0, .L116+36	@,
 1150 042e FFF7FEFF 		bl	UaPutS	@
 1151              	@ main.c:564:  						tr_locate(12,37);
 1152 0432 2521     		movs	r1, #37	@,
 1153 0434 0C20     		movs	r0, #12	@,
 1154 0436 FFF7FEFF 		bl	tr_locate	@
 1155              	@ main.c:565: 						UaPutS(TRCLS);
 1156 043a 6A48     		ldr	r0, .L116+4	@,
 1157 043c FFF7FEFF 		bl	UaPutS	@
 1158              	@ main.c:566: 						UART_getStr(znaki);
 1159 0440 0BA8     		add	r0, sp, #44	@ tmp1060,,
 1160 0442 FFF7FEFF 		bl	UART_getStr	@
 1161              	@ main.c:569:  						tr_locate(2,2); 						
 1162 0446 0221     		movs	r1, #2	@,
 1163 0448 0846     		mov	r0, r1	@,
 1164 044a FFF7FEFF 		bl	tr_locate	@
 1165              	@ main.c:570: 					break;
 1166 044e 9CE6     		b	.L86	@
 1167              	.L80:
 1168              	@ main.c:634: 						LAD = 0;
 1169 0450 0023     		movs	r3, #0	@ tmp898,
 1170              	@ main.c:636: 						BEP = 1;
 1171 0452 0121     		movs	r1, #1	@ tmp902,
 1172              	@ main.c:634: 						LAD = 0;
 1173 0454 6248     		ldr	r0, .L116	@ tmp897,
 1174              	@ main.c:636: 						BEP = 1;
 1175 0456 6C4A     		ldr	r2, .L116+40	@ tmp901,
 1176              	@ main.c:634: 						LAD = 0;
 1177 0458 0360     		str	r3, [r0]	@ tmp898, MEM[(volatile long unsigned int *)1109492148B]
 1178              	@ main.c:637: 						stat = czk;
 1179 045a 0225     		movs	r5, #2	@ stat,
 1180              	@ main.c:635: 						ROZ = 0;
 1181 045c 40F8043C 		str	r3, [r0, #-4]	@ tmp898, MEM[(volatile long unsigned int *)1109492144B]
 1182              	@ main.c:636: 						BEP = 1;
 1183 0460 1160     		str	r1, [r2]	@ tmp902, MEM[(volatile long unsigned int *)1109492152B]
 1184              	@ main.c:639: 					break;
 1185 0462 92E6     		b	.L86	@
 1186              	.L79:
 1187              	@ main.c:572: 						UaPutS(TRCLS);
 1188 0464 5F48     		ldr	r0, .L116+4	@,
 1189 0466 FFF7FEFF 		bl	UaPutS	@
 1190              	@ main.c:574: 						UaPutS(" Podaj wrtosc= ");
 1191 046a 6848     		ldr	r0, .L116+44	@,
 1192 046c FFF7FEFF 		bl	UaPutS	@
 1193              	@ main.c:575: 						vr4 = UART_getDec((s32*)&vr3) ;
 1194 0470 6048     		ldr	r0, .L116+20	@,
 1195 0472 FFF7FEFF 		bl	UART_getDec	@
 1196 0476 604B     		ldr	r3, .L116+24	@ tmp1061,
 1197              	@ main.c:576: 					  tr_locate(3,2);
ARM GAS  /tmp/ccrMssCc.s 			page 22


 1198 0478 0221     		movs	r1, #2	@,
 1199              	@ main.c:575: 						vr4 = UART_getDec((s32*)&vr3) ;
 1200 047a 1E46     		mov	r6, r3	@ tmp1061, tmp1061
 1201 047c 1860     		str	r0, [r3]	@, vr4
 1202              	@ main.c:576: 					  tr_locate(3,2);
 1203 047e 0320     		movs	r0, #3	@,
 1204 0480 FFF7FEFF 		bl	tr_locate	@
 1205              	@ main.c:577: 					  UaPutS(TRCLS"ileZnak,Wartosc=");
 1206 0484 6248     		ldr	r0, .L116+48	@,
 1207 0486 FFF7FEFF 		bl	UaPutS	@
 1208              	@ main.c:578:  						sint2uart (vr4);
 1209 048a 3068     		ldr	r0, [r6]	@, vr4
 1210 048c FFF7FEFF 		bl	sint2uart	@
 1211              	@ main.c:579:  						sint2uart (vr3);
 1212 0490 584B     		ldr	r3, .L116+20	@ tmp1063,
 1213 0492 1868     		ldr	r0, [r3]	@, vr3
 1214 0494 FFF7FEFF 		bl	sint2uart	@
 1215              	@ main.c:580: 						tr_locate(2,1);
 1216 0498 0121     		movs	r1, #1	@,
 1217 049a 0220     		movs	r0, #2	@,
 1218 049c FFF7FEFF 		bl	tr_locate	@
 1219              	@ main.c:582: 					break;
 1220 04a0 73E6     		b	.L86	@
 1221              	.L78:
 1222              	@ main.c:653: 						LAD = 1;
 1223 04a2 0121     		movs	r1, #1	@ tmp910,
 1224              	@ main.c:654: 						ROZ = 0;
 1225 04a4 0023     		movs	r3, #0	@ tmp912,
 1226              	@ main.c:653: 						LAD = 1;
 1227 04a6 4E4A     		ldr	r2, .L116	@ tmp909,
 1228              	@ main.c:655: 						stat = dal;
 1229 04a8 0625     		movs	r5, #6	@ stat,
 1230              	@ main.c:653: 						LAD = 1;
 1231 04aa 1160     		str	r1, [r2]	@ tmp910, MEM[(volatile long unsigned int *)1109492148B]
 1232              	@ main.c:654: 						ROZ = 0;
 1233 04ac 42F8043C 		str	r3, [r2, #-4]	@ tmp912,
 1234              	@ main.c:387: 		while(1){
 1235 04b0 6BE6     		b	.L86	@
 1236              	.L77:
 1237              	@ main.c:584: 						UaPutS(TRCLS);
 1238 04b2 4C48     		ldr	r0, .L116+4	@,
 1239 04b4 FFF7FEFF 		bl	UaPutS	@
 1240              	@ main.c:587: 						BEP = 1;
 1241 04b8 0122     		movs	r2, #1	@ tmp837,
 1242 04ba 534B     		ldr	r3, .L116+40	@ tmp836,
 1243              	@ main.c:589: 						sint2uart(vr1);
 1244 04bc 554D     		ldr	r5, .L116+52	@ tmp1064,
 1245              	@ main.c:587: 						BEP = 1;
 1246 04be 1A60     		str	r2, [r3]	@ tmp837, MEM[(volatile long unsigned int *)1109492152B]
 1247              	@ main.c:588: 						UaPutS(" Laduj do 70% x [mAh]=");
 1248 04c0 5548     		ldr	r0, .L116+56	@,
 1249 04c2 FFF7FEFF 		bl	UaPutS	@
 1250              	@ main.c:589: 						sint2uart(vr1);
 1251 04c6 2888     		ldrh	r0, [r5]	@, vr1
 1252 04c8 FFF7FEFF 		bl	sint2uart	@
 1253              	@ main.c:590: 						UaPutS(" ");
 1254 04cc 5348     		ldr	r0, .L116+60	@,
ARM GAS  /tmp/ccrMssCc.s 			page 23


 1255 04ce FFF7FEFF 		bl	UaPutS	@
 1256              	@ main.c:591: 						vr4 = UART_getDec(&vr3) ;
 1257 04d2 4848     		ldr	r0, .L116+20	@,
 1258 04d4 FFF7FEFF 		bl	UART_getDec	@
 1259 04d8 474B     		ldr	r3, .L116+24	@ tmp1065,
 1260              	@ main.c:592: 						if(vr4>1) vr1 = vr3;
 1261 04da 0128     		cmp	r0, #1	@ tmp843,
 1262              	@ main.c:591: 						vr4 = UART_getDec(&vr3) ;
 1263 04dc 1860     		str	r0, [r3]	@ tmp843, vr4
 1264              	@ main.c:592: 						if(vr4>1) vr1 = vr3;
 1265 04de 02DD     		ble	.L84	@,
 1266              	@ main.c:592: 						if(vr4>1) vr1 = vr3;
 1267 04e0 444B     		ldr	r3, .L116+20	@ tmp1066,
 1268 04e2 1B68     		ldr	r3, [r3]	@ vr3, vr3
 1269 04e4 2B80     		strh	r3, [r5]	@ movhi	@ vr3, vr1
 1270              	.L84:
 1271              	@ main.c:593: 						UaPutS(TRCLS" Rozladuj [t/n]=");
 1272 04e6 4E48     		ldr	r0, .L116+64	@,
 1273 04e8 FFF7FEFF 		bl	UaPutS	@
 1274              	@ main.c:594: 						UART_getStr(str) ;
 1275 04ec 07A8     		add	r0, sp, #28	@ tmp1068,,
 1276 04ee FFF7FEFF 		bl	UART_getStr	@
 1277              	@ main.c:595: 						sint2uart (vr2);
 1278 04f2 0020     		movs	r0, #0	@,
 1279 04f4 FFF7FEFF 		bl	sint2uart	@
 1280              	@ main.c:597: 					  tr_locate(3,1);
 1281 04f8 0121     		movs	r1, #1	@,
 1282 04fa 0320     		movs	r0, #3	@,
 1283 04fc FFF7FEFF 		bl	tr_locate	@
 1284              	@ main.c:598: 					  UaPutS(TRCLS"Laduj do [mAh]=");
 1285 0500 4848     		ldr	r0, .L116+68	@,
 1286 0502 FFF7FEFF 		bl	UaPutS	@
 1287              	@ main.c:599:  						sint2uart (vr1*7/10);
 1288 0506 434B     		ldr	r3, .L116+52	@ tmp1069,
 1289 0508 4748     		ldr	r0, .L116+72	@ tmp859,
 1290 050a 1B88     		ldrh	r3, [r3]	@ vr1, vr1
 1291 050c C3EBC303 		rsb	r3, r3, r3, lsl #3	@ tmp856, vr1, vr1,
 1292 0510 A0FB0330 		umull	r3, r0, r0, r3	@ tmp970, tmp858, tmp859, tmp856
 1293 0514 C008     		lsrs	r0, r0, #3	@, tmp858,
 1294 0516 FFF7FEFF 		bl	sint2uart	@
 1295              	@ main.c:600: 						tr_locate(2,1);
 1296 051a 0121     		movs	r1, #1	@,
 1297 051c 0220     		movs	r0, #2	@,
 1298 051e FFF7FEFF 		bl	tr_locate	@
 1299              	@ main.c:601: 						if(str[0]=='t') { stat = rok; LAD = 0;	ROZ = 1; }
 1300 0522 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2	@ str, str
 1301 0526 742B     		cmp	r3, #116	@ str,
 1302 0528 4FF00003 		mov	r3, #0	@ tmp867,
 1303 052c 00F09182 		beq	.L109	@,
 1304              	@ main.c:602: 						else 			 { stat = kon; ROZ = 0;	LAD = 1; }
 1305 0530 0121     		movs	r1, #1	@ tmp873,
 1306 0532 2B4A     		ldr	r2, .L116	@ tmp872,
 1307 0534 3D48     		ldr	r0, .L116+76	@ tmp1071,
 1308 0536 0425     		movs	r5, #4	@ stat,
 1309 0538 0360     		str	r3, [r0]	@ tmp871, MEM[(volatile long unsigned int *)1109492144B]
 1310              	@ main.c:586: 						beep= 0;
 1311 053a 0193     		str	r3, [sp, #4]	@ tmp871, %sfp
ARM GAS  /tmp/ccrMssCc.s 			page 24


 1312              	@ main.c:602: 						else 			 { stat = kon; ROZ = 0;	LAD = 1; }
 1313 053c 1160     		str	r1, [r2]	@ tmp873, MEM[(volatile long unsigned int *)1109492148B]
 1314 053e 24E6     		b	.L86	@
 1315              	.L76:
 1316              	@ main.c:626: 						LAD = 0;
 1317 0540 0023     		movs	r3, #0	@ tmp892,
 1318              	@ main.c:627: 						ROZ = 1;
 1319 0542 0125     		movs	r5, #1	@ tmp894,
 1320              	@ main.c:626: 						LAD = 0;
 1321 0544 2649     		ldr	r1, .L116	@ tmp891,
 1322              	@ main.c:628: 						BEP = 1;
 1323 0546 304A     		ldr	r2, .L116+40	@ tmp895,
 1324              	@ main.c:626: 						LAD = 0;
 1325 0548 0B60     		str	r3, [r1]	@ tmp892, MEM[(volatile long unsigned int *)1109492148B]
 1326              	@ main.c:629: 						beep=0; 
 1327 054a 0193     		str	r3, [sp, #4]	@ tmp892, %sfp
 1328              	@ main.c:627: 						ROZ = 1;
 1329 054c 374B     		ldr	r3, .L116+76	@ tmp1076,
 1330 054e 1D60     		str	r5, [r3]	@ tmp894, MEM[(volatile long unsigned int *)1109492144B]
 1331              	@ main.c:628: 						BEP = 1;
 1332 0550 1560     		str	r5, [r2]	@ tmp894, MEM[(volatile long unsigned int *)1109492152B]
 1333              	@ main.c:632: 					break;
 1334 0552 1AE6     		b	.L86	@
 1335              	.L75:
 1336              	@ main.c:643: 						BEP = 1;
 1337 0554 0122     		movs	r2, #1	@ tmp904,
 1338              	@ main.c:642: 						beep   = 0;
 1339 0556 0021     		movs	r1, #0	@ beep,
 1340              	@ main.c:643: 						BEP = 1;
 1341 0558 2B4B     		ldr	r3, .L116+40	@ tmp903,
 1342              	@ main.c:642: 						beep   = 0;
 1343 055a 0191     		str	r1, [sp, #4]	@ beep, %sfp
 1344              	@ main.c:643: 						BEP = 1;
 1345 055c 1A60     		str	r2, [r3]	@ tmp904, MEM[(volatile long unsigned int *)1109492152B]
 1346              	@ main.c:644: 					break;
 1347 055e 14E6     		b	.L86	@
 1348              	.L73:
 1349              	@ main.c:618: 						ROZ = 0;
 1350 0560 0022     		movs	r2, #0	@ tmp886,
 1351              	@ main.c:619: 						LAD = 1;
 1352 0562 0123     		movs	r3, #1	@ tmp888,
 1353 0564 1E48     		ldr	r0, .L116	@ tmp887,
 1354              	@ main.c:620: 						BEP = 1;
 1355 0566 2849     		ldr	r1, .L116+40	@ tmp889,
 1356              	@ main.c:618: 						ROZ = 0;
 1357 0568 304E     		ldr	r6, .L116+76	@ tmp1075,
 1358              	@ main.c:622: 						stat = lad;
 1359 056a 1546     		mov	r5, r2	@ stat, tmp886
 1360              	@ main.c:618: 						ROZ = 0;
 1361 056c 3260     		str	r2, [r6]	@ tmp886, MEM[(volatile long unsigned int *)1109492144B]
 1362              	@ main.c:621: 						beep = 0; 
 1363 056e 0192     		str	r2, [sp, #4]	@ stat, %sfp
 1364              	@ main.c:619: 						LAD = 1;
 1365 0570 0360     		str	r3, [r0]	@ tmp888, MEM[(volatile long unsigned int *)1109492148B]
 1366              	@ main.c:620: 						BEP = 1;
 1367 0572 0B60     		str	r3, [r1]	@ tmp888, MEM[(volatile long unsigned int *)1109492152B]
 1368              	@ main.c:624: 					break;
ARM GAS  /tmp/ccrMssCc.s 			page 25


 1369 0574 09E6     		b	.L86	@
 1370              	.L58:
 1371              	@ main.c:491: 				if(vbus < 2600 && vbus > 2000 && stat==roz) { // koniec rozladowania
 1372 0576 40F25621 		movw	r1, #598	@ tmp736,
 1373 057a 8A42     		cmp	r2, r1	@ _495, tmp736
 1374 057c 02D8     		bhi	.L61	@,
 1375              	@ main.c:491: 				if(vbus < 2600 && vbus > 2000 && stat==roz) { // koniec rozladowania
 1376 057e 012D     		cmp	r5, #1	@ stat,
 1377 0580 00F0A581 		beq	.L62	@,
 1378              	.L61:
 1379              	@ main.c:498: 				if( abs(cur) < 50 && vbus < 4200 && stat == lad ){ // zanikanie ladowania
 1380 0584 03F13101 		add	r1, r3, #49	@ tmp737, cur.44_156,
 1381 0588 89B2     		uxth	r1, r1	@ tmp738, tmp737
 1382 058a 6229     		cmp	r1, #98	@ tmp738,
 1383 058c 06D8     		bhi	.L63	@,
 1384              	@ main.c:498: 				if( abs(cur) < 50 && vbus < 4200 && stat == lad ){ // zanikanie ladowania
 1385 058e 41F26701 		movw	r1, #4199	@ tmp739,
 1386 0592 8C45     		cmp	ip, r1	@ pretmp_550, tmp739
 1387 0594 02DC     		bgt	.L63	@,
 1388              	@ main.c:498: 				if( abs(cur) < 50 && vbus < 4200 && stat == lad ){ // zanikanie ladowania
 1389 0596 002D     		cmp	r5, #0	@ stat
 1390 0598 00F0A781 		beq	.L110	@
 1391              	.L63:
 1392              	@ main.c:506: 					if(vbus < 2800 && vbus > 2000 && stat==rok) { // koniec rozladowania konserwujac
 1393 059c 40F21E31 		movw	r1, #798	@ tmp754,
 1394 05a0 8A42     		cmp	r2, r1	@ _495, tmp754
 1395 05a2 40F24981 		bls	.L111	@,
 1396              	.L65:
 1397              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1398 05a6 D8F80020 		ldr	r2, [r8]	@ Cah, Cah
 1399 05aa 8242     		cmp	r2, r0	@ Cah, _601
 1400 05ac 04D8     		bhi	.L69	@,
 1401              	.L88:
 1402              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1403 05ae 41F26802 		movw	r2, #4200	@ tmp777,
 1404 05b2 9445     		cmp	ip, r2	@ pretmp_550, tmp777
 1405 05b4 7FF741AE 		ble	.L57	@,
 1406              	.L69:
 1407              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1408 05b8 042D     		cmp	r5, #4	@ stat,
 1409 05ba 7FF42EAE 		bne	.L68	@,
 1410              	.L70:
 1411              	@ main.c:515: 					LAD = 0;
 1412 05be 0023     		movs	r3, #0	@ tmp766,
 1413 05c0 0749     		ldr	r1, .L116	@ tmp765,
 1414              	@ main.c:529: 			if( (STCLK_MS*500   < (trg2 - SysTick->VAL))) {
 1415 05c2 1B4A     		ldr	r2, .L116+80	@ tmp772,
 1416              	@ main.c:515: 					LAD = 0;
 1417 05c4 0B60     		str	r3, [r1]	@ tmp766, MEM[(volatile long unsigned int *)1109492148B]
 1418              	@ main.c:516: 					ROZ = 0;
 1419 05c6 41F8043C 		str	r3, [r1, #-4]	@ tmp766, MEM[(volatile long unsigned int *)1109492144B]
 1420              	@ main.c:529: 			if( (STCLK_MS*500   < (trg2 - SysTick->VAL))) {
 1421 05ca 1A4B     		ldr	r3, .L116+84	@ tmp1045,
 1422 05cc 1B68     		ldr	r3, [r3]	@ trg2.59_547, trg2
 1423 05ce A168     		ldr	r1, [r4, #8]	@ _548, MEM[(struct SysTick_Type *)3758153744B].VAL
 1424 05d0 5B1A     		subs	r3, r3, r1	@ tmp771, trg2.59_547, _548
 1425 05d2 9342     		cmp	r3, r2	@ tmp771, tmp772
ARM GAS  /tmp/ccrMssCc.s 			page 26


 1426 05d4 00F22481 		bhi	.L66	@,
 1427              	@ main.c:517: 					beep= 1;
 1428 05d8 0123     		movs	r3, #1	@ beep,
 1429              	@ main.c:518: 					stat = czk;	
 1430 05da 0225     		movs	r5, #2	@ stat,
 1431              	@ main.c:517: 					beep= 1;
 1432 05dc 0193     		str	r3, [sp, #4]	@ beep, %sfp
 1433 05de 39E6     		b	.L67	@
 1434              	.L117:
 1435              		.align	2
 1436              	.L116:
 1437 05e0 B4812142 		.word	1109492148
 1438 05e4 2C000000 		.word	.LC26
 1439 05e8 30000000 		.word	.LC27
 1440 05ec 64000000 		.word	.LC28
 1441 05f0 A4000000 		.word	.LC29
 1442 05f4 00000000 		.word	.LANCHOR15
 1443 05f8 00000000 		.word	.LANCHOR16
 1444 05fc B4000000 		.word	.LC30
 1445 0600 CC000000 		.word	.LC31
 1446 0604 D8000000 		.word	.LC32
 1447 0608 B8812142 		.word	1109492152
 1448 060c E8000000 		.word	.LC33
 1449 0610 F8000000 		.word	.LC34
 1450 0614 00000000 		.word	.LANCHOR14
 1451 0618 0C010000 		.word	.LC35
 1452 061c 24010000 		.word	.LC36
 1453 0620 28010000 		.word	.LC37
 1454 0624 3C010000 		.word	.LC38
 1455 0628 CDCCCCCC 		.word	-858993459
 1456 062c B0812142 		.word	1109492144
 1457 0630 20AA4400 		.word	4500000
 1458 0634 00000000 		.word	trg2
 1459              	.L108:
 1460              	@ main.c:389: 				trg0  = SysTick->VAL;
 1461 0638 D4F808C0 		ldr	ip, [r4, #8]	@ _29, MEM[(struct SysTick_Type *)3758153744B].VAL
 1462 063c B74E     		ldr	r6, .L118	@ tmp982,
 1463              	@ main.c:392: 				i2c1_read(INA219_ADDR,1,i2reg,2);
 1464 063e 0223     		movs	r3, #2	@,
 1465 0640 03AA     		add	r2, sp, #12	@ tmp981,,
 1466 0642 0121     		movs	r1, #1	@,
 1467 0644 8020     		movs	r0, #128	@,
 1468              	@ main.c:389: 				trg0  = SysTick->VAL;
 1469 0646 C6F800C0 		str	ip, [r6]	@ _29, trg0
 1470              	@ main.c:392: 				i2c1_read(INA219_ADDR,1,i2reg,2);
 1471 064a FFF7FEFF 		bl	i2c1_read	@
 1472              	@ main.c:395: 				i2c1_read( INA219_ADDR,2,i2reg,2);
 1473 064e 0223     		movs	r3, #2	@,
 1474 0650 03AA     		add	r2, sp, #12	@ tmp983,,
 1475 0652 1946     		mov	r1, r3	@,
 1476 0654 8020     		movs	r0, #128	@,
 1477 0656 FFF7FEFF 		bl	i2c1_read	@
 1478              	@ main.c:399: 				i2c1_read( INA219_ADDR,4,i2reg,2);
 1479 065a 0223     		movs	r3, #2	@,
 1480              	@ main.c:396: 				vbus = ((i2reg[1] | (i2reg[0]<<8))>>3)*4 ; //512/128
 1481 065c BDF80CC0 		ldrh	ip, [sp, #12]	@, MEM[(u08[2] *)&i2reg]
 1482 0660 AF4E     		ldr	r6, .L118+4	@ tmp1111,
ARM GAS  /tmp/ccrMssCc.s 			page 27


 1483 0662 9CFA9CFC 		rev16	ip, ip	@ tmp472, MEM[(u08[2] *)&i2reg]
 1484 0666 CCF3CC0C 		ubfx	ip, ip, #3, #13	@ tmp475, tmp472,,
 1485 066a 0CFA03FC 		lsl	ip, ip, r3	@ tmp477, tmp475,
 1486              	@ main.c:399: 				i2c1_read( INA219_ADDR,4,i2reg,2);
 1487 066e 03AA     		add	r2, sp, #12	@ tmp984,,
 1488 0670 0421     		movs	r1, #4	@,
 1489 0672 8020     		movs	r0, #128	@,
 1490              	@ main.c:396: 				vbus = ((i2reg[1] | (i2reg[0]<<8))>>3)*4 ; //512/128
 1491 0674 A6F800C0 		strh	ip, [r6]	@ movhi	@ tmp477, vbus
 1492              	@ main.c:399: 				i2c1_read( INA219_ADDR,4,i2reg,2);
 1493 0678 FFF7FEFF 		bl	i2c1_read	@
 1494              	@ main.c:402: 				if( (cnt+1)%300==0 && stat == roz){  // pomiar rezystancji wewnetrznej
 1495 067c 4FF49670 		mov	r0, #300	@ tmp495,
 1496 0680 A84B     		ldr	r3, .L118+8	@ tmp1110,
 1497              	@ main.c:400: 				dcur = (i2reg[0]<<8) | i2reg[1] ;
 1498 0682 9DF80C10 		ldrb	r1, [sp, #12]	@ zero_extendqisi2	@ i2reg, i2reg
 1499              	@ main.c:402: 				if( (cnt+1)%300==0 && stat == roz){  // pomiar rezystancji wewnetrznej
 1500 0686 1B88     		ldrh	r3, [r3]	@ cnt, cnt
 1501 0688 5A1C     		adds	r2, r3, #1	@ tmp490, cnt,
 1502 068a A74B     		ldr	r3, .L118+12	@ tmp985,
 1503 068c A3FB0263 		umull	r6, r3, r3, r2	@ tmp961, tmp492, tmp985, tmp490
 1504 0690 5B09     		lsrs	r3, r3, #5	@ tmp491, tmp492,
 1505 0692 00FB1323 		mls	r3, r0, r3, r2	@ tmp496, tmp495, tmp491, tmp490
 1506              	@ main.c:400: 				dcur = (i2reg[0]<<8) | i2reg[1] ;
 1507 0696 9DF80D20 		ldrb	r2, [sp, #13]	@ zero_extendqisi2	@ i2reg, i2reg
 1508 069a 42EA0122 		orr	r2, r2, r1, lsl #8	@ tmp486, i2reg, i2reg,
 1509 069e A349     		ldr	r1, .L118+16	@ tmp986,
 1510 06a0 0A80     		strh	r2, [r1]	@ movhi	@ tmp486, dcur
 1511              	@ main.c:402: 				if( (cnt+1)%300==0 && stat == roz){  // pomiar rezystancji wewnetrznej
 1512 06a2 13B9     		cbnz	r3, .L52	@ tmp496,
 1513              	@ main.c:402: 				if( (cnt+1)%300==0 && stat == roz){  // pomiar rezystancji wewnetrznej
 1514 06a4 012D     		cmp	r5, #1	@ stat,
 1515 06a6 00F07B81 		beq	.L112	@,
 1516              	.L52:
 1517              	@ main.c:421: 				cur = dcur/10;
 1518 06aa A04F     		ldr	r7, .L118+16	@ tmp1005,
 1519              	@ main.c:419: 				i2c1_write(INA219_ADDR,(u08 *)i2cnf,3);		//star conversion
 1520 06ac 0322     		movs	r2, #3	@,
 1521 06ae 05A9     		add	r1, sp, #20	@ tmp1004,,
 1522 06b0 8020     		movs	r0, #128	@,
 1523 06b2 FFF7FEFF 		bl	i2c1_write	@
 1524              	@ main.c:421: 				cur = dcur/10;
 1525 06b6 B7F90030 		ldrsh	r3, [r7]	@ dcur, dcur
 1526 06ba 9D4A     		ldr	r2, .L118+20	@ tmp567,
 1527 06bc D817     		asrs	r0, r3, #31	@ tmp569, dcur,
 1528 06be 82FB0323 		smull	r2, r3, r2, r3	@ tmp962, tmp566, tmp567, dcur
 1529              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1530 06c2 974A     		ldr	r2, .L118+4	@ tmp1108,
 1531              	@ main.c:421: 				cur = dcur/10;
 1532 06c4 C0EBA303 		rsb	r3, r0, r3, asr #2	@ tmp564, tmp569, tmp566,
 1533              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1534 06c8 B2F90010 		ldrsh	r1, [r2]	@ vbus, vbus
 1535              	@ main.c:421: 				cur = dcur/10;
 1536 06cc 18B2     		sxth	r0, r3	@ _86, tmp564
 1537              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1538 06ce 00FB01F1 		mul	r1, r0, r1	@ tmp574, _86, vbus
 1539 06d2 984B     		ldr	r3, .L118+24	@ tmp1006,
ARM GAS  /tmp/ccrMssCc.s 			page 28


 1540 06d4 0029     		cmp	r1, #0	@ tmp575,
 1541 06d6 B8BF     		it	lt
 1542 06d8 4942     		rsblt	r1, r1, #0	@ tmp575, tmp574,
 1543 06da A3FB0131 		umull	r3, r1, r3, r1	@ tmp963, tmp577, tmp1006, tmp575
 1544              	@ main.c:424: 				cah += abs(cur);
 1545 06de 80EAE07C 		eor	ip, r0, r0, asr #31	@ tmp586, _86, _86,
 1546 06e2 D9F80030 		ldr	r3, [r9]	@ cah, cah
 1547              	@ main.c:421: 				cur = dcur/10;
 1548 06e6 944E     		ldr	r6, .L118+28	@ tmp1007,
 1549              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1550 06e8 41F38F11 		sbfx	r1, r1, #6, #16	@ _93, tmp577,,
 1551              	@ main.c:424: 				cah += abs(cur);
 1552 06ec ACEBE07C 		sub	ip, ip, r0, asr #31	@ tmp586, tmp586, _86,
 1553              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1554 06f0 924F     		ldr	r7, .L118+32	@ tmp1008,
 1555              	@ main.c:421: 				cur = dcur/10;
 1556 06f2 3080     		strh	r0, [r6]	@ movhi	@ _86, cur
 1557              	@ main.c:424: 				cah += abs(cur);
 1558 06f4 6344     		add	r3, r3, ip	@ _97, tmp586
 1559              	@ main.c:425: 				BKP->DR1 = cah & 0x00ff;	BKP->DR2 = cah>>16;
 1560 06f6 9248     		ldr	r0, .L118+36	@ tmp593,
 1561              	@ main.c:426: 				cwh += abs(pow);
 1562 06f8 81EAE172 		eor	r2, r1, r1, asr #31	@ tmp598, _93, _93,
 1563              	@ main.c:423: 				pow = abs(vbus*cur)/1000;
 1564 06fc 3980     		strh	r1, [r7]	@ movhi	@ _93, pow
 1565              	@ main.c:425: 				BKP->DR1 = cah & 0x00ff;	BKP->DR2 = cah>>16;
 1566 06fe 5FFA83FC 		uxtb	ip, r3	@ _99, _97
 1567              	@ main.c:426: 				cwh += abs(pow);
 1568 0702 A2EBE172 		sub	r2, r2, r1, asr #31	@ tmp598, tmp598, _93,
 1569              	@ main.c:425: 				BKP->DR1 = cah & 0x00ff;	BKP->DR2 = cah>>16;
 1570 0706 190C     		lsrs	r1, r3, #16	@ _101, _97,
 1571              	@ main.c:424: 				cah += abs(cur);
 1572 0708 C9F80030 		str	r3, [r9]	@ _97, cah
 1573              	@ main.c:425: 				BKP->DR1 = cah & 0x00ff;	BKP->DR2 = cah>>16;
 1574 070c A0F804C0 		strh	ip, [r0, #4]	@ movhi	@ _99, MEM[(struct BKP_TypeDef *)1073769472B].DR1
 1575 0710 0181     		strh	r1, [r0, #8]	@ movhi	@ _101, MEM[(struct BKP_TypeDef *)1073769472B].DR2
 1576              	@ main.c:426: 				cwh += abs(pow);
 1577 0712 8C49     		ldr	r1, .L118+40	@ tmp1009,
 1578              	@ main.c:428: 				Cah = cah/36;
 1579 0714 8C4E     		ldr	r6, .L118+44	@ tmp1010,
 1580              	@ main.c:426: 				cwh += abs(pow);
 1581 0716 0F46     		mov	r7, r1	@ tmp1009, tmp1009
 1582 0718 0968     		ldr	r1, [r1]	@ cwh, cwh
 1583              	@ main.c:428: 				Cah = cah/36;
 1584 071a A6FB03C3 		umull	ip, r3, r6, r3	@ tmp964, tmp611, tmp1010, _97
 1585              	@ main.c:426: 				cwh += abs(pow);
 1586 071e 0A44     		add	r2, r2, r1	@ _106, cwh
 1587              	@ main.c:427: 				BKP->DR3 = cwh & 0x00ff;	BKP->DR4 = cwh>>16;
 1588 0720 5FFA82FC 		uxtb	ip, r2	@ _108, _106
 1589              	@ main.c:426: 				cwh += abs(pow);
 1590 0724 3A60     		str	r2, [r7]	@ _106, cwh
 1591              	@ main.c:427: 				BKP->DR3 = cwh & 0x00ff;	BKP->DR4 = cwh>>16;
 1592 0726 110C     		lsrs	r1, r2, #16	@ _110, _106,
 1593              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1594 0728 7E4F     		ldr	r7, .L118+8	@ tmp1107,
 1595              	@ main.c:427: 				BKP->DR3 = cwh & 0x00ff;	BKP->DR4 = cwh>>16;
 1596 072a A0F80CC0 		strh	ip, [r0, #12]	@ movhi	@ _108, MEM[(struct BKP_TypeDef *)1073769472B].DR3
ARM GAS  /tmp/ccrMssCc.s 			page 29


 1597 072e 0182     		strh	r1, [r0, #16]	@ movhi	@ _110, MEM[(struct BKP_TypeDef *)1073769472B].DR4
 1598              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1599 0730 3888     		ldrh	r0, [r7]	@ cnt, cnt
 1600 0732 DFF864B2 		ldr	fp, .L118+124	@ tmp624,
 1601              	@ main.c:429: 				Cwh = cwh/36;
 1602 0736 A6FB0212 		umull	r1, r2, r6, r2	@ tmp965, tmp615, tmp1012, _106
 1603              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1604 073a ABFB0010 		umull	r1, r0, fp, r0	@ tmp966, tmp623, tmp624, cnt
 1605 073e 4009     		lsrs	r0, r0, #5	@ tmp626, tmp623,
 1606 0740 ABFB0061 		umull	r6, r1, fp, r0	@ tmp967, tmp627, tmp624, tmp626
 1607              	@ main.c:429: 				Cwh = cwh/36;
 1608 0744 814E     		ldr	r6, .L118+48	@ tmp1013,
 1609              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1610 0746 4909     		lsrs	r1, r1, #5	@ tmp625, tmp627,
 1611 0748 C1EB0111 		rsb	r1, r1, r1, lsl #4	@ tmp631, tmp625, tmp625,
 1612              	@ main.c:428: 				Cah = cah/36;
 1613 074c DB08     		lsrs	r3, r3, #3	@ tmp613, tmp611,
 1614              	@ main.c:429: 				Cwh = cwh/36;
 1615 074e D208     		lsrs	r2, r2, #3	@ tmp617, tmp615,
 1616              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1617 0750 A0EB8100 		sub	r0, r0, r1, lsl #2	@ tmp633, tmp626, tmp631,
 1618              	@ main.c:429: 				Cwh = cwh/36;
 1619 0754 3260     		str	r2, [r6]	@ tmp617, Cwh
 1620              	@ main.c:428: 				Cah = cah/36;
 1621 0756 C8F80030 		str	r3, [r8]	@ tmp613, Cah
 1622              	@ main.c:433: 					PutChar = UART2_putc;
 1623 075a 7D4A     		ldr	r2, .L118+52	@ tmp1015,
 1624 075c 7D4B     		ldr	r3, .L118+56	@ tmp1014,
 1625              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1626 075e 0221     		movs	r1, #2	@,
 1627 0760 80B2     		uxth	r0, r0	@, tmp633
 1628              	@ main.c:433: 					PutChar = UART2_putc;
 1629 0762 1A60     		str	r2, [r3]	@ tmp1015, PutChar
 1630              	@ main.c:434: 					unt2uart ((cnt/60)%60,2);UaPutS(".");unt2uart (cnt%60,2);
 1631 0764 FFF7FEFF 		bl	unt2uart	@
 1632 0768 7B48     		ldr	r0, .L118+60	@,
 1633 076a FFF7FEFF 		bl	UaPutS	@
 1634 076e 3888     		ldrh	r0, [r7]	@ cnt, cnt
 1635 0770 0221     		movs	r1, #2	@,
 1636 0772 ABFB003B 		umull	r3, fp, fp, r0	@ tmp968, tmp651, tmp624, cnt
 1637 0776 4FEA5B1B 		lsr	fp, fp, #5	@ tmp649, tmp651,
 1638 077a CBEB0B1B 		rsb	fp, fp, fp, lsl #4	@ tmp655, tmp649, tmp649,
 1639 077e A0EB8B00 		sub	r0, r0, fp, lsl #2	@ tmp657, cnt, tmp655,
 1640 0782 80B2     		uxth	r0, r0	@, tmp657
 1641 0784 FFF7FEFF 		bl	unt2uart	@
 1642              	@ main.c:435: 					UaPutS((char*)tstat[stat]);
 1643 0788 0EAB     		add	r3, sp, #56	@ tmp1016,,
 1644 078a 03EBC500 		add	r0, r3, r5, lsl #3	@, tmp1016, stat,
 1645 078e FFF7FEFF 		bl	UaPutS	@
 1646              	@ main.c:437: 					int2uart (vbus  ,4,3);	UaPutS("V");
 1647 0792 634B     		ldr	r3, .L118+4	@ tmp1105,
 1648 0794 0322     		movs	r2, #3	@,
 1649 0796 B3F90000 		ldrsh	r0, [r3]	@, vbus
 1650 079a 0421     		movs	r1, #4	@,
 1651              	@ main.c:438: 					int2uart (dcur  ,5,1);	UaPutS("mA");
 1652 079c 634F     		ldr	r7, .L118+16	@ tmp1017,
 1653              	@ main.c:437: 					int2uart (vbus  ,4,3);	UaPutS("V");
ARM GAS  /tmp/ccrMssCc.s 			page 30


 1654 079e FFF7FEFF 		bl	int2uart	@
 1655 07a2 6E48     		ldr	r0, .L118+64	@,
 1656 07a4 FFF7FEFF 		bl	UaPutS	@
 1657              	@ main.c:438: 					int2uart (dcur  ,5,1);	UaPutS("mA");
 1658 07a8 0122     		movs	r2, #1	@,
 1659 07aa 0521     		movs	r1, #5	@,
 1660 07ac B7F90000 		ldrsh	r0, [r7]	@, dcur
 1661 07b0 FFF7FEFF 		bl	int2uart	@
 1662 07b4 6A48     		ldr	r0, .L118+68	@,
 1663 07b6 FFF7FEFF 		bl	UaPutS	@
 1664              	@ main.c:440: 					int2uart (pow   ,4,3);	UaPutS("W"); // (pow  ,4,3);
 1665 07ba 604F     		ldr	r7, .L118+32	@ tmp1018,
 1666              	@ main.c:439: 					int2uart (Cah   ,6,2);	UaPutS("mAh");
 1667 07bc 0222     		movs	r2, #2	@,
 1668 07be 0621     		movs	r1, #6	@,
 1669 07c0 D8F80000 		ldr	r0, [r8]	@, Cah
 1670 07c4 FFF7FEFF 		bl	int2uart	@
 1671 07c8 6648     		ldr	r0, .L118+72	@,
 1672 07ca FFF7FEFF 		bl	UaPutS	@
 1673              	@ main.c:440: 					int2uart (pow   ,4,3);	UaPutS("W"); // (pow  ,4,3);
 1674 07ce 0322     		movs	r2, #3	@,
 1675 07d0 0421     		movs	r1, #4	@,
 1676 07d2 B7F90000 		ldrsh	r0, [r7]	@, pow
 1677 07d6 FFF7FEFF 		bl	int2uart	@
 1678 07da 6348     		ldr	r0, .L118+76	@,
 1679 07dc FFF7FEFF 		bl	UaPutS	@
 1680              	@ main.c:441: 					int2uart (Cwh   ,7,2);	UaPutS("mWh");
 1681 07e0 0222     		movs	r2, #2	@,
 1682 07e2 0721     		movs	r1, #7	@,
 1683 07e4 3068     		ldr	r0, [r6]	@, Cwh
 1684 07e6 FFF7FEFF 		bl	int2uart	@
 1685 07ea 6048     		ldr	r0, .L118+80	@,
 1686 07ec FFF7FEFF 		bl	UaPutS	@
 1687              	@ main.c:442: 					int2uart (Rwa[1],4,3);	UaPutS("ohm");
 1688 07f0 5F4B     		ldr	r3, .L118+84	@ tmp1020,
 1689 07f2 0322     		movs	r2, #3	@,
 1690 07f4 5868     		ldr	r0, [r3, #4]	@, Rwa
 1691 07f6 0421     		movs	r1, #4	@,
 1692 07f8 FFF7FEFF 		bl	int2uart	@
 1693 07fc 5D48     		ldr	r0, .L118+88	@,
 1694 07fe FFF7FEFF 		bl	UaPutS	@
 1695              	@ main.c:444: 					UaPutS("\r ");
 1696 0802 5D48     		ldr	r0, .L118+92	@,
 1697 0804 FFF7FEFF 		bl	UaPutS	@
 1698              	@ main.c:461: 					else coile = 2;
 1699 0808 0222     		movs	r2, #2	@ tmp682,
 1700              	@ main.c:462: 					if( (cnt)%coile==0 ){  // pomiar rezystancji wewnetrznej
 1701 080a 464F     		ldr	r7, .L118+8	@ tmp1104,
 1702              	@ main.c:461: 					else coile = 2;
 1703 080c 5B49     		ldr	r1, .L118+96	@ tmp1021,
 1704              	@ main.c:462: 					if( (cnt)%coile==0 ){  // pomiar rezystancji wewnetrznej
 1705 080e 3B88     		ldrh	r3, [r7]	@ cnt.31_134, cnt
 1706              	@ main.c:461: 					else coile = 2;
 1707 0810 0A70     		strb	r2, [r1]	@ tmp682, coile
 1708              	@ main.c:462: 					if( (cnt)%coile==0 ){  // pomiar rezystancji wewnetrznej
 1709 0812 13F0010B 		ands	fp, r3, #1	@ tmp687, cnt.31_134,
 1710 0816 23D0     		beq	.L113	@,
ARM GAS  /tmp/ccrMssCc.s 			page 31


 1711              	.L56:
 1712              	@ main.c:475: 					cnt++;
 1713 0818 424A     		ldr	r2, .L118+8	@ tmp1101,
 1714 081a 0133     		adds	r3, r3, #1	@ tmp704, cnt.31_134,
 1715 081c 1380     		strh	r3, [r2]	@ movhi	@ tmp704, cnt
 1716 081e BCE4     		b	.L51	@
 1717              	.L66:
 1718              	@ main.c:518: 					stat = czk;	
 1719 0820 0225     		movs	r5, #2	@ stat,
 1720              	@ main.c:530: 				trg2  = SysTick->VAL;	
 1721 0822 A368     		ldr	r3, [r4, #8]	@ _542, MEM[(struct SysTick_Type *)3758153744B].VAL
 1722 0824 564A     		ldr	r2, .L118+100	@ tmp1082,
 1723 0826 1360     		str	r3, [r2]	@ _542, trg2
 1724              	.L87:
 1725              	@ main.c:531: 				if(beep){	BEP ^= 1; }
 1726 0828 0123     		movs	r3, #1	@ beep,
 1727 082a 564A     		ldr	r2, .L118+104	@ tmp791,
 1728 082c 0193     		str	r3, [sp, #4]	@ beep, %sfp
 1729 082e 1368     		ldr	r3, [r2]	@ _173, MEM[(volatile long unsigned int *)1109492152B]
 1730 0830 83F00103 		eor	r3, r3, #1	@ _174, _173,
 1731 0834 1360     		str	r3, [r2]	@ _174, MEM[(volatile long unsigned int *)1109492152B]
 1732 0836 0DE5     		b	.L67	@
 1733              	.L111:
 1734              	@ main.c:506: 					if(vbus < 2800 && vbus > 2000 && stat==rok) { // koniec rozladowania konserwujac
 1735 0838 052D     		cmp	r5, #5	@ stat,
 1736 083a 7FF4B4AE 		bne	.L65	@,
 1737              	@ main.c:507:           ROZ = 0;
 1738 083e 0023     		movs	r3, #0	@ tmp756,
 1739              	@ main.c:508: 					LAD = 1;
 1740 0840 0121     		movs	r1, #1	@ tmp758,
 1741 0842 514A     		ldr	r2, .L118+108	@ tmp757,
 1742              	@ main.c:507:           ROZ = 0;
 1743 0844 514D     		ldr	r5, .L118+112	@ tmp1042,
 1744 0846 2B60     		str	r3, [r5]	@ tmp756, MEM[(volatile long unsigned int *)1109492144B]
 1745              	@ main.c:508: 					LAD = 1;
 1746 0848 1160     		str	r1, [r2]	@ tmp758, MEM[(volatile long unsigned int *)1109492148B]
 1747              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1748 084a D8F80020 		ldr	r2, [r8]	@ Cah, Cah
 1749              	@ main.c:511: 					cwh = 0;
 1750 084e 3D49     		ldr	r1, .L118+40	@ tmp1043,
 1751              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1752 0850 8242     		cmp	r2, r0	@ Cah, _601
 1753              	@ main.c:510: 					cah = 0;
 1754 0852 C9F80030 		str	r3, [r9]	@ tmp756, cah
 1755              	@ main.c:511: 					cwh = 0;
 1756 0856 0B60     		str	r3, [r1]	@ tmp756, cwh
 1757              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1758 0858 3FF6B1AE 		bhi	.L70	@,
 1759              	@ main.c:509: 					stat = kon;
 1760 085c 0425     		movs	r5, #4	@ stat,
 1761 085e ECE4     		b	.L57	@
 1762              	.L113:
 1763              	@ main.c:464: 						int2uarz (vbus  ,4,0); UaPutC(',');
 1764 0860 2F4B     		ldr	r3, .L118+4	@ tmp1103,
 1765              	@ main.c:463: 						PutChar = UART1_putc; //przypisanie callback 
 1766 0862 3C4E     		ldr	r6, .L118+56	@ tmp1022,
 1767              	@ main.c:464: 						int2uarz (vbus  ,4,0); UaPutC(',');
ARM GAS  /tmp/ccrMssCc.s 			page 32


 1768 0864 B3F90000 		ldrsh	r0, [r3]	@, vbus
 1769              	@ main.c:463: 						PutChar = UART1_putc; //przypisanie callback 
 1770 0868 494B     		ldr	r3, .L118+116	@ tmp1023,
 1771              	@ main.c:464: 						int2uarz (vbus  ,4,0); UaPutC(',');
 1772 086a 5A46     		mov	r2, fp	@, tmp687
 1773 086c 0421     		movs	r1, #4	@,
 1774              	@ main.c:463: 						PutChar = UART1_putc; //przypisanie callback 
 1775 086e 3360     		str	r3, [r6]	@ tmp1023, PutChar
 1776              	@ main.c:464: 						int2uarz (vbus  ,4,0); UaPutC(',');
 1777 0870 FFF7FEFF 		bl	int2uarz	@
 1778 0874 2C20     		movs	r0, #44	@,
 1779 0876 FFF7FEFF 		bl	UaPutC	@
 1780              	@ main.c:465: 						int2uarz (cur   ,4,0); UaPutC(',');
 1781 087a 2F4B     		ldr	r3, .L118+28	@ tmp1024,
 1782 087c 5A46     		mov	r2, fp	@, tmp687
 1783 087e B3F90000 		ldrsh	r0, [r3]	@, cur
 1784 0882 0421     		movs	r1, #4	@,
 1785 0884 FFF7FEFF 		bl	int2uarz	@
 1786 0888 2C20     		movs	r0, #44	@,
 1787 088a FFF7FEFF 		bl	UaPutC	@
 1788              	@ main.c:466: 						int2uarz (Cah   ,6,0); UaPutC(',');
 1789 088e 5A46     		mov	r2, fp	@, tmp687
 1790 0890 0621     		movs	r1, #6	@,
 1791 0892 D8F80000 		ldr	r0, [r8]	@, Cah
 1792 0896 FFF7FEFF 		bl	int2uarz	@
 1793 089a 2C20     		movs	r0, #44	@,
 1794 089c FFF7FEFF 		bl	UaPutC	@
 1795              	@ main.c:467: 						int2uarz (pow   ,4,0); UaPutC(',');
 1796 08a0 264B     		ldr	r3, .L118+32	@ tmp1025,
 1797 08a2 5A46     		mov	r2, fp	@, tmp687
 1798 08a4 B3F90000 		ldrsh	r0, [r3]	@, pow
 1799 08a8 0421     		movs	r1, #4	@,
 1800 08aa FFF7FEFF 		bl	int2uarz	@
 1801 08ae 2C20     		movs	r0, #44	@,
 1802 08b0 FFF7FEFF 		bl	UaPutC	@
 1803              	@ main.c:468: 						int2uarz (Cwh   ,7,0); UaPutC(',');
 1804 08b4 254B     		ldr	r3, .L118+48	@ tmp1026,
 1805 08b6 5A46     		mov	r2, fp	@, tmp687
 1806 08b8 1868     		ldr	r0, [r3]	@, Cwh
 1807 08ba 0721     		movs	r1, #7	@,
 1808 08bc FFF7FEFF 		bl	int2uarz	@
 1809 08c0 2C20     		movs	r0, #44	@,
 1810 08c2 FFF7FEFF 		bl	UaPutC	@
 1811              	@ main.c:471: 						PutChar = UART2_putc;
 1812 08c6 224A     		ldr	r2, .L118+52	@ tmp1028,
 1813 08c8 3B88     		ldrh	r3, [r7]	@ cnt.31_134, cnt
 1814 08ca 3260     		str	r2, [r6]	@ tmp1028, PutChar
 1815 08cc A4E7     		b	.L56	@
 1816              	.L62:
 1817              	@ main.c:494: 					beep= 1;
 1818 08ce 0125     		movs	r5, #1	@ beep,
 1819              	@ main.c:492: 					LAD = 0;
 1820 08d0 0022     		movs	r2, #0	@ tmp733,
 1821              	@ main.c:494: 					beep= 1;
 1822 08d2 0195     		str	r5, [sp, #4]	@ beep, %sfp
 1823              	@ main.c:495: 					stat = czk;
 1824 08d4 0225     		movs	r5, #2	@ stat,
ARM GAS  /tmp/ccrMssCc.s 			page 33


 1825              	@ main.c:492: 					LAD = 0;
 1826 08d6 2C49     		ldr	r1, .L118+108	@ tmp732,
 1827 08d8 0A60     		str	r2, [r1]	@ tmp733, MEM[(volatile long unsigned int *)1109492148B]
 1828              	@ main.c:493: 					ROZ = 0;
 1829 08da 41F8042C 		str	r2, [r1, #-4]	@ tmp733, MEM[(volatile long unsigned int *)1109492144B]
 1830              	.L60:
 1831              	@ main.c:514: 					if( (Cah > vr1*70 || vbus > 4200) && stat == kon ){ // koniec ladowania konserwu
 1832 08de D8F80020 		ldr	r2, [r8]	@ Cah, Cah
 1833 08e2 8242     		cmp	r2, r0	@ Cah, _601
 1834 08e4 3FF699AC 		bhi	.L68	@,
 1835 08e8 61E6     		b	.L88	@
 1836              	.L110:
 1837              	@ main.c:500: 					ROZ = 1;
 1838 08ea 0122     		movs	r2, #1	@ tmp743,
 1839              	@ main.c:499: 					LAD = 0;
 1840 08ec 2649     		ldr	r1, .L118+108	@ tmp740,
 1841              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1842 08ee DFF8ACE0 		ldr	lr, .L118+128	@ tmp749,
 1843              	@ main.c:499: 					LAD = 0;
 1844 08f2 0D60     		str	r5, [r1]	@ stat, MEM[(volatile long unsigned int *)1109492148B]
 1845              	@ main.c:500: 					ROZ = 1;
 1846 08f4 41F8042C 		str	r2, [r1, #-4]	@ tmp743, MEM[(volatile long unsigned int *)1109492144B]
 1847              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1848 08f8 A268     		ldr	r2, [r4, #8]	@ _430, MEM[(struct SysTick_Type *)3758153744B].VAL
 1849 08fa 2649     		ldr	r1, .L118+120	@ tmp1039,
 1850 08fc 0A60     		str	r2, [r1]	@ _430, delay_us
 1851              	.L64:
 1852              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1853 08fe 254A     		ldr	r2, .L118+120	@ tmp1040,
 1854 0900 1268     		ldr	r2, [r2]	@ delay_us.72_431, delay_us
 1855 0902 A168     		ldr	r1, [r4, #8]	@ _432, MEM[(struct SysTick_Type *)3758153744B].VAL
 1856 0904 521A     		subs	r2, r2, r1	@ tmp748, delay_us.72_431, _432
 1857 0906 7245     		cmp	r2, lr	@ tmp748, tmp749
 1858 0908 F9D9     		bls	.L64	@,
 1859              	@ main.c:502: 					ROZ = 0;
 1860 090a 4FF0000E 		mov	lr, #0	@ tmp751,
 1861              	@ main.c:503: 					LAD = 1;
 1862 090e 0121     		movs	r1, #1	@ tmp753,
 1863 0910 1D4A     		ldr	r2, .L118+108	@ tmp752,
 1864              	@ main.c:502: 					ROZ = 0;
 1865 0912 1E4E     		ldr	r6, .L118+112	@ tmp1041,
 1866 0914 C6F800E0 		str	lr, [r6]	@ tmp751, MEM[(volatile long unsigned int *)1109492144B]
 1867              	@ main.c:503: 					LAD = 1;
 1868 0918 1160     		str	r1, [r2]	@ tmp753, MEM[(volatile long unsigned int *)1109492148B]
 1869 091a E0E7     		b	.L60	@
 1870              	.L119:
 1871              		.align	2
 1872              	.L118:
 1873 091c 00000000 		.word	trg0
 1874 0920 00000000 		.word	.LANCHOR4
 1875 0924 00000000 		.word	.LANCHOR6
 1876 0928 B5814E1B 		.word	458129845
 1877 092c 00000000 		.word	.LANCHOR5
 1878 0930 67666666 		.word	1717986919
 1879 0934 D34D6210 		.word	274877907
 1880 0938 00000000 		.word	.LANCHOR8
 1881 093c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccrMssCc.s 			page 34


 1882 0940 006C0040 		.word	1073769472
 1883 0944 00000000 		.word	.LANCHOR3
 1884 0948 398EE338 		.word	954437177
 1885 094c 00000000 		.word	.LANCHOR12
 1886 0950 00000000 		.word	UART2_putc
 1887 0954 00000000 		.word	PutChar
 1888 0958 0C000000 		.word	.LC18
 1889 095c 10000000 		.word	.LC19
 1890 0960 14000000 		.word	.LC20
 1891 0964 18000000 		.word	.LC21
 1892 0968 1C000000 		.word	.LC22
 1893 096c 20000000 		.word	.LC23
 1894 0970 00000000 		.word	.LANCHOR9
 1895 0974 24000000 		.word	.LC24
 1896 0978 28000000 		.word	.LC25
 1897 097c 00000000 		.word	.LANCHOR13
 1898 0980 00000000 		.word	trg2
 1899 0984 B8812142 		.word	1109492152
 1900 0988 B4812142 		.word	1109492148
 1901 098c B0812142 		.word	1109492144
 1902 0990 00000000 		.word	UART1_putc
 1903 0994 00000000 		.word	delay_us
 1904 0998 89888888 		.word	-2004318071
 1905 099c CFDD0600 		.word	449999
 1906              	.L112:
 1907              	@ main.c:403: 					cnt2++;
 1908 09a0 3048     		ldr	r0, .L120	@ tmp987,
 1909              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1910 09a2 3149     		ldr	r1, .L120+4	@ tmp516,
 1911              	@ main.c:403: 					cnt2++;
 1912 09a4 0268     		ldr	r2, [r0]	@ cnt2, cnt2
 1913 09a6 0132     		adds	r2, r2, #1	@ tmp507, cnt2,
 1914 09a8 0260     		str	r2, [r0]	@ tmp507, cnt2
 1915              	@ main.c:404: 					ROZ = 0;
 1916 09aa 304A     		ldr	r2, .L120+8	@ tmp989,
 1917 09ac 1360     		str	r3, [r2]	@ tmp496, MEM[(volatile long unsigned int *)1109492144B]
 1918              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1919 09ae A368     		ldr	r3, [r4, #8]	@ _426, MEM[(struct SysTick_Type *)3758153744B].VAL
 1920 09b0 2F4A     		ldr	r2, .L120+12	@ tmp990,
 1921 09b2 1360     		str	r3, [r2]	@ _426, delay_us
 1922              	.L53:
 1923              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1924 09b4 2E4B     		ldr	r3, .L120+12	@ tmp991,
 1925 09b6 1B68     		ldr	r3, [r3]	@ delay_us.72_427, delay_us
 1926 09b8 A268     		ldr	r2, [r4, #8]	@ _428, MEM[(struct SysTick_Type *)3758153744B].VAL
 1927 09ba 9B1A     		subs	r3, r3, r2	@ tmp515, delay_us.72_427, _428
 1928 09bc 8B42     		cmp	r3, r1	@ tmp515, tmp516
 1929 09be F9D9     		bls	.L53	@,
 1930              	@ main.c:406: 					i2c1_write(INA219_ADDR,(u08 *)i2trig_bus,3);		//star conversion
 1931 09c0 0322     		movs	r2, #3	@,
 1932 09c2 06A9     		add	r1, sp, #24	@ tmp992,,
 1933 09c4 8020     		movs	r0, #128	@,
 1934 09c6 FFF7FEFF 		bl	i2c1_write	@
 1935              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1936 09ca A368     		ldr	r3, [r4, #8]	@ _422, MEM[(struct SysTick_Type *)3758153744B].VAL
 1937 09cc 284A     		ldr	r2, .L120+12	@ tmp993,
 1938              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
ARM GAS  /tmp/ccrMssCc.s 			page 35


 1939 09ce 2949     		ldr	r1, .L120+16	@ tmp523,
 1940              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1941 09d0 1360     		str	r3, [r2]	@ _422, delay_us
 1942              	.L54:
 1943              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1944 09d2 274B     		ldr	r3, .L120+12	@ tmp994,
 1945 09d4 1B68     		ldr	r3, [r3]	@ delay_us.72_423, delay_us
 1946 09d6 A268     		ldr	r2, [r4, #8]	@ _424, MEM[(struct SysTick_Type *)3758153744B].VAL
 1947 09d8 9B1A     		subs	r3, r3, r2	@ tmp522, delay_us.72_423, _424
 1948 09da 8B42     		cmp	r3, r1	@ tmp522, tmp523
 1949 09dc F9D9     		bls	.L54	@,
 1950              	@ main.c:408: 					i2c1_read( INA219_ADDR,2,i2reg,2);
 1951 09de 0223     		movs	r3, #2	@,
 1952 09e0 03AA     		add	r2, sp, #12	@ tmp995,,
 1953 09e2 1946     		mov	r1, r3	@,
 1954 09e4 8020     		movs	r0, #128	@,
 1955 09e6 FFF7FEFF 		bl	i2c1_read	@
 1956              	@ main.c:411: 					ROZ = 1;
 1957 09ea 0122     		movs	r2, #1	@ tmp536,
 1958              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1959 09ec 42F22731 		movw	r1, #8999	@ tmp542,
 1960              	@ main.c:409: 					ve = (((i2reg[0]<<8) | i2reg[1])>>3)*515/128 ;
 1961 09f0 BDF80C30 		ldrh	r3, [sp, #12]	@, MEM[(u08[2] *)&i2reg]
 1962              	@ main.c:411: 					ROZ = 1;
 1963 09f4 1D48     		ldr	r0, .L120+8	@ tmp996,
 1964              	@ main.c:409: 					ve = (((i2reg[0]<<8) | i2reg[1])>>3)*515/128 ;
 1965 09f6 5BBA     		rev16	r3, r3	@ tmp525, MEM[(u08[2] *)&i2reg]
 1966 09f8 C3F3CC03 		ubfx	r3, r3, #3, #13	@ tmp528, tmp525,,
 1967              	@ main.c:411: 					ROZ = 1;
 1968 09fc 0260     		str	r2, [r0]	@ tmp536, MEM[(volatile long unsigned int *)1109492144B]
 1969              	@ main.c:409: 					ve = (((i2reg[0]<<8) | i2reg[1])>>3)*515/128 ;
 1970 09fe 03EB0320 		add	r0, r3, r3, lsl #8	@ tmp531, tmp528, tmp528,
 1971 0a02 03EB4003 		add	r3, r3, r0, lsl #1	@ tmp533, tmp528, tmp531,
 1972              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1973 0a06 A268     		ldr	r2, [r4, #8]	@ _418, MEM[(struct SysTick_Type *)3758153744B].VAL
 1974              	@ main.c:409: 					ve = (((i2reg[0]<<8) | i2reg[1])>>3)*515/128 ;
 1975 0a08 43F3CF10 		sbfx	r0, r3, #7, #16	@ _69, tmp533,,
 1976              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 1977 0a0c 184B     		ldr	r3, .L120+12	@ tmp997,
 1978 0a0e 1A60     		str	r2, [r3]	@ _418, delay_us
 1979              	.L55:
 1980              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 1981 0a10 174B     		ldr	r3, .L120+12	@ tmp998,
 1982 0a12 1B68     		ldr	r3, [r3]	@ delay_us.72_419, delay_us
 1983 0a14 A268     		ldr	r2, [r4, #8]	@ _420, MEM[(struct SysTick_Type *)3758153744B].VAL
 1984 0a16 9B1A     		subs	r3, r3, r2	@ tmp541, delay_us.72_419, _420
 1985 0a18 8B42     		cmp	r3, r1	@ tmp541, tmp542
 1986 0a1a F9D9     		bls	.L55	@,
 1987              	@ main.c:413: 					rw = abs(1000*(ve-vbus)/cur);
 1988 0a1c 4FF47A73 		mov	r3, #1000	@ tmp547,
 1989 0a20 154A     		ldr	r2, .L120+20	@ tmp1109,
 1990 0a22 B2F90020 		ldrsh	r2, [r2]	@ vbus, vbus
 1991 0a26 821A     		subs	r2, r0, r2	@ tmp545, _69, vbus
 1992 0a28 03FB02F3 		mul	r3, r3, r2	@ tmp546, tmp547, tmp545
 1993 0a2c 134A     		ldr	r2, .L120+24	@ tmp999,
 1994              	@ main.c:414: 					Rwa[0] += rw;
 1995 0a2e 1448     		ldr	r0, .L120+28	@ tmp1000,
ARM GAS  /tmp/ccrMssCc.s 			page 36


 1996              	@ main.c:413: 					rw = abs(1000*(ve-vbus)/cur);
 1997 0a30 B2F90010 		ldrsh	r1, [r2]	@ cur, cur
 1998              	@ main.c:414: 					Rwa[0] += rw;
 1999 0a34 0268     		ldr	r2, [r0]	@ Rwa, Rwa
 2000              	@ main.c:413: 					rw = abs(1000*(ve-vbus)/cur);
 2001 0a36 93FBF1F3 		sdiv	r3, r3, r1	@ tmp551, tmp546, cur
 2002              	@ main.c:415: 					Rwa[1] = Rwa[0]/cnt2;
 2003 0a3a 0A49     		ldr	r1, .L120	@ tmp1001,
 2004              	@ main.c:413: 					rw = abs(1000*(ve-vbus)/cur);
 2005 0a3c 002B     		cmp	r3, #0	@ tmp552,
 2006 0a3e B8BF     		it	lt
 2007 0a40 5B42     		rsblt	r3, r3, #0	@ tmp552, tmp551,
 2008              	@ main.c:414: 					Rwa[0] += rw;
 2009 0a42 1BB2     		sxth	r3, r3	@ tmp553, tmp552
 2010              	@ main.c:415: 					Rwa[1] = Rwa[0]/cnt2;
 2011 0a44 0968     		ldr	r1, [r1]	@ cnt2, cnt2
 2012              	@ main.c:414: 					Rwa[0] += rw;
 2013 0a46 1344     		add	r3, r3, r2	@ _82, Rwa
 2014              	@ main.c:415: 					Rwa[1] = Rwa[0]/cnt2;
 2015 0a48 B3FBF1F1 		udiv	r1, r3, r1	@ tmp560, _82, cnt2
 2016 0a4c C0E90031 		strd	r3, r1, [r0]	@ _82, tmp560, tmp1002
 2017 0a50 2BE6     		b	.L52	@
 2018              	.L109:
 2019              	@ main.c:601: 						if(str[0]=='t') { stat = rok; LAD = 0;	ROZ = 1; }
 2020 0a52 0122     		movs	r2, #1	@ tmp869,
 2021 0a54 0B49     		ldr	r1, .L120+32	@ tmp866,
 2022 0a56 0525     		movs	r5, #5	@ stat,
 2023 0a58 0B60     		str	r3, [r1]	@ tmp867, MEM[(volatile long unsigned int *)1109492148B]
 2024              	@ main.c:586: 						beep= 0;
 2025 0a5a 0193     		str	r3, [sp, #4]	@ tmp867, %sfp
 2026              	@ main.c:601: 						if(str[0]=='t') { stat = rok; LAD = 0;	ROZ = 1; }
 2027 0a5c 034B     		ldr	r3, .L120+8	@ tmp1070,
 2028 0a5e 1A60     		str	r2, [r3]	@ tmp869, MEM[(volatile long unsigned int *)1109492144B]
 2029 0a60 FFF793BB 		b	.L86	@
 2030              	.L121:
 2031              		.align	2
 2032              	.L120:
 2033 0a64 00000000 		.word	.LANCHOR7
 2034 0a68 1FAA4400 		.word	4499999
 2035 0a6c B0812142 		.word	1109492144
 2036 0a70 00000000 		.word	delay_us
 2037 0a74 1FBF0200 		.word	179999
 2038 0a78 00000000 		.word	.LANCHOR4
 2039 0a7c 00000000 		.word	.LANCHOR8
 2040 0a80 00000000 		.word	.LANCHOR9
 2041 0a84 B4812142 		.word	1109492148
 2042              		.size	lion_updown, .-lion_updown
 2043              		.section	.text.startup.main,"ax",%progbits
 2044              		.align	1
 2045              		.p2align 2,,3
 2046              		.global	main
 2047              		.syntax unified
 2048              		.thumb
 2049              		.thumb_func
 2050              		.fpu softvfp
 2051              		.type	main, %function
 2052              	main:
ARM GAS  /tmp/ccrMssCc.s 			page 37


 2053              		@ Volatile: function does not return.
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              	@ main.c:5724: 	RCC_CR_HSEON_bb = 1;						// enable HSE clock
 2057 0000 0121     		movs	r1, #1	@ tmp123,
 2058              	@ main.c:227: int main(void){
 2059 0002 08B5     		push	{r3, lr}	@
 2060              	@ main.c:5724: 	RCC_CR_HSEON_bb = 1;						// enable HSE clock
 2061 0004 1B4B     		ldr	r3, .L132	@ tmp122,
 2062              	@ main.c:5725: 	while (!RCC_CR_HSERDY_bb);			// wait for stable clock
 2063 0006 1C4A     		ldr	r2, .L132+4	@ tmp124,
 2064              	@ main.c:5724: 	RCC_CR_HSEON_bb = 1;						// enable HSE clock
 2065 0008 1960     		str	r1, [r3]	@ tmp123, MEM[(volatile long unsigned int *)1111621696B]
 2066              	.L123:
 2067              	@ main.c:5725: 	while (!RCC_CR_HSERDY_bb);			// wait for stable clock
 2068 000a 1368     		ldr	r3, [r2]	@ _14, MEM[(volatile long unsigned int *)1111621700B]
 2069 000c 002B     		cmp	r3, #0	@ _14
 2070 000e FCD0     		beq	.L123	@
 2071              	@ main.c:5729: 	RCC_CR_PLLON_bb = 1;						// enable PLL
 2072 0010 0124     		movs	r4, #1	@ tmp129,
 2073              	@ main.c:5727: 	RCC->CFGR |= ((mul - 2)<<RCC_CFGR_PLLMUL_bit)|RCC_CFGR_PLLSRC|RCC_CFGR_PPRE1_DIV2;	
 2074 0012 1A49     		ldr	r1, .L132+8	@ tmp125,
 2075              	@ main.c:5729: 	RCC_CR_PLLON_bb = 1;						// enable PLL
 2076 0014 1A48     		ldr	r0, .L132+12	@ tmp128,
 2077              	@ main.c:5727: 	RCC->CFGR |= ((mul - 2)<<RCC_CFGR_PLLMUL_bit)|RCC_CFGR_PLLSRC|RCC_CFGR_PPRE1_DIV2;	
 2078 0016 4B68     		ldr	r3, [r1, #4]	@ _15, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 2079              	@ main.c:5730: 	while (!RCC_CR_PLLRDY_bb);			// wait for PLL lock
 2080 0018 1A4A     		ldr	r2, .L132+16	@ tmp130,
 2081              	@ main.c:5727: 	RCC->CFGR |= ((mul - 2)<<RCC_CFGR_PLLMUL_bit)|RCC_CFGR_PLLSRC|RCC_CFGR_PPRE1_DIV2;	
 2082 001a 43F4E813 		orr	r3, r3, #1900544	@ _20, _15,
 2083 001e 43F48063 		orr	r3, r3, #1024	@ _20, _20,
 2084 0022 4B60     		str	r3, [r1, #4]	@ _20, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 2085              	@ main.c:5729: 	RCC_CR_PLLON_bb = 1;						// enable PLL
 2086 0024 0460     		str	r4, [r0]	@ tmp129, MEM[(volatile long unsigned int *)1111621728B]
 2087              	.L124:
 2088              	@ main.c:5730: 	while (!RCC_CR_PLLRDY_bb);			// wait for PLL lock
 2089 0026 1368     		ldr	r3, [r2]	@ _21, MEM[(volatile long unsigned int *)1111621732B]
 2090 0028 002B     		cmp	r3, #0	@ _21
 2091 002a FCD0     		beq	.L124	@
 2092              	@ main.c:5732: 	RCC->CFGR |= RCC_CFGR_SW_PLL;		// change SYSCLK to PLL
 2093 002c 134B     		ldr	r3, .L132+8	@ tmp131,
 2094              	@ main.c:5733: 	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 2095 002e 1A46     		mov	r2, r3	@ tmp133, tmp131
 2096              	@ main.c:5732: 	RCC->CFGR |= RCC_CFGR_SW_PLL;		// change SYSCLK to PLL
 2097 0030 5968     		ldr	r1, [r3, #4]	@ _22, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 2098 0032 41F00201 		orr	r1, r1, #2	@ _23, _22,
 2099 0036 5960     		str	r1, [r3, #4]	@ _23, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 2100              	.L125:
 2101              	@ main.c:5733: 	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 2102 0038 5368     		ldr	r3, [r2, #4]	@ _24, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 2103 003a 03F00C03 		and	r3, r3, #12	@ tmp134, _24,
 2104 003e 082B     		cmp	r3, #8	@ tmp134,
 2105 0040 FAD1     		bne	.L125	@,
 2106              	@ main.c:5736: 	RCC->APB2ENR = RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_A
 2107 0042 1D20     		movs	r0, #29	@ tmp138,
 2108              	@ main.c:186: 	SCB->VTOR = NVIC_VectTab_RAM;
 2109 0044 4FF00056 		mov	r6, #536870912	@ tmp136,
ARM GAS  /tmp/ccrMssCc.s 			page 38


 2110              	@ main.c:194: 	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1; // enable pin PA15=JTDI,PB3=JTDO,PB4=JNTRST,
 2111 0048 4FF00075 		mov	r5, #33554432	@ tmp140,
 2112              	@ main.c:5530: 	SysTick->CTRL = SysTick_CTRL_TICKINT|SysTick_CTRL_ENABLE; // enable SysTick
 2113 004c 0321     		movs	r1, #3	@ tmp144,
 2114              	@ main.c:186: 	SCB->VTOR = NVIC_VectTab_RAM;
 2115 004e 0E4B     		ldr	r3, .L132+20	@ tmp135,
 2116              	@ main.c:194: 	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1; // enable pin PA15=JTDI,PB3=JTDO,PB4=JNTRST,
 2117 0050 0E4C     		ldr	r4, .L132+24	@ tmp139,
 2118              	@ main.c:186: 	SCB->VTOR = NVIC_VectTab_RAM;
 2119 0052 9E60     		str	r6, [r3, #8]	@ tmp136, MEM[(struct SCB_Type *)3758157056B].VTOR
 2120              	@ main.c:5736: 	RCC->APB2ENR = RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_A
 2121 0054 9061     		str	r0, [r2, #24]	@ tmp138, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 2122              	@ main.c:5529: 	SysTick->LOAD = STCLK_LD - 1;    // 72/8/SysTick_LOAD interrupt every x s
 2123 0056 0E48     		ldr	r0, .L132+28	@ tmp142,
 2124 0058 A3F54F63 		sub	r3, r3, #3312	@ tmp141, tmp141,
 2125              	@ main.c:231: 		 GPIOC->CRH = (GPIOC->CRH & 0xff0fffff) | 0x00100000;	// LED Blue  PC13		
 2126 005c 0D4A     		ldr	r2, .L132+32	@ tmp145,
 2127              	@ main.c:194: 	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1; // enable pin PA15=JTDI,PB3=JTDO,PB4=JNTRST,
 2128 005e 6560     		str	r5, [r4, #4]	@ tmp140, MEM[(struct AFIO_TypeDef *)1073807360B].MAPR
 2129              	@ main.c:5529: 	SysTick->LOAD = STCLK_LD - 1;    // 72/8/SysTick_LOAD interrupt every x s
 2130 0060 5860     		str	r0, [r3, #4]	@ tmp142, MEM[(struct SysTick_Type *)3758153744B].LOAD
 2131              	@ main.c:5530: 	SysTick->CTRL = SysTick_CTRL_TICKINT|SysTick_CTRL_ENABLE; // enable SysTick
 2132 0062 1960     		str	r1, [r3]	@ tmp144, MEM[(struct SysTick_Type *)3758153744B].CTRL
 2133              	@ main.c:231: 		 GPIOC->CRH = (GPIOC->CRH & 0xff0fffff) | 0x00100000;	// LED Blue  PC13		
 2134 0064 5368     		ldr	r3, [r2, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 2135 0066 23F47003 		bic	r3, r3, #15728640	@ tmp146, _1,
 2136 006a 43F48013 		orr	r3, r3, #1048576	@ _3, tmp146,
 2137 006e 5360     		str	r3, [r2, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 2138              	@ main.c:240: 		lion_updown();
 2139 0070 FFF7FEFF 		bl	lion_updown	@
 2140              	.L133:
 2141              		.align	2
 2142              	.L132:
 2143 0074 40004242 		.word	1111621696
 2144 0078 44004242 		.word	1111621700
 2145 007c 00100240 		.word	1073876992
 2146 0080 60004242 		.word	1111621728
 2147 0084 64004242 		.word	1111621732
 2148 0088 00ED00E0 		.word	-536810240
 2149 008c 00000140 		.word	1073807360
 2150 0090 3F548900 		.word	8999999
 2151 0094 00100140 		.word	1073811456
 2152              		.size	main, .-main
 2153              		.section	.text.uht,"ax",%progbits
 2154              		.align	1
 2155              		.p2align 2,,3
 2156              		.global	uht
 2157              		.syntax unified
 2158              		.thumb
 2159              		.thumb_func
 2160              		.fpu softvfp
 2161              		.type	uht, %function
 2162              	uht:
 2163              		@ args = 0, pretend = 0, frame = 0
 2164              		@ frame_needed = 0, uses_anonymous_args = 0
 2165              		@ link register save eliminated.
 2166              	@ main.c:666: 		GPIOB->CRL = (GPIOB->CRL & 0xffffff0f) | 0x00000060;
ARM GAS  /tmp/ccrMssCc.s 			page 39


 2167 0000 034A     		ldr	r2, .L135	@ tmp113,
 2168 0002 1368     		ldr	r3, [r2]	@ _1, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2169 0004 23F0F003 		bic	r3, r3, #240	@ tmp114, _1,
 2170 0008 43F06003 		orr	r3, r3, #96	@ _3, tmp114,
 2171 000c 1360     		str	r3, [r2]	@ _3, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2172              	@ main.c:735: 	} 
 2173 000e 7047     		bx	lr	@
 2174              	.L136:
 2175              		.align	2
 2176              	.L135:
 2177 0010 000C0140 		.word	1073810432
 2178              		.size	uht, .-uht
 2179              		.section	.text.rtc_calibrate,"ax",%progbits
 2180              		.align	1
 2181              		.p2align 2,,3
 2182              		.global	rtc_calibrate
 2183              		.syntax unified
 2184              		.thumb
 2185              		.thumb_func
 2186              		.fpu softvfp
 2187              		.type	rtc_calibrate, %function
 2188              	rtc_calibrate:
 2189              		@ args = 0, pretend = 0, frame = 24
 2190              		@ frame_needed = 0, uses_anonymous_args = 0
 2191 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2192 0004 87B0     		sub	sp, sp, #28	@,,
 2193              	@ main.c:741: 		RtcInit();
 2194 0006 FFF7FEFF 		bl	RtcInit	@
 2195              	@ main.c:742: 		i2c1_init();
 2196 000a FFF7FEFF 		bl	i2c1_init	@
 2197              	@ main.c:743: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2198 000e 3D48     		ldr	r0, .L160	@ tmp140,
 2199              	@ main.c:744: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2200 0010 3D49     		ldr	r1, .L160+4	@ tmp145,
 2201              	@ main.c:743: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2202 0012 4368     		ldr	r3, [r0, #4]	@ _2, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 2203              	@ main.c:746: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2204 0014 3D4A     		ldr	r2, .L160+8	@ tmp148,
 2205              	@ main.c:743: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2206 0016 23F0F023 		bic	r3, r3, #-268374016	@ tmp141, _2,
 2207 001a 23F47023 		bic	r3, r3, #983040	@ tmp141, tmp141,
 2208 001e 43F01023 		orr	r3, r3, #268439552	@ _4, tmp141,
 2209 0022 43F48033 		orr	r3, r3, #65536	@ _4, _4,
 2210 0026 4360     		str	r3, [r0, #4]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 2211              	@ main.c:744: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2212 0028 0B68     		ldr	r3, [r1]	@ _5, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2213              	@ main.c:750: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 2214 002a 3948     		ldr	r0, .L160+12	@ tmp157,
 2215              	@ main.c:744: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2216 002c 23F47F23 		bic	r3, r3, #1044480	@ tmp146, _5,
 2217 0030 43F48833 		orr	r3, r3, #69632	@ _7, tmp146,
 2218              	@ main.c:746: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2219 0034 374F     		ldr	r7, .L160+16	@ tmp149,
 2220              	@ main.c:747: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 2221 0036 384E     		ldr	r6, .L160+20	@ tmp151,
 2222              	@ main.c:748: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 2223 0038 384D     		ldr	r5, .L160+24	@ tmp153,
ARM GAS  /tmp/ccrMssCc.s 			page 40


 2224              	@ main.c:749: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
 2225 003a 394C     		ldr	r4, .L160+28	@ tmp155,
 2226              	@ main.c:744: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2227 003c 0B60     		str	r3, [r1]	@ _7, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2228              	@ main.c:746: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2229 003e 5760     		str	r7, [r2, #4]	@ tmp149, oled_hw.sck
 2230              	@ main.c:747: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 2231 0040 1660     		str	r6, [r2]	@ tmp151, oled_hw.mosi
 2232              	@ main.c:748: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 2233 0042 9560     		str	r5, [r2, #8]	@ tmp153, oled_hw.dc
 2234              	@ main.c:749: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
 2235 0044 D460     		str	r4, [r2, #12]	@ tmp155, oled_hw.cs
 2236              	@ main.c:750: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 2237 0046 1061     		str	r0, [r2, #16]	@ tmp157, oled_hw.rst
 2238              	@ main.c:753: 		ssd1306_init();
 2239 0048 FFF7FEFF 		bl	ssd1306_init	@
 2240              	@ main.c:770: 		num2uart (tim/TIM_US,7,0);	
 2241 004c 0022     		movs	r2, #0	@,
 2242 004e 0721     		movs	r1, #7	@,
 2243 0050 1046     		mov	r0, r2	@,
 2244 0052 FFF7FEFF 		bl	num2uart	@
 2245              	@ main.c:773: 		num2uart (tim4,8,1);	
 2246 0056 0122     		movs	r2, #1	@,
 2247 0058 0821     		movs	r1, #8	@,
 2248 005a 0298     		ldr	r0, [sp, #8]	@, tim4
 2249 005c FFF7FEFF 		bl	num2uart	@
 2250              	@ main.c:791: 				while(!iPB5)
 2251 0060 04F5FE44 		add	r4, r4, #32512	@ tmp173, tmp173,
 2252 0064 DFF8C880 		ldr	r8, .L160+44	@ tmp194,
 2253 0068 2E4E     		ldr	r6, .L160+32	@ tmp195,
 2254 006a 2F4F     		ldr	r7, .L160+36	@ tmp197,
 2255              	@ main.c:778: 			if( TIM_MS*500 < (trg0 - SysTick->VAL) ){
 2256 006c 2F4D     		ldr	r5, .L160+40	@ tmp163,
 2257 006e DFF8C490 		ldr	r9, .L160+48	@ tmp165,
 2258              	@ main.c:791: 				while(!iPB5)
 2259 0072 6834     		adds	r4, r4, #104	@ tmp173, tmp173,
 2260              	.L138:
 2261              	@ main.c:778: 			if( TIM_MS*500 < (trg0 - SysTick->VAL) ){
 2262 0074 D8F80030 		ldr	r3, [r8]	@ trg0.81_10, trg0
 2263 0078 AA68     		ldr	r2, [r5, #8]	@ _11, MEM[(struct SysTick_Type *)3758153744B].VAL
 2264 007a 9B1A     		subs	r3, r3, r2	@ tmp164, trg0.81_10, _11
 2265 007c 4B45     		cmp	r3, r9	@ tmp164, tmp165
 2266 007e F9D9     		bls	.L138	@,
 2267              	@ main.c:779: 				trg0 = SysTick->VAL; 
 2268 0080 D5F808C0 		ldr	ip, [r5, #8]	@ _13, MEM[(struct SysTick_Type *)3758153744B].VAL
 2269              	@ main.c:781: 				i2c1_read( DS3231_ADDR,0,tm,3);
 2270 0084 0323     		movs	r3, #3	@,
 2271 0086 01AA     		add	r2, sp, #4	@ tmp203,,
 2272 0088 0021     		movs	r1, #0	@,
 2273 008a D020     		movs	r0, #208	@,
 2274              	@ main.c:779: 				trg0 = SysTick->VAL; 
 2275 008c C8F800C0 		str	ip, [r8]	@ _13, trg0
 2276              	@ main.c:781: 				i2c1_read( DS3231_ADDR,0,tm,3);
 2277 0090 FFF7FEFF 		bl	i2c1_read	@
 2278              	@ main.c:786: 				i2c1_read( DS3231_ADDR,0x0e,&ContReg,1);
 2279 0094 0123     		movs	r3, #1	@,
 2280 0096 0DF10302 		add	r2, sp, #3	@ tmp204,,
ARM GAS  /tmp/ccrMssCc.s 			page 41


 2281 009a 0E21     		movs	r1, #14	@,
 2282 009c D020     		movs	r0, #208	@,
 2283 009e FFF7FEFF 		bl	i2c1_read	@
 2284              	.L139:
 2285              	@ main.c:791: 				while(!iPB5)
 2286 00a2 2368     		ldr	r3, [r4]	@ _15, MEM[(volatile long unsigned int *)1109491988B]
 2287 00a4 2BB9     		cbnz	r3, .L141	@ _15,
 2288              	.L157:
 2289              	@ main.c:792: 				while(iPB5) 	TIM_start();
 2290 00a6 2368     		ldr	r3, [r4]	@ _14,
 2291 00a8 002B     		cmp	r3, #0	@ _14
 2292 00aa FAD0     		beq	.L139	@
 2293              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 2294 00ac AB68     		ldr	r3, [r5, #8]	@ _46, MEM[(struct SysTick_Type *)3758153744B].VAL
 2295 00ae 3360     		str	r3, [r6]	@ _46, Timt
 2296 00b0 F9E7     		b	.L157	@
 2297              	.L141:
 2298              	@ main.c:793: 				while(!iPB5)
 2299 00b2 2368     		ldr	r3, [r4]	@ _17, MEM[(volatile long unsigned int *)1109491988B]
 2300 00b4 3BB9     		cbnz	r3, .L144	@ _17,
 2301              	.L159:
 2302              	@ main.c:794: 				while(iPB5)	TIM_stop(&tim4);
 2303 00b6 2368     		ldr	r3, [r4]	@ _16,
 2304 00b8 002B     		cmp	r3, #0	@ _16
 2305 00ba FAD0     		beq	.L141	@
 2306              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 2307 00bc 3368     		ldr	r3, [r6]	@ Timt.84_47, Timt
 2308 00be AA68     		ldr	r2, [r5, #8]	@ _48, MEM[(struct SysTick_Type *)3758153744B].VAL
 2309 00c0 9B1A     		subs	r3, r3, r2	@ _49, Timt.84_47, _48
 2310 00c2 0293     		str	r3, [sp, #8]	@ _49, MEM[(volatile u32 *)&tim4]
 2311 00c4 F7E7     		b	.L159	@
 2312              	.L144:
 2313              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 2314 00c6 40F25241 		movw	r1, #1106	@ tmp187,
 2315              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 2316 00ca AB68     		ldr	r3, [r5, #8]	@ _54, MEM[(struct SysTick_Type *)3758153744B].VAL
 2317 00cc 3360     		str	r3, [r6]	@ _54, Timt
 2318              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 2319 00ce AB68     		ldr	r3, [r5, #8]	@ _50, MEM[(struct SysTick_Type *)3758153744B].VAL
 2320 00d0 3B60     		str	r3, [r7]	@ _50, delay_us
 2321              	.L146:
 2322              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 2323 00d2 3B68     		ldr	r3, [r7]	@ delay_us.85_51, delay_us
 2324 00d4 AA68     		ldr	r2, [r5, #8]	@ _52, MEM[(struct SysTick_Type *)3758153744B].VAL
 2325 00d6 9B1A     		subs	r3, r3, r2	@ tmp186, delay_us.85_51, _52
 2326 00d8 8B42     		cmp	r3, r1	@ tmp186, tmp187
 2327 00da FAD9     		bls	.L146	@,
 2328              	@ main.c:799: 				int2str(tim4,tbuf,6,0); 
 2329 00dc 03A9     		add	r1, sp, #12	@ tmp205,,
 2330 00de 0023     		movs	r3, #0	@,
 2331 00e0 0622     		movs	r2, #6	@,
 2332 00e2 0298     		ldr	r0, [sp, #8]	@, tim4
 2333 00e4 FFF7FEFF 		bl	int2str	@
 2334              	@ main.c:800: 				int2str(123,tbuf,6,0); 
 2335 00e8 0023     		movs	r3, #0	@,
 2336 00ea 03A9     		add	r1, sp, #12	@ tmp206,,
 2337 00ec 0622     		movs	r2, #6	@,
ARM GAS  /tmp/ccrMssCc.s 			page 42


 2338 00ee 7B20     		movs	r0, #123	@,
 2339 00f0 FFF7FEFF 		bl	int2str	@
 2340              	@ main.c:802: 				oled_str16(0,0,tbuf);
 2341 00f4 0021     		movs	r1, #0	@,
 2342 00f6 03AA     		add	r2, sp, #12	@ tmp207,,
 2343 00f8 0846     		mov	r0, r1	@,
 2344 00fa FFF7FEFF 		bl	oled_str16	@
 2345              	@ main.c:806: 				oled_refresh_gram();
 2346 00fe FFF7FEFF 		bl	oled_refresh_gram	@
 2347 0102 B7E7     		b	.L138	@
 2348              	.L161:
 2349              		.align	2
 2350              	.L160:
 2351 0104 00080140 		.word	1073809408
 2352 0108 000C0140 		.word	1073810432
 2353 010c 00000000 		.word	oled_hw
 2354 0110 BC012142 		.word	1109459388
 2355 0114 90812142 		.word	1109492112
 2356 0118 8C812142 		.word	1109492108
 2357 011c B0012142 		.word	1109459376
 2358 0120 AC012142 		.word	1109459372
 2359 0124 00000000 		.word	Timt
 2360 0128 00000000 		.word	delay_us
 2361 012c 10E000E0 		.word	-536813552
 2362 0130 00000000 		.word	trg0
 2363 0134 20AA4400 		.word	4500000
 2364              		.size	rtc_calibrate, .-rtc_calibrate
 2365              		.section	.text.testwsk,"ax",%progbits
 2366              		.align	1
 2367              		.p2align 2,,3
 2368              		.global	testwsk
 2369              		.syntax unified
 2370              		.thumb
 2371              		.thumb_func
 2372              		.fpu softvfp
 2373              		.type	testwsk, %function
 2374              	testwsk:
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              		@ link register save eliminated.
 2378              	@ main.c:824: 	}
 2379 0000 7047     		bx	lr	@
 2380              		.size	testwsk, .-testwsk
 2381 0002 00BF     		.section	.text.veml6075,"ax",%progbits
 2382              		.align	1
 2383              		.p2align 2,,3
 2384              		.global	veml6075
 2385              		.syntax unified
 2386              		.thumb
 2387              		.thumb_func
 2388              		.fpu softvfp
 2389              		.type	veml6075, %function
 2390              	veml6075:
 2391              		@ args = 0, pretend = 0, frame = 16
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              	@ main.c:828: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='l';
 2394 0000 0123     		movs	r3, #1	@ tmp128,
ARM GAS  /tmp/ccrMssCc.s 			page 43


 2395 0002 6C20     		movs	r0, #108	@ tmp131,
 2396 0004 264A     		ldr	r2, .L168	@ tmp126,
 2397              	@ main.c:845: 		LED=1;
 2398 0006 2749     		ldr	r1, .L168+4	@ tmp133,
 2399              	@ main.c:828: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='l';
 2400 0008 1268     		ldr	r2, [r2]	@ p_Fifo1.86_1, p_Fifo1
 2401              	@ main.c:825: void veml6075(void){
 2402 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 2403              	@ main.c:847: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2404 000e 264C     		ldr	r4, .L168+8	@ tmp135,
 2405              	@ main.c:828: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='l';
 2406 0010 9380     		strh	r3, [r2, #4]	@ movhi	@ tmp128, p_Fifo1.86_1->rct
 2407 0012 5380     		strh	r3, [r2, #2]	@ movhi	@ tmp128, p_Fifo1.86_1->rwi
 2408 0014 9071     		strb	r0, [r2, #6]	@ tmp131, p_Fifo1.86_1->rbuf
 2409              	@ main.c:845: 		LED=1;
 2410 0016 0B60     		str	r3, [r1]	@ tmp128, MEM[(volatile long unsigned int *)1109524916B]
 2411              	@ main.c:847: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2412 0018 6368     		ldr	r3, [r4, #4]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 2413              	@ main.c:848: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2414 001a 2448     		ldr	r0, .L168+12	@ tmp140,
 2415              	@ main.c:847: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 2416 001c 23F0F023 		bic	r3, r3, #-268374016	@ tmp136, _4,
 2417 0020 23F47023 		bic	r3, r3, #983040	@ tmp136, tmp136,
 2418 0024 43F01023 		orr	r3, r3, #268439552	@ _6, tmp136,
 2419 0028 43F48033 		orr	r3, r3, #65536	@ _6, _6,
 2420 002c 6360     		str	r3, [r4, #4]	@ _6, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 2421              	@ main.c:848: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2422 002e 0268     		ldr	r2, [r0]	@ _7, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2423              	@ main.c:850: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2424 0030 1F4B     		ldr	r3, .L168+16	@ tmp143,
 2425              	@ main.c:848: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 2426 0032 22F47F22 		bic	r2, r2, #1044480	@ tmp141, _7,
 2427 0036 42F48832 		orr	r2, r2, #69632	@ _9, tmp141,
 2428 003a 0260     		str	r2, [r0]	@ _9, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2429              	@ main.c:850: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2430 003c 1D4E     		ldr	r6, .L168+20	@ tmp144,
 2431              	@ main.c:853: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
 2432 003e 1E48     		ldr	r0, .L168+24	@ tmp150,
 2433              	@ main.c:854: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 2434 0040 1E4A     		ldr	r2, .L168+28	@ tmp152,
 2435              	@ main.c:851: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 2436 0042 1F4D     		ldr	r5, .L168+32	@ tmp146,
 2437              	@ main.c:852: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 2438 0044 1F4C     		ldr	r4, .L168+36	@ tmp148,
 2439              	@ main.c:825: void veml6075(void){
 2440 0046 84B0     		sub	sp, sp, #16	@,,
 2441              	@ main.c:850: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 2442 0048 5E60     		str	r6, [r3, #4]	@ tmp144, oled_hw.sck
 2443              	@ main.c:880: 				LED^=1;
 2444 004a 8846     		mov	r8, r1	@ tmp163, tmp133
 2445              	@ main.c:851: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 2446 004c 1D60     		str	r5, [r3]	@ tmp146, oled_hw.mosi
 2447              	@ main.c:872: 		oled_refresh_gram();
 2448 004e 0027     		movs	r7, #0	@ ivtmp.440,
 2449              	@ main.c:852: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 2450 0050 9C60     		str	r4, [r3, #8]	@ tmp148, oled_hw.dc
 2451              	@ main.c:853: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
ARM GAS  /tmp/ccrMssCc.s 			page 44


 2452 0052 D860     		str	r0, [r3, #12]	@ tmp150, oled_hw.cs
 2453              	@ main.c:854: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 2454 0054 1A61     		str	r2, [r3, #16]	@ tmp152, oled_hw.rst
 2455              	@ main.c:857: 		ssd1306_init();
 2456 0056 FFF7FEFF 		bl	ssd1306_init	@
 2457              	@ main.c:872: 		oled_refresh_gram();
 2458 005a FFF7FEFF 		bl	oled_refresh_gram	@
 2459 005e 1A4D     		ldr	r5, .L168+40	@ tmp166,
 2460              	@ main.c:875: 			if(STCLK_MS*20 < (trg0 - SysTick->VAL)){	
 2461 0060 1A4C     		ldr	r4, .L168+44	@ tmp154,
 2462 0062 1B4E     		ldr	r6, .L168+48	@ tmp156,
 2463              	.L164:
 2464 0064 2B68     		ldr	r3, [r5]	@ trg0.89_10, trg0
 2465 0066 A268     		ldr	r2, [r4, #8]	@ _11, MEM[(struct SysTick_Type *)3758153744B].VAL
 2466 0068 9B1A     		subs	r3, r3, r2	@ tmp155, trg0.89_10, _11
 2467 006a B342     		cmp	r3, r6	@ tmp155, tmp156
 2468 006c FAD9     		bls	.L164	@,
 2469              	@ main.c:876: 				trg0  = SysTick->VAL;	
 2470 006e D4F808C0 		ldr	ip, [r4, #8]	@ _13, MEM[(struct SysTick_Type *)3758153744B].VAL
 2471              	@ main.c:877: 				int2str(cnt++ ,tbuf,5,0);		oled_num24(0,0,tbuf);
 2472 0072 0023     		movs	r3, #0	@,
 2473 0074 0522     		movs	r2, #5	@,
 2474 0076 01A9     		add	r1, sp, #4	@ tmp167,,
 2475 0078 B8B2     		uxth	r0, r7	@, ivtmp.440
 2476              	@ main.c:876: 				trg0  = SysTick->VAL;	
 2477 007a C5F800C0 		str	ip, [r5]	@ _13, trg0
 2478              	@ main.c:877: 				int2str(cnt++ ,tbuf,5,0);		oled_num24(0,0,tbuf);
 2479 007e FFF7FEFF 		bl	int2str	@
 2480 0082 0021     		movs	r1, #0	@,
 2481 0084 01AA     		add	r2, sp, #4	@ tmp168,,
 2482 0086 0846     		mov	r0, r1	@,
 2483 0088 FFF7FEFF 		bl	oled_num24	@
 2484              	@ main.c:878: 				oled_refresh_gram();	
 2485 008c FFF7FEFF 		bl	oled_refresh_gram	@
 2486              	@ main.c:880: 				LED^=1;
 2487 0090 D8F80030 		ldr	r3, [r8]	@ _16, MEM[(volatile long unsigned int *)1109524916B]
 2488 0094 0137     		adds	r7, r7, #1	@ ivtmp.440, ivtmp.440,
 2489 0096 83F00103 		eor	r3, r3, #1	@ _17, _16,
 2490 009a C8F80030 		str	r3, [r8]	@ _17, MEM[(volatile long unsigned int *)1109524916B]
 2491 009e E1E7     		b	.L164	@
 2492              	.L169:
 2493              		.align	2
 2494              	.L168:
 2495 00a0 00000000 		.word	p_Fifo1
 2496 00a4 B4012242 		.word	1109524916
 2497 00a8 00080140 		.word	1073809408
 2498 00ac 000C0140 		.word	1073810432
 2499 00b0 00000000 		.word	oled_hw
 2500 00b4 90812142 		.word	1109492112
 2501 00b8 AC012142 		.word	1109459372
 2502 00bc BC012142 		.word	1109459388
 2503 00c0 8C812142 		.word	1109492108
 2504 00c4 B0012142 		.word	1109459376
 2505 00c8 00000000 		.word	trg0
 2506 00cc 10E000E0 		.word	-536813552
 2507 00d0 20BF0200 		.word	180000
 2508              		.size	veml6075, .-veml6075
ARM GAS  /tmp/ccrMssCc.s 			page 45


 2509              		.section	.text.softSPI_w,"ax",%progbits
 2510              		.align	1
 2511              		.p2align 2,,3
 2512              		.global	softSPI_w
 2513              		.syntax unified
 2514              		.thumb
 2515              		.thumb_func
 2516              		.fpu softvfp
 2517              		.type	softSPI_w, %function
 2518              	softSPI_w:
 2519              		@ args = 0, pretend = 0, frame = 0
 2520              		@ frame_needed = 0, uses_anonymous_args = 0
 2521 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2522              	@ main.c:1000: 			if (byte & 0x80)			wMOSI = 1;
 2523 0004 4FF0010E 		mov	lr, #1	@ tmp152,
 2524              	@ main.c:996: uint8_t softSPI_w(uint8_t byte)	{
 2525 0008 0824     		movs	r4, #8	@ ivtmp_5,
 2526              	@ main.c:1004: 			wSCK = 1; /* a slave latches input data bit */
 2527 000a F046     		mov	r8, lr	@ MEM[(volatile long unsigned int *)1109459348B], tmp152
 2528              	@ main.c:1001: 			else			wMOSI = 0;
 2529 000c 0026     		movs	r6, #0	@ tmp151,
 2530 000e 1549     		ldr	r1, .L184	@ tmp149,
 2531 0010 DFF85CC0 		ldr	ip, .L184+12	@ tmp150,
 2532              	@ main.c:1004: 			wSCK = 1; /* a slave latches input data bit */
 2533 0014 144D     		ldr	r5, .L184+4	@ tmp131,
 2534              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 2535 0016 154A     		ldr	r2, .L184+8	@ tmp133,
 2536              	@ main.c:1006: 			if (wMISO)			byte |= 0x01;
 2537 0018 DFF85890 		ldr	r9, .L184+16	@ tmp138,
 2538              	.L176:
 2539              	@ main.c:1000: 			if (byte & 0x80)			wMOSI = 1;
 2540 001c 0306     		lsls	r3, r0, #24	@, byte,
 2541 001e 4CBF     		ite	mi
 2542 0020 CCF800E0 		strmi	lr, [ip]	@ tmp152, MEM[(volatile long unsigned int *)1109459356B]
 2543              	@ main.c:1001: 			else			wMOSI = 0;
 2544 0024 CCF80060 		strpl	r6, [ip]	@ tmp151, MEM[(volatile long unsigned int *)1109459356B]
 2545              	@ main.c:1004: 			wSCK = 1; /* a slave latches input data bit */
 2546 0028 C5F80080 		str	r8, [r5]	@ MEM[(volatile long unsigned int *)1109459348B], MEM[(volatile long unsigned int *)1
 2547              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 2548 002c 9368     		ldr	r3, [r2, #8]	@ _18, MEM[(struct SysTick_Type *)3758153744B].VAL
 2549              	@ main.c:1003: 			byte <<= 1;
 2550 002e 4000     		lsls	r0, r0, #1	@ tmp130, byte,
 2551 0030 C0B2     		uxtb	r0, r0	@ byte, tmp130
 2552              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 2553 0032 0B60     		str	r3, [r1]	@ _18, delay_us
 2554              	.L173:
 2555              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 2556 0034 0B68     		ldr	r3, [r1]	@ delay_us.85_19, delay_us
 2557 0036 9768     		ldr	r7, [r2, #8]	@ _20, MEM[(struct SysTick_Type *)3758153744B].VAL
 2558 0038 DB1B     		subs	r3, r3, r7	@ tmp137, delay_us.85_19, _20
 2559 003a 592B     		cmp	r3, #89	@ tmp137,
 2560 003c FAD9     		bls	.L173	@,
 2561              	@ main.c:1006: 			if (wMISO)			byte |= 0x01;
 2562 003e D9F80030 		ldr	r3, [r9]	@ _2, MEM[(volatile long unsigned int *)1109459224B]
 2563 0042 0BB1     		cbz	r3, .L174	@ _2,
 2564              	@ main.c:1006: 			if (wMISO)			byte |= 0x01;
 2565 0044 40F00100 		orr	r0, r0, #1	@ byte, byte,
ARM GAS  /tmp/ccrMssCc.s 			page 46


 2566              	.L174:
 2567              	@ main.c:1008: 			wSCK = 0; /* a slave shifts out next output data bit */
 2568 0048 2E60     		str	r6, [r5]	@ tmp151, MEM[(volatile long unsigned int *)1109459348B]
 2569              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 2570 004a 9368     		ldr	r3, [r2, #8]	@ _22, MEM[(struct SysTick_Type *)3758153744B].VAL
 2571 004c 0B60     		str	r3, [r1]	@ _22, delay_us
 2572              	.L175:
 2573              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 2574 004e 0B68     		ldr	r3, [r1]	@ delay_us.85_23, delay_us
 2575 0050 9768     		ldr	r7, [r2, #8]	@ _24, MEM[(struct SysTick_Type *)3758153744B].VAL
 2576 0052 DB1B     		subs	r3, r3, r7	@ tmp146, delay_us.85_23, _24
 2577 0054 592B     		cmp	r3, #89	@ tmp146,
 2578 0056 FAD9     		bls	.L175	@,
 2579 0058 013C     		subs	r4, r4, #1	@ tmp147, ivtmp_5,
 2580              	@ main.c:998: 		for(counter = 8; counter; counter--)
 2581 005a 14F0FF04 		ands	r4, r4, #255	@ ivtmp_5, tmp147,
 2582 005e DDD1     		bne	.L176	@,
 2583              	@ main.c:1012: 	}
 2584 0060 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 2585              	.L185:
 2586              		.align	2
 2587              	.L184:
 2588 0064 00000000 		.word	delay_us
 2589 0068 94012142 		.word	1109459348
 2590 006c 10E000E0 		.word	-536813552
 2591 0070 9C012142 		.word	1109459356
 2592 0074 18012142 		.word	1109459224
 2593              		.size	softSPI_w, .-softSPI_w
 2594              		.section	.text.softSPI_r,"ax",%progbits
 2595              		.align	1
 2596              		.p2align 2,,3
 2597              		.global	softSPI_r
 2598              		.syntax unified
 2599              		.thumb
 2600              		.thumb_func
 2601              		.fpu softvfp
 2602              		.type	softSPI_r, %function
 2603              	softSPI_r:
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
 2606              		@ link register save eliminated.
 2607              	@ main.c:1019: 			else				wMOSI = 0;
 2608 0000 4FF0000C 		mov	ip, #0	@ tmp132,
 2609              	@ main.c:1014: uint8_t softSPI_r(uint8_t byte)	{
 2610 0004 F0B4     		push	{r4, r5, r6, r7}	@
 2611              	@ main.c:1014: uint8_t softSPI_r(uint8_t byte)	{
 2612 0006 0823     		movs	r3, #8	@ ivtmp_5,
 2613              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2614 0008 6746     		mov	r7, ip	@ MEM[(volatile long unsigned int *)1109459348B], tmp132
 2615              	@ main.c:1018: 			if (byte & 0x80)			wMOSI = 1;
 2616 000a 0124     		movs	r4, #1	@ tmp133,
 2617              	@ main.c:1019: 			else				wMOSI = 0;
 2618 000c 0A4E     		ldr	r6, .L196	@ tmp131,
 2619              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2620 000e 0B4A     		ldr	r2, .L196+4	@ tmp122,
 2621              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2622 0010 0B4D     		ldr	r5, .L196+8	@ tmp125,
ARM GAS  /tmp/ccrMssCc.s 			page 47


 2623              	.L190:
 2624              	@ main.c:1018: 			if (byte & 0x80)			wMOSI = 1;
 2625 0012 0106     		lsls	r1, r0, #24	@, byte,
 2626 0014 4CBF     		ite	mi
 2627 0016 3460     		strmi	r4, [r6]	@ tmp133, MEM[(volatile long unsigned int *)1109459356B]
 2628              	@ main.c:1019: 			else				wMOSI = 0;
 2629 0018 C6F800C0 		strpl	ip, [r6]	@ tmp132, MEM[(volatile long unsigned int *)1109459356B]
 2630              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2631 001c 1760     		str	r7, [r2]	@ MEM[(volatile long unsigned int *)1109459348B], MEM[(volatile long unsigned int *)1
 2632              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2633 001e 2968     		ldr	r1, [r5]	@ _2, MEM[(volatile long unsigned int *)1109459224B]
 2634              	@ main.c:1022: 			byte <<= 1;
 2635 0020 4000     		lsls	r0, r0, #1	@ tmp124, byte,
 2636 0022 013B     		subs	r3, r3, #1	@ tmp129, ivtmp_5,
 2637 0024 C0B2     		uxtb	r0, r0	@ byte, tmp124
 2638              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2639 0026 09B1     		cbz	r1, .L189	@ _2,
 2640              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2641 0028 40F00100 		orr	r0, r0, #1	@ byte, byte,
 2642              	.L189:
 2643              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2644 002c 13F0FF03 		ands	r3, r3, #255	@ ivtmp_5, tmp129,
 2645              	@ main.c:1025: 			wSCK = 1; /* a slave latches input data bit */
 2646 0030 1460     		str	r4, [r2]	@ tmp133, MEM[(volatile long unsigned int *)1109459348B]
 2647              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2648 0032 EED1     		bne	.L190	@,
 2649              	@ main.c:1028: 	}
 2650 0034 F0BC     		pop	{r4, r5, r6, r7}	@
 2651 0036 7047     		bx	lr	@
 2652              	.L197:
 2653              		.align	2
 2654              	.L196:
 2655 0038 9C012142 		.word	1109459356
 2656 003c 94012142 		.word	1109459348
 2657 0040 18012142 		.word	1109459224
 2658              		.size	softSPI_r, .-softSPI_r
 2659              		.section	.text.ili9486,"ax",%progbits
 2660              		.align	1
 2661              		.p2align 2,,3
 2662              		.global	ili9486
 2663              		.syntax unified
 2664              		.thumb
 2665              		.thumb_func
 2666              		.fpu softvfp
 2667              		.type	ili9486, %function
 2668              	ili9486:
 2669              		@ args = 0, pretend = 0, frame = 8
 2670              		@ frame_needed = 0, uses_anonymous_args = 0
 2671              	@ main.c:1032: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='c';
 2672 0000 0123     		movs	r3, #1	@ tmp136,
 2673 0002 6320     		movs	r0, #99	@ tmp139,
 2674              	@ main.c:1029: void ili9486(void){
 2675 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2676              	@ main.c:1032: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='c';
 2677 0008 DFF85491 		ldr	r9, .L229+56	@ tmp196,
 2678              	@ main.c:1034: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0x34330000;	//   PA7=MOSI, PA6=MISO, PA5=
 2679 000c 4649     		ldr	r1, .L229	@ tmp141,
ARM GAS  /tmp/ccrMssCc.s 			page 48


 2680              	@ main.c:1032: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='c';
 2681 000e D9F80020 		ldr	r2, [r9]	@ pretmp_14, p_Fifo1
 2682              	@ main.c:1019: 			else				wMOSI = 0;
 2683 0012 464E     		ldr	r6, .L229+4	@ tmp207,
 2684              	@ main.c:1032: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='c';
 2685 0014 9380     		strh	r3, [r2, #4]	@ movhi	@ tmp136, p_Fifo1.100_1->rct
 2686 0016 5380     		strh	r3, [r2, #2]	@ movhi	@ tmp136, p_Fifo1.100_1->rwi
 2687 0018 9071     		strb	r0, [r2, #6]	@ tmp139, p_Fifo1.100_1->rbuf
 2688              	@ main.c:1034: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0x34330000;	//   PA7=MOSI, PA6=MISO, PA5=
 2689 001a 0B68     		ldr	r3, [r1]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 2690              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2691 001c 444C     		ldr	r4, .L229+8	@ tmp208,
 2692              	@ main.c:1034: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0x34330000;	//   PA7=MOSI, PA6=MISO, PA5=
 2693 001e 9BB2     		uxth	r3, r3	@ tmp142, _4
 2694 0020 43F05053 		orr	r3, r3, #872415232	@ _6, tmp142,
 2695 0024 43F44C13 		orr	r3, r3, #3342336	@ _6, _6,
 2696              	@ main.c:1029: void ili9486(void){
 2697 0028 83B0     		sub	sp, sp, #12	@,,
 2698              	@ main.c:1034: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0x34330000;	//   PA7=MOSI, PA6=MISO, PA5=
 2699 002a 0B60     		str	r3, [r1]	@ _6, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 2700              	.L200:
 2701              	@ main.c:1038: 			if(p_Fifo1->rct){
 2702 002c 9388     		ldrh	r3, [r2, #4]	@, prephitmp_55->rct
 2703 002e 9BB2     		uxth	r3, r3	@ _8, prephitmp_55->rct
 2704 0030 002B     		cmp	r3, #0	@ _8
 2705 0032 FBD0     		beq	.L200	@
 2706              	@ main.c:1039: 				UART_getChar( (char*)&swh);
 2707 0034 0DF10700 		add	r0, sp, #7	@ tmp214,,
 2708 0038 FFF7FEFF 		bl	UART_getChar	@
 2709              	@ main.c:1041: 				switch (swh)	{
 2710 003c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2	@ swh, swh
 2711 0040 722B     		cmp	r3, #114	@ swh,
 2712 0042 09D0     		beq	.L202	@,
 2713 0044 772B     		cmp	r3, #119	@ swh,
 2714 0046 42D0     		beq	.L203	@,
 2715 0048 632B     		cmp	r3, #99	@ swh,
 2716 004a 30D0     		beq	.L228	@,
 2717              	@ main.c:1067: 					UaPutK("\r");
 2718 004c 3948     		ldr	r0, .L229+12	@,
 2719 004e FFF7FEFF 		bl	UaPutK	@
 2720              	.L209:
 2721 0052 D9F80020 		ldr	r2, [r9]	@ pretmp_14, p_Fifo1
 2722 0056 E9E7     		b	.L200	@
 2723              	.L202:
 2724              	@ main.c:1044: 					UaPutK("\r\n reg = 0x");	reg=UART_getHex();
 2725 0058 3748     		ldr	r0, .L229+16	@,
 2726 005a FFF7FEFF 		bl	UaPutK	@
 2727 005e FFF7FEFF 		bl	UART_getHex	@
 2728 0062 C5B2     		uxtb	r5, r0	@ reg,
 2729              	@ main.c:1045: 					UaPutK("\r\n dat = 0x");
 2730 0064 3548     		ldr	r0, .L229+20	@,
 2731 0066 FFF7FEFF 		bl	UaPutK	@
 2732              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2733 006a 0022     		movs	r2, #0	@ tmp154,
 2734 006c 0823     		movs	r3, #8	@ ivtmp_53,
 2735              	@ main.c:1019: 			else				wMOSI = 0;
 2736 006e 9446     		mov	ip, r2	@ tmp198, tmp154
ARM GAS  /tmp/ccrMssCc.s 			page 49


 2737              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2738 0070 1746     		mov	r7, r2	@ MEM[(volatile long unsigned int *)1109459348B], tmp198
 2739              	@ main.c:1018: 			if (byte & 0x80)			wMOSI = 1;
 2740 0072 0121     		movs	r1, #1	@ tmp199,
 2741              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2742 0074 3248     		ldr	r0, .L229+24	@ tmp215,
 2743              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2744 0076 DFF8E0E0 		ldr	lr, .L229+48	@ tmp163,
 2745              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2746 007a 0260     		str	r2, [r0]	@ tmp154, MEM[(volatile long unsigned int *)1109459344B]
 2747              	.L208:
 2748              	@ main.c:1018: 			if (byte & 0x80)			wMOSI = 1;
 2749 007c 2A06     		lsls	r2, r5, #24	@, reg,
 2750 007e 4CBF     		ite	mi
 2751 0080 3160     		strmi	r1, [r6]	@ tmp199, MEM[(volatile long unsigned int *)1109459356B]
 2752              	@ main.c:1019: 			else				wMOSI = 0;
 2753 0082 C6F800C0 		strpl	ip, [r6]	@ tmp198, MEM[(volatile long unsigned int *)1109459356B]
 2754              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2755 0086 2760     		str	r7, [r4]	@ MEM[(volatile long unsigned int *)1109459348B], MEM[(volatile long unsigned int *)1
 2756              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2757 0088 DEF80020 		ldr	r2, [lr]	@ _43, MEM[(volatile long unsigned int *)1109459224B]
 2758              	@ main.c:1022: 			byte <<= 1;
 2759 008c 6D00     		lsls	r5, r5, #1	@ tmp162, reg,
 2760 008e 013B     		subs	r3, r3, #1	@ tmp167, ivtmp_53,
 2761 0090 EDB2     		uxtb	r5, r5	@ reg, tmp162
 2762              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2763 0092 0AB1     		cbz	r2, .L207	@ _43,
 2764 0094 45F00105 		orr	r5, r5, #1	@ reg, reg,
 2765              	.L207:
 2766              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2767 0098 13F0FF03 		ands	r3, r3, #255	@ ivtmp_53, tmp167,
 2768              	@ main.c:1025: 			wSCK = 1; /* a slave latches input data bit */
 2769 009c 2160     		str	r1, [r4]	@ tmp199, MEM[(volatile long unsigned int *)1109459348B]
 2770              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2771 009e EDD1     		bne	.L208	@,
 2772              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2773 00a0 274B     		ldr	r3, .L229+24	@ tmp216,
 2774              	@ main.c:1047: 					hex2uart(dat,2);
 2775 00a2 2846     		mov	r0, r5	@, reg
 2776              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2777 00a4 1960     		str	r1, [r3]	@ tmp199, MEM[(volatile long unsigned int *)1109459344B]
 2778              	@ main.c:1047: 					hex2uart(dat,2);
 2779 00a6 0221     		movs	r1, #2	@,
 2780 00a8 FFF7FEFF 		bl	hex2uart	@
 2781              	@ main.c:1049: 					break;
 2782 00ac D1E7     		b	.L209	@
 2783              	.L228:
 2784              	@ main.c:1060: 					UaPutK("\f");
 2785 00ae 2548     		ldr	r0, .L229+28	@,
 2786 00b0 FFF7FEFF 		bl	UaPutK	@
 2787              	@ main.c:1061: 					UaPutK("\n\r\n======= ILI9486 ==================================\r\n");
 2788 00b4 2448     		ldr	r0, .L229+32	@,
 2789 00b6 FFF7FEFF 		bl	UaPutK	@
 2790              	@ main.c:1062: 					UaPutK(" r - Read   c - Clear page  \r\n");
 2791 00ba 2448     		ldr	r0, .L229+36	@,
 2792 00bc FFF7FEFF 		bl	UaPutK	@
 2793              	@ main.c:1063: 					UaPutK(" w - Write  l - Loop read   \r\n");
ARM GAS  /tmp/ccrMssCc.s 			page 50


 2794 00c0 2348     		ldr	r0, .L229+40	@,
 2795 00c2 FFF7FEFF 		bl	UaPutK	@
 2796              	@ main.c:1064: 					UaPutK("==================================================\r\n > ");
 2797 00c6 2348     		ldr	r0, .L229+44	@,
 2798 00c8 FFF7FEFF 		bl	UaPutK	@
 2799              	@ main.c:1065: 					break;
 2800 00cc C1E7     		b	.L209	@
 2801              	.L203:
 2802              	@ main.c:1051: 					wCS = 0;
 2803 00ce 0023     		movs	r3, #0	@ tmp171,
 2804              	@ main.c:1052: 					for(u08 i=0;i<64;i++){
 2805 00d0 9B46     		mov	fp, r3	@ i, tmp171
 2806              	@ main.c:1019: 			else				wMOSI = 0;
 2807 00d2 9A46     		mov	r10, r3	@ tmp202, i
 2808              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2809 00d4 9846     		mov	r8, r3	@ MEM[(volatile long unsigned int *)1109459348B], i
 2810              	@ main.c:1051: 					wCS = 0;
 2811 00d6 1A4A     		ldr	r2, .L229+24	@ tmp217,
 2812              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2813 00d8 1F4F     		ldr	r7, .L229+48	@ tmp180,
 2814              	@ main.c:1051: 					wCS = 0;
 2815 00da 1360     		str	r3, [r2]	@ tmp171, MEM[(volatile long unsigned int *)1109459344B]
 2816              	.L210:
 2817              	@ main.c:1046: 					wCS = 0;		dat = softSPI_r(reg); 	wCS = 1;
 2818 00dc 5846     		mov	r0, fp	@ byte, i
 2819 00de 0822     		movs	r2, #8	@ ivtmp_7,
 2820              	@ main.c:1018: 			if (byte & 0x80)			wMOSI = 1;
 2821 00e0 0125     		movs	r5, #1	@ tmp203,
 2822              	.L214:
 2823 00e2 0306     		lsls	r3, r0, #24	@, byte,
 2824 00e4 4CBF     		ite	mi
 2825 00e6 3560     		strmi	r5, [r6]	@ tmp203, MEM[(volatile long unsigned int *)1109459356B]
 2826              	@ main.c:1019: 			else				wMOSI = 0;
 2827 00e8 C6F800A0 		strpl	r10, [r6]	@ tmp202, MEM[(volatile long unsigned int *)1109459356B]
 2828              	@ main.c:1021: 			wSCK = 0; /* a slave shifts out output data bit */
 2829 00ec C4F80080 		str	r8, [r4]	@ MEM[(volatile long unsigned int *)1109459348B], MEM[(volatile long unsigned int *)1
 2830              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2831 00f0 3968     		ldr	r1, [r7]	@ _51, MEM[(volatile long unsigned int *)1109459224B]
 2832              	@ main.c:1022: 			byte <<= 1;
 2833 00f2 4000     		lsls	r0, r0, #1	@ tmp179, byte,
 2834 00f4 013A     		subs	r2, r2, #1	@ tmp184, ivtmp_7,
 2835 00f6 C0B2     		uxtb	r0, r0	@ byte, tmp179
 2836              	@ main.c:1024: 			if (wMISO)		byte |= 0x01;
 2837 00f8 09B1     		cbz	r1, .L213	@ _51,
 2838 00fa 40F00100 		orr	r0, r0, #1	@ byte, byte,
 2839              	.L213:
 2840              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2841 00fe 12F0FF02 		ands	r2, r2, #255	@ ivtmp_7, tmp184,
 2842              	@ main.c:1025: 			wSCK = 1; /* a slave latches input data bit */
 2843 0102 2560     		str	r5, [r4]	@ tmp203, MEM[(volatile long unsigned int *)1109459348B]
 2844              	@ main.c:1016: 		for(counter = 8; counter; counter--)
 2845 0104 EDD1     		bne	.L214	@,
 2846              	@ main.c:1052: 					for(u08 i=0;i<64;i++){
 2847 0106 0BF1010B 		add	fp, fp, #1	@ tmp185, i,
 2848              	@ main.c:1053: 						hex2uart(softSPI_r(i),2);
 2849 010a 0221     		movs	r1, #2	@,
 2850              	@ main.c:1052: 					for(u08 i=0;i<64;i++){
ARM GAS  /tmp/ccrMssCc.s 			page 51


 2851 010c 5FFA8BFB 		uxtb	fp, fp	@ i, tmp185
 2852              	@ main.c:1053: 						hex2uart(softSPI_r(i),2);
 2853 0110 FFF7FEFF 		bl	hex2uart	@
 2854              	@ main.c:1052: 					for(u08 i=0;i<64;i++){
 2855 0114 BBF1400F 		cmp	fp, #64	@ i,
 2856 0118 E0D1     		bne	.L210	@,
 2857              	@ main.c:1055: 					wCS = 1;
 2858 011a 094B     		ldr	r3, .L229+24	@ tmp218,
 2859              	@ main.c:1056: 					UaPutK("\r\n");
 2860 011c 0F48     		ldr	r0, .L229+52	@,
 2861              	@ main.c:1055: 					wCS = 1;
 2862 011e 1D60     		str	r5, [r3]	@ tmp203, MEM[(volatile long unsigned int *)1109459344B]
 2863              	@ main.c:1056: 					UaPutK("\r\n");
 2864 0120 FFF7FEFF 		bl	UaPutK	@
 2865              	@ main.c:1058: 					break;
 2866 0124 95E7     		b	.L209	@
 2867              	.L230:
 2868 0126 00BF     		.align	2
 2869              	.L229:
 2870 0128 00080140 		.word	1073809408
 2871 012c 9C012142 		.word	1109459356
 2872 0130 94012142 		.word	1109459348
 2873 0134 CC000000 		.word	.LC46
 2874 0138 00000000 		.word	.LC39
 2875 013c 0C000000 		.word	.LC40
 2876 0140 90012142 		.word	1109459344
 2877 0144 18000000 		.word	.LC41
 2878 0148 1C000000 		.word	.LC42
 2879 014c 54000000 		.word	.LC43
 2880 0150 74000000 		.word	.LC44
 2881 0154 94000000 		.word	.LC45
 2882 0158 18012142 		.word	1109459224
 2883 015c 04000000 		.word	.LC13
 2884 0160 00000000 		.word	p_Fifo1
 2885              		.size	ili9486, .-ili9486
 2886              		.section	.text.wiznet5500,"ax",%progbits
 2887              		.align	1
 2888              		.p2align 2,,3
 2889              		.global	wiznet5500
 2890              		.syntax unified
 2891              		.thumb
 2892              		.thumb_func
 2893              		.fpu softvfp
 2894              		.type	wiznet5500, %function
 2895              	wiznet5500:
 2896              		@ args = 0, pretend = 0, frame = 8
 2897              		@ frame_needed = 0, uses_anonymous_args = 0
 2898 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 2899 0004 82B0     		sub	sp, sp, #8	@,,
 2900              	@ main.c:1079: 	SPI1_init_();
 2901 0006 FFF7FEFF 		bl	SPI1_init_	@
 2902              	@ main.c:1081: 	GPIOB->CRL = (GPIOB->CRL & 0xffffff0f) | 0x00000010;	
 2903 000a 1A49     		ldr	r1, .L238	@ tmp130,
 2904              	@ main.c:1082: 	GPIOC->CRH = (GPIOC->CRH & 0xf0ffffff) | 0x01000000;	// LED Blue  PC14
 2905 000c 1A4A     		ldr	r2, .L238+4	@ tmp133,
 2906              	@ main.c:1081: 	GPIOB->CRL = (GPIOB->CRL & 0xffffff0f) | 0x00000010;	
 2907 000e 0B68     		ldr	r3, [r1]	@ _2, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
ARM GAS  /tmp/ccrMssCc.s 			page 52


 2908              	@ main.c:1155: 			if(flag_9);
 2909 0010 1A4F     		ldr	r7, .L238+8	@ tmp137,
 2910              	@ main.c:1081: 	GPIOB->CRL = (GPIOB->CRL & 0xffffff0f) | 0x00000010;	
 2911 0012 23F0F003 		bic	r3, r3, #240	@ tmp131, _2,
 2912 0016 43F01003 		orr	r3, r3, #16	@ _5, tmp131,
 2913 001a 0B60     		str	r3, [r1]	@ _5, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 2914              	@ main.c:1082: 	GPIOC->CRH = (GPIOC->CRH & 0xf0ffffff) | 0x01000000;	// LED Blue  PC14
 2915 001c 5368     		ldr	r3, [r2, #4]	@ _7, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 2916              	@ main.c:1155: 			if(flag_9);
 2917 001e 7F01     		lsls	r7, r7, #5	@ tmp138, tmp137,
 2918              	@ main.c:1082: 	GPIOC->CRH = (GPIOC->CRH & 0xf0ffffff) | 0x01000000;	// LED Blue  PC14
 2919 0020 23F07063 		bic	r3, r3, #251658240	@ tmp134, _7,
 2920 0024 43F08073 		orr	r3, r3, #16777216	@ _9, tmp134,
 2921 0028 5360     		str	r3, [r2, #4]	@ _9, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 2922              	@ main.c:1084: 	DHT_Init();
 2923 002a FFF7FEFF 		bl	DHT_Init	@
 2924 002e 144C     		ldr	r4, .L238+12	@ tmp150,
 2925              	@ main.c:1139: 		if(STCLK_MS*1000  < (trg0 - SysTick->VAL)){
 2926 0030 144D     		ldr	r5, .L238+16	@ tmp142,
 2927              	@ main.c:1142: 			if (!(DHT_read( &AMh, &AMt,1,&AM2302_pin)) ){		// AM2302 read T & H
 2928 0032 DFF85C80 		ldr	r8, .L238+28	@ tmp153,
 2929              	@ main.c:1145: 			LED^=1;
 2930 0036 144E     		ldr	r6, .L238+20	@ tmp148,
 2931              	@ main.c:1155: 			if(flag_9);
 2932 0038 2437     		adds	r7, r7, #36	@ _20, tmp138,
 2933              	.L233:
 2934              	@ main.c:1139: 		if(STCLK_MS*1000  < (trg0 - SysTick->VAL)){
 2935 003a 1449     		ldr	r1, .L238+24	@ tmp140,
 2936              	.L232:
 2937 003c 2368     		ldr	r3, [r4]	@ trg0.107_10, trg0
 2938 003e 8A68     		ldr	r2, [r1, #8]	@ _11, MEM[(struct SysTick_Type *)3758153744B].VAL
 2939 0040 9B1A     		subs	r3, r3, r2	@ tmp141, trg0.107_10, _11
 2940 0042 AB42     		cmp	r3, r5	@ tmp141, tmp142
 2941 0044 FAD9     		bls	.L232	@,
 2942              	@ main.c:1140: 			trg0 = SysTick->VAL;
 2943 0046 D1F808C0 		ldr	ip, [r1, #8]	@ _13, MEM[(struct SysTick_Type *)3758153744B].VAL
 2944              	@ main.c:1142: 			if (!(DHT_read( &AMh, &AMt,1,&AM2302_pin)) ){		// AM2302 read T & H
 2945 004a 4346     		mov	r3, r8	@, tmp153
 2946 004c 0122     		movs	r2, #1	@,
 2947 004e 0DF10601 		add	r1, sp, #6	@ tmp154,,
 2948 0052 01A8     		add	r0, sp, #4	@ tmp155,,
 2949              	@ main.c:1140: 			trg0 = SysTick->VAL;
 2950 0054 C4F800C0 		str	ip, [r4]	@ _13, trg0
 2951              	@ main.c:1142: 			if (!(DHT_read( &AMh, &AMt,1,&AM2302_pin)) ){		// AM2302 read T & H
 2952 0058 FFF7FEFF 		bl	DHT_read	@
 2953              	@ main.c:1145: 			LED^=1;
 2954 005c 3368     		ldr	r3, [r6]	@ _14, MEM[(volatile long unsigned int *)1109524916B]
 2955 005e 83F00103 		eor	r3, r3, #1	@ _15, _14,
 2956 0062 3360     		str	r3, [r6]	@ _15, MEM[(volatile long unsigned int *)1109524916B]
 2957              	@ main.c:1155: 			if(flag_9);
 2958 0064 3B68     		ldr	r3, [r7]	@ _21, *_20
 2959 0066 002B     		cmp	r3, #0	@ _21
 2960 0068 E7D1     		bne	.L233	@
 2961              	@ main.c:1159: 			flag_9 ^=1;
 2962 006a 3B68     		ldr	r3, [r7]	@ _22, *_20
 2963 006c 83F00103 		eor	r3, r3, #1	@ _23, _22,
 2964 0070 3B60     		str	r3, [r7]	@ _23, *_20
ARM GAS  /tmp/ccrMssCc.s 			page 53


 2965 0072 E2E7     		b	.L233	@
 2966              	.L239:
 2967              		.align	2
 2968              	.L238:
 2969 0074 000C0140 		.word	1073810432
 2970 0078 00100140 		.word	1073811456
 2971 007c 00001001 		.word	.LANCHOR17+17825792
 2972 0080 00000000 		.word	trg0
 2973 0084 40548900 		.word	9000000
 2974 0088 B4012242 		.word	1109524916
 2975 008c 10E000E0 		.word	-536813552
 2976 0090 3C012142 		.word	1109459260
 2977              		.size	wiznet5500, .-wiznet5500
 2978              		.section	.text.uv_meter,"ax",%progbits
 2979              		.align	1
 2980              		.p2align 2,,3
 2981              		.global	uv_meter
 2982              		.syntax unified
 2983              		.thumb
 2984              		.thumb_func
 2985              		.fpu softvfp
 2986              		.type	uv_meter, %function
 2987              	uv_meter:
 2988              		@ args = 0, pretend = 0, frame = 264
 2989              		@ frame_needed = 0, uses_anonymous_args = 0
 2990 0000 F0B5     		push	{r4, r5, r6, r7, lr}	@
 2991              	@ main.c:1173: 		PB10_o = 1;
 2992 0002 0124     		movs	r4, #1	@ tmp126,
 2993              	@ main.c:1171: 		GPIOA->CRL = (GPIOA->CRL & 0x000fffff) | 0xaa000000; // ADC12_IN5		
 2994 0004 1C4A     		ldr	r2, .L249	@ tmp121,
 2995              	@ main.c:1173: 		PB10_o = 1;
 2996 0006 1D48     		ldr	r0, .L249+4	@ tmp125,
 2997              	@ main.c:1171: 		GPIOA->CRL = (GPIOA->CRL & 0x000fffff) | 0xaa000000; // ADC12_IN5		
 2998 0008 1368     		ldr	r3, [r2]	@ _2, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 2999              	@ main.c:1174: 		LED = 1;
 3000 000a 1D49     		ldr	r1, .L249+8	@ tmp127,
 3001              	@ main.c:1171: 		GPIOA->CRL = (GPIOA->CRL & 0x000fffff) | 0xaa000000; // ADC12_IN5		
 3002 000c C3F31303 		ubfx	r3, r3, #0, #20	@ tmp122, _2,,
 3003 0010 43F02A43 		orr	r3, r3, #-1442840576	@ _4, tmp122,
 3004 0014 1360     		str	r3, [r2]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 3005              	@ main.c:1166: void uv_meter(void)			{
 3006 0016 C3B0     		sub	sp, sp, #268	@,,
 3007              	@ main.c:1173: 		PB10_o = 1;
 3008 0018 0460     		str	r4, [r0]	@ tmp126, MEM[(volatile long unsigned int *)1109492136B]
 3009              	@ main.c:1174: 		LED = 1;
 3010 001a 0C60     		str	r4, [r1]	@ tmp126, MEM[(volatile long unsigned int *)1109524916B]
 3011              	@ main.c:1175: 		I2C2_init();
 3012 001c FFF7FEFF 		bl	I2C2_init	@
 3013              	@ main.c:1182: 		ADC1->SQR3 = ( 5<<0*5 );		//(channel<<sequence*5) sequence=0..5   
 3014 0020 0527     		movs	r7, #5	@ tmp140,
 3015              	@ main.c:5311: 		RCC_APB2RSTR_ADC1RST_bb = 0;
 3016 0022 0022     		movs	r2, #0	@ tmp136,
 3017              	@ main.c:1183: 		ADC1->SMPR2 = (4<<5*3 );
 3018 0024 4FF40036 		mov	r6, #131072	@ tmp142,
 3019              	@ main.c:1184: 		ADC1->CR1 = ADC_CR1_SCAN;			// multi channel mode		
 3020 0028 4FF48070 		mov	r0, #256	@ tmp144,
 3021              	@ main.c:5308: 		RCC->APB2ENR   |= RCC_APB2ENR_ADC1EN;	// enable clock for ADC1
ARM GAS  /tmp/ccrMssCc.s 			page 54


 3022 002c 154B     		ldr	r3, .L249+12	@ tmp129,
 3023              	@ main.c:1202: 			b=0;
 3024 002e 1546     		mov	r5, r2	@ tmp153, tmp136
 3025              	@ main.c:5308: 		RCC->APB2ENR   |= RCC_APB2ENR_ADC1EN;	// enable clock for ADC1
 3026 0030 9969     		ldr	r1, [r3, #24]	@ _22, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 3027 0032 41F40071 		orr	r1, r1, #512	@ _23, _22,
 3028 0036 9961     		str	r1, [r3, #24]	@ _23, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 3029              	@ main.c:5309: 		RCC->CFGR 		 |= RCC_CFGR_ADCPRE_DIV4;  // 2/4/6/8 str98
 3030 0038 5968     		ldr	r1, [r3, #4]	@ _24, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 3031 003a 41F48041 		orr	r1, r1, #16384	@ _25, _24,
 3032 003e 5960     		str	r1, [r3, #4]	@ _25, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 3033              	@ main.c:5310: 		RCC_APB2RSTR_ADC1RST_bb = 1;		// Reset ADC1
 3034 0040 1149     		ldr	r1, .L249+16	@ tmp133,
 3035              	@ main.c:1181: 		ADC1->SQR1 = ( 0<<20 	); 		//length and sequence 12..15 conversion 13-16 on channe
 3036 0042 A3F56C43 		sub	r3, r3, #60416	@ tmp137, tmp137,
 3037              	@ main.c:5310: 		RCC_APB2RSTR_ADC1RST_bb = 1;		// Reset ADC1
 3038 0046 0C60     		str	r4, [r1]	@ tmp126, MEM[(volatile long unsigned int *)1111622052B]
 3039              	@ main.c:5311: 		RCC_APB2RSTR_ADC1RST_bb = 0;
 3040 0048 0A60     		str	r2, [r1]	@ tmp136, MEM[(volatile long unsigned int *)1111622052B]
 3041              	@ main.c:1181: 		ADC1->SQR1 = ( 0<<20 	); 		//length and sequence 12..15 conversion 13-16 on channe
 3042 004a DA62     		str	r2, [r3, #44]	@ tmp136, MEM[(struct ADC_TypeDef *)1073816576B].SQR1
 3043              	@ main.c:1182: 		ADC1->SQR3 = ( 5<<0*5 );		//(channel<<sequence*5) sequence=0..5   
 3044 004c 5F63     		str	r7, [r3, #52]	@ tmp140, MEM[(struct ADC_TypeDef *)1073816576B].SQR3
 3045              	@ main.c:1183: 		ADC1->SMPR2 = (4<<5*3 );
 3046 004e 1E61     		str	r6, [r3, #16]	@ tmp142, MEM[(struct ADC_TypeDef *)1073816576B].SMPR2
 3047              	@ main.c:1184: 		ADC1->CR1 = ADC_CR1_SCAN;			// multi channel mode		
 3048 0050 5860     		str	r0, [r3, #4]	@ tmp144, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 3049              	@ main.c:1185: 		ADC1->CR2 |= ADC_CR2_ADON ;		// On ADC
 3050 0052 9A68     		ldr	r2, [r3, #8]	@ _5, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 3051              	@ main.c:1193: 			while(PB0_i==0);
 3052 0054 0D4C     		ldr	r4, .L249+20	@ tmp147,
 3053              	@ main.c:1185: 		ADC1->CR2 |= ADC_CR2_ADON ;		// On ADC
 3054 0056 42F00102 		orr	r2, r2, #1	@ _6, _5,
 3055 005a 9A60     		str	r2, [r3, #8]	@ _6, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 3056              	.L241:
 3057              	@ main.c:1193: 			while(PB0_i==0);
 3058 005c 2368     		ldr	r3, [r4]	@ _7, MEM[(volatile long unsigned int *)1109491968B]
 3059 005e 002B     		cmp	r3, #0	@ _7
 3060 0060 FCD0     		beq	.L241	@
 3061              	@ main.c:1197: 			i2c2_scan(a,&b);
 3062 0062 0DF10701 		add	r1, sp, #7	@ tmp157,,
 3063 0066 02A8     		add	r0, sp, #8	@ tmp158,,
 3064 0068 FFF7FEFF 		bl	i2c2_scan	@
 3065              	.L242:
 3066              	@ main.c:1201: 			while(PB0_i==1);
 3067 006c 2368     		ldr	r3, [r4]	@ _8, MEM[(volatile long unsigned int *)1109491968B]
 3068 006e 012B     		cmp	r3, #1	@ _8,
 3069 0070 FCD0     		beq	.L242	@,
 3070              	@ main.c:1202: 			b=0;
 3071 0072 8DF80750 		strb	r5, [sp, #7]	@ tmp153, b
 3072              	@ main.c:1193: 			while(PB0_i==0);
 3073 0076 F1E7     		b	.L241	@
 3074              	.L250:
 3075              		.align	2
 3076              	.L249:
 3077 0078 00080140 		.word	1073809408
 3078 007c A8812142 		.word	1109492136
ARM GAS  /tmp/ccrMssCc.s 			page 55


 3079 0080 B4012242 		.word	1109524916
 3080 0084 00100240 		.word	1073876992
 3081 0088 A4014242 		.word	1111622052
 3082 008c 00812142 		.word	1109491968
 3083              		.size	uv_meter, .-uv_meter
 3084              		.section	.text.IRQLoraInit,"ax",%progbits
 3085              		.align	1
 3086              		.p2align 2,,3
 3087              		.global	IRQLoraInit
 3088              		.syntax unified
 3089              		.thumb
 3090              		.thumb_func
 3091              		.fpu softvfp
 3092              		.type	IRQLoraInit, %function
 3093              	IRQLoraInit:
 3094              		@ args = 0, pretend = 0, frame = 0
 3095              		@ frame_needed = 0, uses_anonymous_args = 0
 3096              		@ link register save eliminated.
 3097              	@ main.c:1242: 		AFIO->EXTICR[0] = AFIO_EXTICR1_EXTI0_PB;		// Enable interrupt port PA0
 3098 0000 0123     		movs	r3, #1	@ tmp111,
 3099              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3100 0002 4020     		movs	r0, #64	@ tmp119,
 3101              	@ main.c:1233: void IRQLoraInit(void)	{
 3102 0004 10B4     		push	{r4}	@
 3103              	@ main.c:1243: 		EXTI->PR   = EXTI_PR_PR0;			// Clear interupt request EXTI0
 3104 0006 054A     		ldr	r2, .L253	@ tmp112,
 3105              	@ main.c:1242: 		AFIO->EXTICR[0] = AFIO_EXTICR1_EXTI0_PB;		// Enable interrupt port PA0
 3106 0008 054C     		ldr	r4, .L253+4	@ tmp110,
 3107              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3108 000a 0649     		ldr	r1, .L253+8	@ tmp118,
 3109              	@ main.c:1242: 		AFIO->EXTICR[0] = AFIO_EXTICR1_EXTI0_PB;		// Enable interrupt port PA0
 3110 000c A360     		str	r3, [r4, #8]	@ tmp111, MEM[(struct AFIO_TypeDef *)1073807360B].EXTICR
 3111              	@ main.c:1243: 		EXTI->PR   = EXTI_PR_PR0;			// Clear interupt request EXTI0
 3112 000e 5361     		str	r3, [r2, #20]	@ tmp111, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 3113              	@ main.c:1248: 	}
 3114 0010 10BC     		pop	{r4}	@
 3115              	@ main.c:1244: 		EXTI->RTSR 	 = EXTI_RTSR_TR0;
 3116 0012 9360     		str	r3, [r2, #8]	@ tmp111, MEM[(struct EXTI_TypeDef *)1073808384B].RTSR
 3117              	@ main.c:1246: 		EXTI->IMR  =  EXTI_IMR_MR0;		// Interrupt mask register EXTI_IMR
 3118 0014 1360     		str	r3, [r2]	@ tmp111, MEM[(struct EXTI_TypeDef *)1073808384B].IMR
 3119              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3120 0016 0860     		str	r0, [r1]	@ tmp119, MEM[(struct NVIC_Type *)3758153984B].ISER
 3121              	@ main.c:1248: 	}
 3122 0018 7047     		bx	lr	@
 3123              	.L254:
 3124 001a 00BF     		.align	2
 3125              	.L253:
 3126 001c 00040140 		.word	1073808384
 3127 0020 00000140 		.word	1073807360
 3128 0024 00E100E0 		.word	-536813312
 3129              		.size	IRQLoraInit, .-IRQLoraInit
 3130              		.section	.text.LoRaRX,"ax",%progbits
 3131              		.align	1
 3132              		.p2align 2,,3
 3133              		.global	LoRaRX
 3134              		.syntax unified
 3135              		.thumb
ARM GAS  /tmp/ccrMssCc.s 			page 56


 3136              		.thumb_func
 3137              		.fpu softvfp
 3138              		.type	LoRaRX, %function
 3139              	LoRaRX:
 3140              		@ args = 0, pretend = 0, frame = 80
 3141              		@ frame_needed = 0, uses_anonymous_args = 0
 3142 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3143              	@ main.c:1278: 		SX1278_begin(&SX1278_1, SX1278_433MHZ, SX1278_POWER_11DBM, SX1278_LORA_SF_7,SX1278
 3144 0004 0926     		movs	r6, #9	@ tmp180,
 3145 0006 0022     		movs	r2, #0	@,
 3146              	@ main.c:1268: 		GPIOA->CRL = (GPIOA->CRL & 0xfff00000) | 0x00044343;	//   PA2=MOSI, PA1=MISO, PA0=
 3147 0008 4E4C     		ldr	r4, .L265	@ tmp157,
 3148 000a 4F49     		ldr	r1, .L265+4	@ _3,
 3149 000c 2368     		ldr	r3, [r4]	@ _1, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 3150              	@ main.c:1269: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3151 000e 4F48     		ldr	r0, .L265+8	@ tmp162,
 3152              	@ main.c:1268: 		GPIOA->CRL = (GPIOA->CRL & 0xfff00000) | 0x00044343;	//   PA2=MOSI, PA1=MISO, PA0=
 3153 0010 1B0D     		lsrs	r3, r3, #20	@ tmp158, _1,
 3154 0012 1B05     		lsls	r3, r3, #20	@ tmp158, tmp158,
 3155 0014 1943     		orrs	r1, r1, r3	@, _3, _3, tmp158
 3156 0016 2160     		str	r1, [r4]	@ _3, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 3157              	@ main.c:1269: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3158 0018 4368     		ldr	r3, [r0, #4]	@ _4, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3159              	@ main.c:1270: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 2); 
 3160 001a 4D4F     		ldr	r7, .L265+12	@ tmp243,
 3161              	@ main.c:1269: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3162 001c 23F0FF03 		bic	r3, r3, #255	@ tmp163, _4,
 3163              	@ main.c:1249: void LoRaRX(void)				{
 3164 0020 97B0     		sub	sp, sp, #92	@,,
 3165              	@ main.c:1269: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3166 0022 43F03303 		orr	r3, r3, #51	@ _6, tmp163,
 3167              	@ main.c:1271: 		SX1278_hw1.miso = (u32 *)m_BITBAND_PERIPH(&GPIOA->IDR, 1); 
 3168 0026 4B4C     		ldr	r4, .L265+16	@ tmp168,
 3169              	@ main.c:1269: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3170 0028 4360     		str	r3, [r0, #4]	@ _6, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3171              	@ main.c:1277: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3172 002a 4B4D     		ldr	r5, .L265+20	@ tmp177,
 3173              	@ main.c:1278: 		SX1278_begin(&SX1278_1, SX1278_433MHZ, SX1278_POWER_11DBM, SX1278_LORA_SF_7,SX1278
 3174 002c 0096     		str	r6, [sp]	@ tmp180,
 3175              	@ main.c:1272: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 0); 
 3176 002e DFF844E1 		ldr	lr, .L265+48	@ tmp170,
 3177              	@ main.c:1273: 		SX1278_hw1.nss  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 8); 
 3178 0032 DFF844C1 		ldr	ip, .L265+52	@ tmp172,
 3179              	@ main.c:1270: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 2); 
 3180 0036 DFF84481 		ldr	r8, .L265+56	@ tmp166,
 3181              	@ main.c:1274: 		SX1278_hw1.rst  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 9); 
 3182 003a 484E     		ldr	r6, .L265+24	@ tmp174,
 3183              	@ main.c:1271: 		SX1278_hw1.miso = (u32 *)m_BITBAND_PERIPH(&GPIOA->IDR, 1); 
 3184 003c 7C60     		str	r4, [r7, #4]	@ tmp168, SX1278_hw1.miso
 3185              	@ main.c:1275: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 1); 
 3186 003e 04F50044 		add	r4, r4, #32768	@ tmp176, tmp176,
 3187              	@ main.c:1278: 		SX1278_begin(&SX1278_1, SX1278_433MHZ, SX1278_POWER_11DBM, SX1278_LORA_SF_7,SX1278
 3188 0042 1146     		mov	r1, r2	@,
 3189 0044 0123     		movs	r3, #1	@,
 3190              	@ main.c:1274: 		SX1278_hw1.rst  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 9); 
 3191 0046 C7E903C6 		strd	ip, r6, [r7, #12]	@ tmp172, tmp174, tmp243,
 3192              	@ main.c:1278: 		SX1278_begin(&SX1278_1, SX1278_433MHZ, SX1278_POWER_11DBM, SX1278_LORA_SF_7,SX1278
ARM GAS  /tmp/ccrMssCc.s 			page 57


 3193 004a 2846     		mov	r0, r5	@, tmp177
 3194              	@ main.c:1270: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 2); 
 3195 004c C7F80080 		str	r8, [r7]	@ tmp166, SX1278_hw1.mosi
 3196              	@ main.c:1272: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 0); 
 3197 0050 C7F808E0 		str	lr, [r7, #8]	@ tmp170, SX1278_hw1.sck
 3198              	@ main.c:1275: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 1); 
 3199 0054 7C61     		str	r4, [r7, #20]	@ tmp176, SX1278_hw1.dio0
 3200              	@ main.c:1277: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3201 0056 2F60     		str	r7, [r5]	@ tmp243, SX1278_1.hw
 3202              	@ main.c:1278: 		SX1278_begin(&SX1278_1, SX1278_433MHZ, SX1278_POWER_11DBM, SX1278_LORA_SF_7,SX1278
 3203 0058 FFF7FEFF 		bl	SX1278_begin	@
 3204              	@ main.c:1285: 		ret = SX1278_LoRaEntryRx(&SX1278_1, 7, 2000);
 3205 005c 4FF4FA62 		mov	r2, #2000	@,
 3206 0060 2846     		mov	r0, r5	@, tmp177
 3207 0062 0721     		movs	r1, #7	@,
 3208 0064 FFF7FEFF 		bl	SX1278_LoRaEntryRx	@
 3209              	@ main.c:1309: 		flag_10=0;
 3210 0068 0022     		movs	r2, #0	@ tmp187,
 3211              	@ main.c:1341: 				SX1278_LoRaRx(&SX1278_1);  // Odczyt danych do buforów
 3212 006a A946     		mov	r9, r5	@ tmp245, tmp177
 3213              	@ main.c:1302: 		trg1  = SysTick->VAL;
 3214 006c 3C4B     		ldr	r3, .L265+28	@ tmp182,
 3215              	@ main.c:1309: 		flag_10=0;
 3216 006e 3D4C     		ldr	r4, .L265+32	@ tmp185,
 3217              	@ main.c:1399: 					trg1  = SysTick->VAL;
 3218 0070 9A46     		mov	r10, r3	@ tmp247, tmp182
 3219              	@ main.c:1302: 		trg1  = SysTick->VAL;
 3220 0072 3D4E     		ldr	r6, .L265+36	@ tmp242,
 3221 0074 9B68     		ldr	r3, [r3, #8]	@ _7, MEM[(struct SysTick_Type *)3758153744B].VAL
 3222              	@ main.c:1309: 		flag_10=0;
 3223 0076 6401     		lsls	r4, r4, #5	@ tmp186, tmp185,
 3224              	@ main.c:1398: 					LED = 0;
 3225 0078 DFF804B1 		ldr	fp, .L265+60	@ tmp246,
 3226              	@ main.c:1302: 		trg1  = SysTick->VAL;
 3227 007c 3360     		str	r3, [r6]	@ _7, trg1
 3228 007e 05F10A08 		add	r8, r5, #10	@ tmp244, tmp177,
 3229              	@ main.c:1309: 		flag_10=0;
 3230 0082 A262     		str	r2, [r4, #40]	@ tmp187, *_12
 3231 0084 2834     		adds	r4, r4, #40	@ _12, tmp186,
 3232              	.L256:
 3233              	@ main.c:1333: 			if( (flag_10==0) && *SX1278_hw1.dio0==1 )  {
 3234 0086 2568     		ldr	r5, [r4]	@ _25, *_12
 3235 0088 1DB9     		cbnz	r5, .L257	@ _25,
 3236              	@ main.c:1333: 			if( (flag_10==0) && *SX1278_hw1.dio0==1 )  {
 3237 008a 7B69     		ldr	r3, [r7, #20]	@ _26, SX1278_hw1.dio0
 3238 008c 1B68     		ldr	r3, [r3]	@ _27, *_26
 3239 008e 012B     		cmp	r3, #1	@ _27,
 3240 0090 1DD0     		beq	.L264	@,
 3241              	.L257:
 3242              	@ main.c:1404: 			if(flag_10 && (*SX1278_hw1.dio0)==0 ) { flag_10=0; }
 3243 0092 2368     		ldr	r3, [r4]	@ _49, *_12
 3244              	@ main.c:1406: 			if((STCLK_MS*300 < (trg1 - SysTick->VAL)) && LED==0){	
 3245 0094 354A     		ldr	r2, .L265+40	@ tmp235,
 3246              	@ main.c:1404: 			if(flag_10 && (*SX1278_hw1.dio0)==0 ) { flag_10=0; }
 3247 0096 1BB1     		cbz	r3, .L258	@ _49,
 3248              	@ main.c:1404: 			if(flag_10 && (*SX1278_hw1.dio0)==0 ) { flag_10=0; }
 3249 0098 7B69     		ldr	r3, [r7, #20]	@ _50, SX1278_hw1.dio0
ARM GAS  /tmp/ccrMssCc.s 			page 58


 3250 009a 1B68     		ldr	r3, [r3]	@ _51, *_50
 3251 009c 03B9     		cbnz	r3, .L258	@ _51,
 3252              	@ main.c:1404: 			if(flag_10 && (*SX1278_hw1.dio0)==0 ) { flag_10=0; }
 3253 009e 2360     		str	r3, [r4]	@ _51, *_12
 3254              	.L258:
 3255              	@ main.c:1406: 			if((STCLK_MS*300 < (trg1 - SysTick->VAL)) && LED==0){	
 3256 00a0 3368     		ldr	r3, [r6]	@ trg1.119_52, trg1
 3257 00a2 DAF80810 		ldr	r1, [r10, #8]	@ _53, MEM[(struct SysTick_Type *)3758153744B].VAL
 3258 00a6 5B1A     		subs	r3, r3, r1	@ tmp234, trg1.119_52, _53
 3259 00a8 9342     		cmp	r3, r2	@ tmp234, tmp235
 3260 00aa ECD9     		bls	.L256	@,
 3261              	@ main.c:1406: 			if((STCLK_MS*300 < (trg1 - SysTick->VAL)) && LED==0){	
 3262 00ac DBF80030 		ldr	r3, [fp]	@ _55, MEM[(volatile long unsigned int *)1109524916B]
 3263 00b0 002B     		cmp	r3, #0	@ _55
 3264 00b2 E8D1     		bne	.L256	@
 3265              	@ main.c:1409: 				LED = 1;
 3266 00b4 0123     		movs	r3, #1	@ tmp240,
 3267              	@ main.c:1407: 					trg1  = SysTick->VAL;
 3268 00b6 DAF80820 		ldr	r2, [r10, #8]	@ _56, MEM[(struct SysTick_Type *)3758153744B].VAL
 3269 00ba 3260     		str	r2, [r6]	@ _56, trg1
 3270              	@ main.c:1409: 				LED = 1;
 3271 00bc CBF80030 		str	r3, [fp]	@ tmp240, MEM[(volatile long unsigned int *)1109524916B]
 3272              	@ main.c:1333: 			if( (flag_10==0) && *SX1278_hw1.dio0==1 )  {
 3273 00c0 2568     		ldr	r5, [r4]	@ _25, *_12
 3274 00c2 002D     		cmp	r5, #0	@ _25
 3275 00c4 E5D1     		bne	.L257	@
 3276 00c6 7B69     		ldr	r3, [r7, #20]	@ _26, SX1278_hw1.dio0
 3277 00c8 1B68     		ldr	r3, [r3]	@ _27, *_26
 3278 00ca 012B     		cmp	r3, #1	@ _27,
 3279 00cc E1D1     		bne	.L257	@,
 3280              	.L264:
 3281              	@ main.c:1341: 				SX1278_LoRaRx(&SX1278_1);  // Odczyt danych do buforów
 3282 00ce 4846     		mov	r0, r9	@, tmp245
 3283 00d0 0593     		str	r3, [sp, #20]	@ _27, %sfp
 3284 00d2 FFF7FEFF 		bl	SX1278_LoRaRx	@
 3285              	@ main.c:1351: 				prssi = SX1278_SPIRead(&SX1278_1, LR_RegPktRssiValue)-164;
 3286 00d6 1A21     		movs	r1, #26	@,
 3287 00d8 4846     		mov	r0, r9	@, tmp245
 3288 00da FFF7FEFF 		bl	SX1278_SPIRead	@
 3289              	@ main.c:1358: 				memcpy(buf_rx, SX1278_1.rxBuffer, 7);
 3290 00de B8F80420 		ldrh	r2, [r8, #4]	@ unaligned	@ tmp198, MEM[(void *)&SX1278_1 + 10B]
 3291 00e2 D8F80000 		ldr	r0, [r8]	@ unaligned	@, MEM[(void *)&SX1278_1 + 10B]
 3292 00e6 ADF81C20 		strh	r2, [sp, #28]	@ unaligned	@ tmp198, MEM[(void *)&buf_rx]
 3293              	@ main.c:1365: 				Cnt= (s16)(buf_rx[4]+(buf_rx[5]<<8));
 3294 00ea 9DF81D10 		ldrb	r1, [sp, #29]	@ zero_extendqisi2	@ buf_rx, buf_rx
 3295 00ee 9DF81C20 		ldrb	r2, [sp, #28]	@ zero_extendqisi2	@ buf_rx, buf_rx
 3296              	@ main.c:1358: 				memcpy(buf_rx, SX1278_1.rxBuffer, 7);
 3297 00f2 98F806C0 		ldrb	ip, [r8, #6]	@ zero_extendqisi2	@ MEM[(void *)&SX1278_1 + 10B], MEM[(void *)&SX1278_1 + 10B]
 3298              	@ main.c:1365: 				Cnt= (s16)(buf_rx[4]+(buf_rx[5]<<8));
 3299 00f6 02EB0122 		add	r2, r2, r1, lsl #8	@ tmp215, buf_rx, buf_rx,
 3300 00fa 92B2     		uxth	r2, r2	@ Cnt, tmp215
 3301              	@ main.c:1364: 				t2 = (s16)(buf_rx[2]+(buf_rx[3]<<8));
 3302 00fc 0114     		asrs	r1, r0, #16	@ t2,,
 3303              	@ main.c:1358: 				memcpy(buf_rx, SX1278_1.rxBuffer, 7);
 3304 00fe 0690     		str	r0, [sp, #24]	@, MEM[(void *)&buf_rx]
 3305              	@ main.c:1372: 					sint2uart(t1);	//UaPutK("  ");
 3306 0100 00B2     		sxth	r0, r0	@,
ARM GAS  /tmp/ccrMssCc.s 			page 59


 3307              	@ main.c:1358: 				memcpy(buf_rx, SX1278_1.rxBuffer, 7);
 3308 0102 8DF81EC0 		strb	ip, [sp, #30]	@ MEM[(void *)&SX1278_1 + 10B], MEM[(void *)&buf_rx]
 3309              	@ main.c:1365: 				Cnt= (s16)(buf_rx[4]+(buf_rx[5]<<8));
 3310 0106 0392     		str	r2, [sp, #12]	@ Cnt, %sfp
 3311              	@ main.c:1364: 				t2 = (s16)(buf_rx[2]+(buf_rx[3]<<8));
 3312 0108 0491     		str	r1, [sp, #16]	@ t2, %sfp
 3313              	@ main.c:1357: 				buf_rx[7] = 0;
 3314 010a 8DF81F50 		strb	r5, [sp, #31]	@ _25, buf_rx
 3315              	@ main.c:1372: 					sint2uart(t1);	//UaPutK("  ");
 3316 010e FFF7FEFF 		bl	sint2uart	@
 3317              	@ main.c:1373: 					UaPutC(',');					
 3318 0112 2C20     		movs	r0, #44	@,
 3319 0114 FFF7FEFF 		bl	UaPutC	@
 3320              	@ main.c:1374: 					sint2uart(t2);	//UaPutK("  ");
 3321 0118 0499     		ldr	r1, [sp, #16]	@ t2, %sfp
 3322 011a 0846     		mov	r0, r1	@, t2
 3323 011c FFF7FEFF 		bl	sint2uart	@
 3324              	@ main.c:1375: 					UaPutC(',');					
 3325 0120 2C20     		movs	r0, #44	@,
 3326 0122 FFF7FEFF 		bl	UaPutC	@
 3327              	@ main.c:1376: 					sint2uart(Cnt);	//UaPutK("  ");
 3328 0126 039A     		ldr	r2, [sp, #12]	@ Cnt, %sfp
 3329 0128 1046     		mov	r0, r2	@, Cnt
 3330 012a FFF7FEFF 		bl	sint2uart	@
 3331              	@ main.c:1377: 					UaPutS("\n");					
 3332 012e 1048     		ldr	r0, .L265+44	@,
 3333 0130 FFF7FEFF 		bl	UaPutS	@
 3334              	@ main.c:1398: 					LED = 0;
 3335 0134 CBF80050 		str	r5, [fp]	@ _25, MEM[(volatile long unsigned int *)1109524916B]
 3336              	@ main.c:1399: 					trg1  = SysTick->VAL;
 3337 0138 DAF80820 		ldr	r2, [r10, #8]	@ _48, MEM[(struct SysTick_Type *)3758153744B].VAL
 3338              	@ main.c:1401: 				flag_10 = 1;
 3339 013c 059B     		ldr	r3, [sp, #20]	@ _27, %sfp
 3340              	@ main.c:1399: 					trg1  = SysTick->VAL;
 3341 013e 3260     		str	r2, [r6]	@ _48, trg1
 3342              	@ main.c:1401: 				flag_10 = 1;
 3343 0140 2360     		str	r3, [r4]	@ _27, *_12
 3344 0142 A6E7     		b	.L257	@
 3345              	.L266:
 3346              		.align	2
 3347              	.L265:
 3348 0144 00080140 		.word	1073809408
 3349 0148 43430400 		.word	279363
 3350 014c 000C0140 		.word	1073810432
 3351 0150 00000000 		.word	.LANCHOR18
 3352 0154 04012142 		.word	1109459204
 3353 0158 00000000 		.word	.LANCHOR19
 3354 015c A4812142 		.word	1109492132
 3355 0160 10E000E0 		.word	-536813552
 3356 0164 00001001 		.word	.LANCHOR17+17825792
 3357 0168 00000000 		.word	trg1
 3358 016c E0322900 		.word	2700000
 3359 0170 00000000 		.word	.LC47
 3360 0174 80012142 		.word	1109459328
 3361 0178 A0812142 		.word	1109492128
 3362 017c 88012142 		.word	1109459336
 3363 0180 B4012242 		.word	1109524916
ARM GAS  /tmp/ccrMssCc.s 			page 60


 3364              		.size	LoRaRX, .-LoRaRX
 3365              		.section	.text.LoRaRX1,"ax",%progbits
 3366              		.align	1
 3367              		.p2align 2,,3
 3368              		.global	LoRaRX1
 3369              		.syntax unified
 3370              		.thumb
 3371              		.thumb_func
 3372              		.fpu softvfp
 3373              		.type	LoRaRX1, %function
 3374              	LoRaRX1:
 3375              		@ args = 0, pretend = 0, frame = 24
 3376              		@ frame_needed = 0, uses_anonymous_args = 0
 3377              	@ main.c:1443: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3378 0000 0022     		movs	r2, #0	@,
 3379              	@ main.c:1414: void LoRaRX1(void)	{
 3380 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3381              	@ main.c:1424: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3382 0006 3021     		movs	r1, #48	@ tmp169,
 3383 0008 4FF00109 		mov	r9, #1	@ tmp166,
 3384              	@ main.c:1443: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3385 000c 4FF0090A 		mov	r10, #9	@ tmp192,
 3386              	@ main.c:1451: 		flag_9=0;
 3387 0010 1746     		mov	r7, r2	@ tmp197,
 3388              	@ main.c:1424: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3389 0012 DFF89082 		ldr	r8, .L293+108	@ tmp257,
 3390              	@ main.c:1425: 		LED=1;
 3391 0016 884D     		ldr	r5, .L293	@ tmp171,
 3392              	@ main.c:1424: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3393 0018 D8F80030 		ldr	r3, [r8]	@ p_Fifo1.120_1, p_Fifo1
 3394              	@ main.c:1428: 		GPIOB->CRH = (GPIOB->CRH & 0x0000ff00) | 0x43430033;	//   
 3395 001c 8748     		ldr	r0, .L293+4	@ tmp173,
 3396              	@ main.c:1424: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3397 001e A3F80490 		strh	r9, [r3, #4]	@ movhi	@ tmp166, p_Fifo1.120_1->rct
 3398 0022 A3F80290 		strh	r9, [r3, #2]	@ movhi	@ tmp166, p_Fifo1.120_1->rwi
 3399 0026 9971     		strb	r1, [r3, #6]	@ tmp169, p_Fifo1.120_1->rbuf
 3400              	@ main.c:1425: 		LED=1;
 3401 0028 C5F80090 		str	r9, [r5]	@ tmp166, MEM[(volatile long unsigned int *)1109524916B]
 3402              	@ main.c:1428: 		GPIOB->CRH = (GPIOB->CRH & 0x0000ff00) | 0x43430033;	//   
 3403 002c 4168     		ldr	r1, [r0, #4]	@ _6, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3404 002e 844B     		ldr	r3, .L293+8	@ _9,
 3405              	@ main.c:1429: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 12); 
 3406 0030 844E     		ldr	r6, .L293+12	@ tmp254,
 3407              	@ main.c:1428: 		GPIOB->CRH = (GPIOB->CRH & 0x0000ff00) | 0x43430033;	//   
 3408 0032 01F47F41 		and	r1, r1, #65280	@ tmp174, _6,
 3409              	@ main.c:1429: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 12); 
 3410 0036 DFF870C2 		ldr	ip, .L293+112	@ tmp178,
 3411              	@ main.c:1428: 		GPIOB->CRH = (GPIOB->CRH & 0x0000ff00) | 0x43430033;	//   
 3412 003a 0B43     		orrs	r3, r3, r1	@, _9, _9, tmp174
 3413              	@ main.c:1430: 		SX1278_hw1.miso = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 13); 
 3414 003c DFF86CE2 		ldr	lr, .L293+116	@ tmp180,
 3415              	@ main.c:1428: 		GPIOB->CRH = (GPIOB->CRH & 0x0000ff00) | 0x43430033;	//   
 3416 0040 4360     		str	r3, [r0, #4]	@ _9, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3417              	@ main.c:1442: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3418 0042 814C     		ldr	r4, .L293+16	@ tmp255,
 3419              	@ main.c:1429: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 12); 
 3420 0044 C6F800C0 		str	ip, [r6]	@ tmp178, SX1278_hw1.mosi
ARM GAS  /tmp/ccrMssCc.s 			page 61


 3421              	@ main.c:1431: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 14); 
 3422 0048 0CF1080C 		add	ip, ip, #8	@ tmp182, tmp182,
 3423              	@ main.c:1414: void LoRaRX1(void)	{
 3424 004c 89B0     		sub	sp, sp, #36	@,,
 3425              	@ main.c:1431: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 14); 
 3426 004e C6E901EC 		strd	lr, ip, [r6, #4]	@ tmp180, tmp182, tmp254,
 3427              	@ main.c:1432: 		SX1278_hw1.nss  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 8); 
 3428 0052 0EF16C0E 		add	lr, lr, #108	@ tmp184, tmp184,
 3429              	@ main.c:1433: 		SX1278_hw1.rst  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 9); 
 3430 0056 ACF1140C 		sub	ip, ip, #20	@ tmp186, tmp186,
 3431 005a C6E903EC 		strd	lr, ip, [r6, #12]	@ tmp184, tmp186, tmp254,
 3432              	@ main.c:1443: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3433 005e 4B46     		mov	r3, r9	@, tmp166
 3434              	@ main.c:1434: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 15); 
 3435 0060 ACF1680C 		sub	ip, ip, #104	@ tmp188, tmp188,
 3436              	@ main.c:1443: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3437 0064 1146     		mov	r1, r2	@,
 3438 0066 CDF800A0 		str	r10, [sp]	@ tmp192,
 3439 006a 2046     		mov	r0, r4	@, tmp255
 3440              	@ main.c:1434: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 15); 
 3441 006c C6F814C0 		str	ip, [r6, #20]	@ tmp188, SX1278_hw1.dio0
 3442              	@ main.c:1543: 					LED ^= 1;
 3443 0070 0495     		str	r5, [sp, #16]	@ tmp171, %sfp
 3444              	@ main.c:1442: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3445 0072 2660     		str	r6, [r4]	@ tmp254, SX1278_1.hw
 3446              	@ main.c:1443: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3447 0074 FFF7FEFF 		bl	SX1278_begin	@
 3448              	@ main.c:1444: 		SX1278_LoRaEntryRx(&SX1278_1, 64, 2000);
 3449 0078 4FF4FA62 		mov	r2, #2000	@,
 3450 007c 4021     		movs	r1, #64	@,
 3451 007e 2046     		mov	r0, r4	@, tmp255
 3452 0080 FFF7FEFF 		bl	SX1278_LoRaEntryRx	@
 3453              	@ main.c:1451: 		flag_9=0;
 3454 0084 714B     		ldr	r3, .L293+20	@ tmp195,
 3455              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 3456 0086 724A     		ldr	r2, .L293+24	@ tmp198,
 3457              	@ main.c:1451: 		flag_9=0;
 3458 0088 5B01     		lsls	r3, r3, #5	@ tmp196, tmp195,
 3459 008a 5F62     		str	r7, [r3, #36]	@ tmp197, *_14
 3460              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 3461 008c 9168     		ldr	r1, [r2, #8]	@ _126, MEM[(struct SysTick_Type *)3758153744B].VAL
 3462 008e 714B     		ldr	r3, .L293+28	@ tmp199,
 3463              	@ main.c:1455: 		UaPutK(" Time=");		uint2uart(tim/TIM_US);			
 3464 0090 7148     		ldr	r0, .L293+32	@,
 3465              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 3466 0092 1960     		str	r1, [r3]	@ _126, Timt
 3467              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 3468 0094 1D68     		ldr	r5, [r3]	@ Timt.84_123, Timt
 3469 0096 9368     		ldr	r3, [r2, #8]	@ _124, MEM[(struct SysTick_Type *)3758153744B].VAL
 3470 0098 ED1A     		subs	r5, r5, r3	@ _125, Timt.84_123, _124
 3471 009a 0795     		str	r5, [sp, #28]	@ _125, MEM[(volatile u32 *)&tim]
 3472              	@ main.c:1455: 		UaPutK(" Time=");		uint2uart(tim/TIM_US);			
 3473 009c FFF7FEFF 		bl	UaPutK	@
 3474 00a0 6E48     		ldr	r0, .L293+36	@ tmp205,
 3475              	@ main.c:1439: 		sx[3]=SX1278_LORA_BW_500KHZ;
 3476 00a2 CDF80CA0 		str	r10, [sp, #12]	@ tmp192, %sfp
 3477              	@ main.c:1455: 		UaPutK(" Time=");		uint2uart(tim/TIM_US);			
ARM GAS  /tmp/ccrMssCc.s 			page 62


 3478 00a6 A0FB0530 		umull	r3, r0, r0, r5	@ tmp267, tmp204, tmp205, _125
 3479 00aa 20FA09F0 		lsr	r0, r0, r9	@, tmp204,
 3480 00ae FFF7FEFF 		bl	uint2uart	@
 3481              	@ main.c:1440: 		sx[4]=10;
 3482 00b2 0A23     		movs	r3, #10	@ sx$4,
 3483              	@ main.c:1437: 		sx[1]=SX1278_POWER_11DBM;
 3484 00b4 BA46     		mov	r10, r7	@ sx$1, tmp197
 3485 00b6 6A4D     		ldr	r5, .L293+40	@ tmp253,
 3486              	@ main.c:1548: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){	
 3487 00b8 6A4F     		ldr	r7, .L293+44	@ tmp250,
 3488              	@ main.c:1440: 		sx[4]=10;
 3489 00ba 0593     		str	r3, [sp, #20]	@ sx$4, %sfp
 3490              	.L268:
 3491              	@ main.c:1463: 			if(p_Fifo1->rct){
 3492 00bc D8F80030 		ldr	r3, [r8]	@ p_Fifo1.126_16, p_Fifo1
 3493 00c0 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.126_16->rct
 3494 00c2 9BB2     		uxth	r3, r3	@ _17, p_Fifo1.126_16->rct
 3495 00c4 8BB9     		cbnz	r3, .L291	@ _17,
 3496              	.L269:
 3497              	@ main.c:1519: 			if( *SX1278_hw1.dio0 ){
 3498 00c6 7369     		ldr	r3, [r6, #20]	@ _34, SX1278_hw1.dio0
 3499 00c8 1B68     		ldr	r3, [r3]	@ _35, *_34
 3500 00ca 002B     		cmp	r3, #0	@ _35
 3501 00cc 43D1     		bne	.L292	@
 3502              	.L280:
 3503              	@ main.c:1548: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){	
 3504 00ce 604A     		ldr	r2, .L293+24	@ tmp248,
 3505 00d0 2B68     		ldr	r3, [r5]	@ trg0.129_45, trg0
 3506 00d2 9168     		ldr	r1, [r2, #8]	@ _47, MEM[(struct SysTick_Type *)3758153744B].VAL
 3507 00d4 5B1A     		subs	r3, r3, r1	@ tmp249, trg0.129_45, _47
 3508 00d6 BB42     		cmp	r3, r7	@ tmp249, tmp250
 3509 00d8 F0D9     		bls	.L268	@,
 3510              	@ main.c:1549: 				trg0  = SysTick->VAL;	
 3511 00da 9368     		ldr	r3, [r2, #8]	@ _50, MEM[(struct SysTick_Type *)3758153744B].VAL
 3512 00dc 2B60     		str	r3, [r5]	@ _50, trg0
 3513              	@ main.c:1463: 			if(p_Fifo1->rct){
 3514 00de D8F80030 		ldr	r3, [r8]	@ p_Fifo1.126_16, p_Fifo1
 3515 00e2 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.126_16->rct
 3516 00e4 9BB2     		uxth	r3, r3	@ _17, p_Fifo1.126_16->rct
 3517 00e6 002B     		cmp	r3, #0	@ _17
 3518 00e8 EDD0     		beq	.L269	@
 3519              	.L291:
 3520              	@ main.c:1464: 				UART_getChar( (char*)&swh);
 3521 00ea 0DF11B00 		add	r0, sp, #27	@ tmp271,,
 3522 00ee FFF7FEFF 		bl	UART_getChar	@
 3523              	@ main.c:1466: 				switch (swh)	{
 3524 00f2 9DF81B30 		ldrb	r3, [sp, #27]	@ zero_extendqisi2	@ swh, swh
 3525 00f6 623B     		subs	r3, r3, #98	@ tmp211, swh,
 3526 00f8 112B     		cmp	r3, #17	@ tmp211,
 3527 00fa 17D8     		bhi	.L270	@
 3528 00fc DFE803F0 		tbb	[pc, r3]	@ tmp211
 3529              	.L272:
 3530 0100 53       		.byte	(.L271-.L272)/2
 3531 0101 16       		.byte	(.L270-.L272)/2
 3532 0102 45       		.byte	(.L273-.L272)/2
 3533 0103 16       		.byte	(.L270-.L272)/2
 3534 0104 16       		.byte	(.L270-.L272)/2
ARM GAS  /tmp/ccrMssCc.s 			page 63


 3535 0105 16       		.byte	(.L270-.L272)/2
 3536 0106 16       		.byte	(.L270-.L272)/2
 3537 0107 16       		.byte	(.L270-.L272)/2
 3538 0108 16       		.byte	(.L270-.L272)/2
 3539 0109 16       		.byte	(.L270-.L272)/2
 3540 010a 16       		.byte	(.L270-.L272)/2
 3541 010b 16       		.byte	(.L270-.L272)/2
 3542 010c 16       		.byte	(.L270-.L272)/2
 3543 010d 16       		.byte	(.L270-.L272)/2
 3544 010e 74       		.byte	(.L274-.L272)/2
 3545 010f 61       		.byte	(.L275-.L272)/2
 3546 0110 82       		.byte	(.L276-.L272)/2
 3547 0111 09       		.byte	(.L277-.L272)/2
 3548              		.p2align 1
 3549              	.L277:
 3550              	@ main.c:1490: 					UaPutK("\r\n 0-6("); uint2uart(sx[2]);UaPutK(") SF=");					
 3551 0112 5548     		ldr	r0, .L293+48	@,
 3552 0114 FFF7FEFF 		bl	UaPutK	@
 3553 0118 4846     		mov	r0, r9	@, sx$2
 3554 011a FFF7FEFF 		bl	uint2uart	@
 3555 011e 5348     		ldr	r0, .L293+52	@,
 3556 0120 FFF7FEFF 		bl	UaPutK	@
 3557              	@ main.c:1491: 					sx[2] = UART_getNum();					
 3558 0124 FFF7FEFF 		bl	UART_getNum	@
 3559 0128 5FFA80F9 		uxtb	r9, r0	@ sx$2,
 3560              	.L270:
 3561              	@ main.c:1506: 				SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3562 012c 039B     		ldr	r3, [sp, #12]	@ sx$3, %sfp
 3563 012e 5246     		mov	r2, r10	@, sx$1
 3564 0130 0093     		str	r3, [sp]	@ sx$3,
 3565 0132 0021     		movs	r1, #0	@,
 3566 0134 4B46     		mov	r3, r9	@, sx$2
 3567 0136 2046     		mov	r0, r4	@, tmp260
 3568 0138 FFF7FEFF 		bl	SX1278_begin	@
 3569              	@ main.c:1507: 				SX1278_LoRaEntryRx(&SX1278_1, 64, 2000);
 3570 013c 4FF4FA62 		mov	r2, #2000	@,
 3571 0140 4021     		movs	r1, #64	@,
 3572 0142 2046     		mov	r0, r4	@, tmp260
 3573 0144 FFF7FEFF 		bl	SX1278_LoRaEntryRx	@
 3574              	@ main.c:1509: 				UaPutK("\r\n Menu > ");
 3575 0148 4948     		ldr	r0, .L293+56	@,
 3576 014a FFF7FEFF 		bl	UaPutK	@
 3577              	@ main.c:1519: 			if( *SX1278_hw1.dio0 ){
 3578 014e 7369     		ldr	r3, [r6, #20]	@ _34, SX1278_hw1.dio0
 3579 0150 1B68     		ldr	r3, [r3]	@ _35, *_34
 3580 0152 002B     		cmp	r3, #0	@ _35
 3581 0154 BBD0     		beq	.L280	@
 3582              	.L292:
 3583              	@ main.c:1520: 				 message_length = SX1278_LoRaRxPacket(&SX1278_1);
 3584 0156 2046     		mov	r0, r4	@, tmp260
 3585 0158 FFF7FEFF 		bl	SX1278_LoRaRxPacket	@
 3586              	@ main.c:1521: 				if(message_length){
 3587 015c 0028     		cmp	r0, #0	@
 3588 015e B6D0     		beq	.L280	@
 3589              	@ main.c:1523: 					SX1278_read(&SX1278_1, (uint8_t *) buf_rx);
 3590 0160 4449     		ldr	r1, .L293+60	@,
 3591 0162 2046     		mov	r0, r4	@, tmp260
ARM GAS  /tmp/ccrMssCc.s 			page 64


 3592 0164 FFF7FEFF 		bl	SX1278_read	@
 3593              	@ main.c:1524: 					UaPutK("\r\n prssi->");	
 3594 0168 4348     		ldr	r0, .L293+64	@,
 3595 016a FFF7FEFF 		bl	UaPutK	@
 3596              	@ main.c:1525: 					prssi = SX1278_SPIRead(&SX1278_1, LR_RegPktRssiValue)-164;
 3597 016e 1A21     		movs	r1, #26	@,
 3598 0170 2046     		mov	r0, r4	@, tmp260
 3599 0172 FFF7FEFF 		bl	SX1278_SPIRead	@
 3600 0176 A438     		subs	r0, r0, #164	@ tmp243,,
 3601              	@ main.c:1526: 					sint2uart(prssi);
 3602 0178 00B2     		sxth	r0, r0	@, tmp243
 3603 017a FFF7FEFF 		bl	sint2uart	@
 3604              	@ main.c:1543: 					LED ^= 1;
 3605 017e 049A     		ldr	r2, [sp, #16]	@ tmp261, %sfp
 3606 0180 1368     		ldr	r3, [r2]	@ _42, MEM[(volatile long unsigned int *)1109524916B]
 3607 0182 83F00103 		eor	r3, r3, #1	@ _44, _42,
 3608 0186 1360     		str	r3, [r2]	@ _44, MEM[(volatile long unsigned int *)1109524916B]
 3609 0188 A1E7     		b	.L280	@
 3610              	.L273:
 3611              	@ main.c:1498: 					UaPutK("\r\n sek("); uint2uart(sx[4]);UaPutK(") Delay=");					
 3612 018a 3C48     		ldr	r0, .L293+68	@,
 3613 018c FFF7FEFF 		bl	UaPutK	@
 3614 0190 0598     		ldr	r0, [sp, #20]	@, %sfp
 3615 0192 FFF7FEFF 		bl	uint2uart	@
 3616 0196 3A48     		ldr	r0, .L293+72	@,
 3617 0198 FFF7FEFF 		bl	UaPutK	@
 3618              	@ main.c:1499: 					sx[4] = UART_getNum();					
 3619 019c FFF7FEFF 		bl	UART_getNum	@
 3620 01a0 C3B2     		uxtb	r3, r0	@ sx$4,
 3621 01a2 0593     		str	r3, [sp, #20]	@ sx$4, %sfp
 3622              	@ main.c:1500: 					break;
 3623 01a4 C2E7     		b	.L270	@
 3624              	.L271:
 3625              	@ main.c:1494: 					UaPutK("\r\n 0-9("); uint2uart(sx[3]);UaPutK(") BW=");					
 3626 01a6 3748     		ldr	r0, .L293+76	@,
 3627 01a8 FFF7FEFF 		bl	UaPutK	@
 3628 01ac 0398     		ldr	r0, [sp, #12]	@, %sfp
 3629 01ae FFF7FEFF 		bl	uint2uart	@
 3630 01b2 3548     		ldr	r0, .L293+80	@,
 3631 01b4 FFF7FEFF 		bl	UaPutK	@
 3632              	@ main.c:1495: 					sx[3] = UART_getNum();					
 3633 01b8 FFF7FEFF 		bl	UART_getNum	@
 3634 01bc C3B2     		uxtb	r3, r0	@ sx$3,
 3635 01be 0393     		str	r3, [sp, #12]	@ sx$3, %sfp
 3636              	@ main.c:1496: 					break;
 3637 01c0 B4E7     		b	.L270	@
 3638              	.L275:
 3639              	@ main.c:1471: 					UaPutK("\r\n");
 3640 01c2 3248     		ldr	r0, .L293+84	@,
 3641 01c4 FFF7FEFF 		bl	UaPutK	@
 3642 01c8 4FF0000B 		mov	fp, #0	@ ivtmp.481,
 3643              	.L278:
 3644              	@ main.c:1473: 						dat = SX1278_SPIRead(&SX1278_1, n);
 3645 01cc 5FFA8BF1 		uxtb	r1, fp	@, ivtmp.481
 3646 01d0 2046     		mov	r0, r4	@, tmp260
 3647 01d2 FFF7FEFF 		bl	SX1278_SPIRead	@
 3648 01d6 0BF1010B 		add	fp, fp, #1	@ ivtmp.481, ivtmp.481,
ARM GAS  /tmp/ccrMssCc.s 			page 65


 3649              	@ main.c:1474: 						hex2uart(dat,2);
 3650 01da 0221     		movs	r1, #2	@,
 3651 01dc FFF7FEFF 		bl	hex2uart	@
 3652              	@ main.c:1472: 					for (u08 n=0;n<0x14;n++){
 3653 01e0 BBF1140F 		cmp	fp, #20	@ ivtmp.481,
 3654 01e4 F2D1     		bne	.L278	@,
 3655 01e6 A1E7     		b	.L270	@
 3656              	.L274:
 3657              	@ main.c:1486: 					UaPutK("\r\n 0-3("); uint2uart(sx[1]);UaPutK(") POWER=");					
 3658 01e8 2948     		ldr	r0, .L293+88	@,
 3659 01ea FFF7FEFF 		bl	UaPutK	@
 3660 01ee 5046     		mov	r0, r10	@, sx$1
 3661 01f0 FFF7FEFF 		bl	uint2uart	@
 3662 01f4 2748     		ldr	r0, .L293+92	@,
 3663 01f6 FFF7FEFF 		bl	UaPutK	@
 3664              	@ main.c:1487: 					sx[1] = UART_getNum();					
 3665 01fa FFF7FEFF 		bl	UART_getNum	@
 3666 01fe 5FFA80FA 		uxtb	r10, r0	@ sx$1,
 3667              	@ main.c:1488: 					break;
 3668 0202 93E7     		b	.L270	@
 3669              	.L276:
 3670              	@ main.c:1479: 					UaPutK("\r\n Read Reg1=0x");	reg=UART_getHex();
 3671 0204 2448     		ldr	r0, .L293+96	@,
 3672 0206 FFF7FEFF 		bl	UaPutK	@
 3673 020a FFF7FEFF 		bl	UART_getHex	@
 3674 020e 8346     		mov	fp, r0	@ _20,
 3675              	@ main.c:1480: 					UaPutK(" Reg1 0x");						hex2uart(reg,2);
 3676 0210 2248     		ldr	r0, .L293+100	@,
 3677 0212 5FFA8BFB 		uxtb	fp, fp	@ _20, _20
 3678 0216 FFF7FEFF 		bl	UaPutK	@
 3679 021a 5846     		mov	r0, fp	@, _20
 3680 021c 0221     		movs	r1, #2	@,
 3681 021e FFF7FEFF 		bl	hex2uart	@
 3682              	@ main.c:1481: 					UaPutK("= 0x");						
 3683 0222 1F48     		ldr	r0, .L293+104	@,
 3684 0224 FFF7FEFF 		bl	UaPutK	@
 3685              	@ main.c:1482: 					dat = SX1278_SPIRead(&SX1278_1, reg);
 3686 0228 5946     		mov	r1, fp	@, _20
 3687 022a 2046     		mov	r0, r4	@, tmp260
 3688 022c FFF7FEFF 		bl	SX1278_SPIRead	@
 3689              	@ main.c:1483: 					hex2uart(dat,2);
 3690 0230 0221     		movs	r1, #2	@,
 3691 0232 FFF7FEFF 		bl	hex2uart	@
 3692              	@ main.c:1484: 					break;
 3693 0236 79E7     		b	.L270	@
 3694              	.L294:
 3695              		.align	2
 3696              	.L293:
 3697 0238 B4012242 		.word	1109524916
 3698 023c 000C0140 		.word	1073810432
 3699 0240 33004343 		.word	1128464435
 3700 0244 00000000 		.word	.LANCHOR20
 3701 0248 00000000 		.word	.LANCHOR21
 3702 024c 00001001 		.word	.LANCHOR17+17825792
 3703 0250 10E000E0 		.word	-536813552
 3704 0254 00000000 		.word	Timt
 3705 0258 00000000 		.word	.LC48
ARM GAS  /tmp/ccrMssCc.s 			page 66


 3706 025c 398EE338 		.word	954437177
 3707 0260 00000000 		.word	trg0
 3708 0264 40548900 		.word	9000000
 3709 0268 40000000 		.word	.LC54
 3710 026c 48000000 		.word	.LC55
 3711 0270 74000000 		.word	.LC60
 3712 0274 00000000 		.word	.LANCHOR22
 3713 0278 80000000 		.word	.LC61
 3714 027c 60000000 		.word	.LC58
 3715 0280 68000000 		.word	.LC59
 3716 0284 50000000 		.word	.LC56
 3717 0288 58000000 		.word	.LC57
 3718 028c 04000000 		.word	.LC13
 3719 0290 2C000000 		.word	.LC52
 3720 0294 34000000 		.word	.LC53
 3721 0298 08000000 		.word	.LC49
 3722 029c 18000000 		.word	.LC50
 3723 02a0 24000000 		.word	.LC51
 3724 02a4 00000000 		.word	p_Fifo1
 3725 02a8 B0812142 		.word	1109492144
 3726 02ac 34812142 		.word	1109492020
 3727              		.size	LoRaRX1, .-LoRaRX1
 3728              		.section	.text.LoRaTX,"ax",%progbits
 3729              		.align	1
 3730              		.p2align 2,,3
 3731              		.global	LoRaTX
 3732              		.syntax unified
 3733              		.thumb
 3734              		.thumb_func
 3735              		.fpu softvfp
 3736              		.type	LoRaTX, %function
 3737              	LoRaTX:
 3738              		@ args = 0, pretend = 0, frame = 8
 3739              		@ frame_needed = 0, uses_anonymous_args = 0
 3740 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3741              	@ main.c:5518: 		TIM3->CR1 = 0;
 3742 0004 0024     		movs	r4, #0	@ tmp160,
 3743              	@ main.c:5519: 		TIM3->PSC = (F_CPU/(1000000)) - 1;
 3744 0006 4FF04708 		mov	r8, #71	@ tmp163,
 3745              	@ main.c:5513: 		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 3746 000a 634F     		ldr	r7, .L300	@ tmp156,
 3747              	@ main.c:1557: void LoRaTX(void)		{
 3748 000c 85B0     		sub	sp, sp, #20	@,,
 3749              	@ main.c:1576: 		RtcInit();
 3750 000e FFF7FEFF 		bl	RtcInit	@
 3751              	@ main.c:5513: 		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 3752 0012 FA69     		ldr	r2, [r7, #28]	@ _71, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 3753              	@ main.c:5518: 		TIM3->CR1 = 0;
 3754 0014 614B     		ldr	r3, .L300+4	@ tmp158,
 3755              	@ main.c:5513: 		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 3756 0016 42F00202 		orr	r2, r2, #2	@ _72, _71,
 3757 001a FA61     		str	r2, [r7, #28]	@ _72, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 3758              	@ main.c:5520: 		TIM3->ARR = TIM3_ARR - 1;
 3759 001c 4FF6FE7E 		movw	lr, #65534	@ tmp166,
 3760              	@ main.c:5518: 		TIM3->CR1 = 0;
 3761 0020 1C80     		strh	r4, [r3]	@ movhi	@ tmp160, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 3762              	@ main.c:5519: 		TIM3->PSC = (F_CPU/(1000000)) - 1;
ARM GAS  /tmp/ccrMssCc.s 			page 67


 3763 0022 A3F82880 		strh	r8, [r3, #40]	@ movhi	@ tmp163, MEM[(struct TIM_TypeDef *)1073742848B].PSC
 3764              	@ main.c:5522: 		TIM3->DIER = TIM_DIER_UIE;
 3765 0026 4FF00108 		mov	r8, #1	@ movhi	@ tmp269,
 3766              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3767 002a 4FF0005C 		mov	ip, #536870912	@ tmp181,
 3768              	@ main.c:1578: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3769 002e 3025     		movs	r5, #48	@ tmp187,
 3770              	@ main.c:1597: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3771 0030 0920     		movs	r0, #9	@ tmp212,
 3772              	@ main.c:5520: 		TIM3->ARR = TIM3_ARR - 1;
 3773 0032 A3F82CE0 		strh	lr, [r3, #44]	@ movhi	@ tmp166, MEM[(struct TIM_TypeDef *)1073742848B].ARR
 3774              	@ main.c:5522: 		TIM3->DIER = TIM_DIER_UIE;
 3775 0036 A3F80C80 		strh	r8, [r3, #12]	@ movhi	@ tmp269, MEM[(struct TIM_TypeDef *)1073742848B].DIER
 3776              	@ main.c:5523: 		TIM3->CR1  |= TIM_CR1_DIR;
 3777 003a 1A88     		ldrh	r2, [r3]	@, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 3778              	@ main.c:1578: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3779 003c DFF88CE1 		ldr	lr, .L300+52	@ tmp182,
 3780              	@ main.c:5523: 		TIM3->CR1  |= TIM_CR1_DIR;
 3781 0040 42F01002 		orr	r2, r2, #16	@ _74, MEM[(struct TIM_TypeDef *)1073742848B].CR1,
 3782 0044 1A80     		strh	r2, [r3]	@ movhi	@ _74, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 3783              	@ main.c:5524: 		TIM3->CR1  |= TIM_CR1_CEN;
 3784 0046 1A88     		ldrh	r2, [r3]	@, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 3785              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3786 0048 5549     		ldr	r1, .L300+8	@ tmp180,
 3787              	@ main.c:5524: 		TIM3->CR1  |= TIM_CR1_CEN;
 3788 004a 42F00102 		orr	r2, r2, #1	@ _76, MEM[(struct TIM_TypeDef *)1073742848B].CR1,
 3789 004e 1A80     		strh	r2, [r3]	@ movhi	@ _76, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 3790              	@ main.c:1578: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3791 0050 DEF80030 		ldr	r3, [lr]	@ p_Fifo1.131_2, p_Fifo1
 3792              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 3793 0054 C1F800C0 		str	ip, [r1]	@ tmp181, MEM[(struct NVIC_Type *)3758153984B].ISER
 3794              	@ main.c:1581: 		GPIOA->CRL = (GPIOA->CRL & 0xfff00000) | 0x00044343;	//   PA2=MOSI, PA1=MISO, PA0=
 3795 0058 A7F58437 		sub	r7, r7, #67584	@ tmp189, tmp189,
 3796              	@ main.c:1578: 		p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='0';
 3797 005c A3F80480 		strh	r8, [r3, #4]	@ movhi	@ tmp270, p_Fifo1.131_2->rct
 3798 0060 A3F80280 		strh	r8, [r3, #2]	@ movhi	@ tmp271, p_Fifo1.131_2->rwi
 3799 0064 9D71     		strb	r5, [r3, #6]	@ tmp187, p_Fifo1.131_2->rbuf
 3800              	@ main.c:1581: 		GPIOA->CRL = (GPIOA->CRL & 0xfff00000) | 0x00044343;	//   PA2=MOSI, PA1=MISO, PA0=
 3801 0066 3B68     		ldr	r3, [r7]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 3802 0068 4E49     		ldr	r1, .L300+12	@ _6,
 3803 006a 1B0D     		lsrs	r3, r3, #20	@ tmp190, _4,
 3804 006c 1B05     		lsls	r3, r3, #20	@ tmp190, tmp190,
 3805              	@ main.c:1582: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3806 006e 4E4A     		ldr	r2, .L300+16	@ tmp194,
 3807              	@ main.c:1581: 		GPIOA->CRL = (GPIOA->CRL & 0xfff00000) | 0x00044343;	//   PA2=MOSI, PA1=MISO, PA0=
 3808 0070 1943     		orrs	r1, r1, r3	@, _6, _6, tmp190
 3809 0072 3960     		str	r1, [r7]	@ _6, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 3810              	@ main.c:1582: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3811 0074 5368     		ldr	r3, [r2, #4]	@ _7, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3812              	@ main.c:1583: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 2); 
 3813 0076 4D4D     		ldr	r5, .L300+20	@ tmp197,
 3814 0078 DFF854E1 		ldr	lr, .L300+56	@ tmp198,
 3815              	@ main.c:1584: 		SX1278_hw1.miso = (u32 *)m_BITBAND_PERIPH(&GPIOA->IDR, 1); 
 3816 007c DFF854C1 		ldr	ip, .L300+60	@ tmp200,
 3817              	@ main.c:1582: 		GPIOB->CRH = (GPIOB->CRH & 0xffffff00) | 0x00000033;	//   
 3818 0080 23F0FF03 		bic	r3, r3, #255	@ tmp195, _7,
 3819 0084 43F03303 		orr	r3, r3, #51	@ _9, tmp195,
ARM GAS  /tmp/ccrMssCc.s 			page 68


 3820 0088 5360     		str	r3, [r2, #4]	@ _9, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 3821              	@ main.c:1597: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3822 008a 0090     		str	r0, [sp]	@ tmp212,
 3823              	@ main.c:1583: 		SX1278_hw1.mosi = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 2); 
 3824 008c C5F800E0 		str	lr, [r5]	@ tmp198, SX1278_hw1.mosi
 3825              	@ main.c:1584: 		SX1278_hw1.miso = (u32 *)m_BITBAND_PERIPH(&GPIOA->IDR, 1); 
 3826 0090 C5F804C0 		str	ip, [r5, #4]	@ tmp200, SX1278_hw1.miso
 3827              	@ main.c:1585: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 0); 
 3828 0094 AEF1080E 		sub	lr, lr, #8	@ tmp202, tmp202,
 3829              	@ main.c:1586: 		SX1278_hw1.nss  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 8); 
 3830 0098 0CF5004C 		add	ip, ip, #32768	@ tmp204, tmp204,
 3831              	@ main.c:1585: 		SX1278_hw1.sck  = (u32 *)m_BITBAND_PERIPH(&GPIOA->ODR, 0); 
 3832 009c C5F808E0 		str	lr, [r5, #8]	@ tmp202, SX1278_hw1.sck
 3833              	@ main.c:1596: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3834 00a0 DFF83481 		ldr	r8, .L300+64	@ tmp209,
 3835              	@ main.c:1586: 		SX1278_hw1.nss  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 8); 
 3836 00a4 0CF19C0C 		add	ip, ip, #156	@ tmp204, tmp204,
 3837              	@ main.c:1587: 		SX1278_hw1.rst  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 9); 
 3838 00a8 0EF5004E 		add	lr, lr, #32768	@ tmp206, tmp206,
 3839              	@ main.c:1586: 		SX1278_hw1.nss  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 8); 
 3840 00ac C5F80CC0 		str	ip, [r5, #12]	@ tmp204, SX1278_hw1.nss
 3841              	@ main.c:1587: 		SX1278_hw1.rst  = (u32 *)m_BITBAND_PERIPH(&GPIOB->ODR, 9); 
 3842 00b0 0EF1240E 		add	lr, lr, #36	@ tmp206, tmp206,
 3843              	@ main.c:1588: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 1); 
 3844 00b4 ACF19C0C 		sub	ip, ip, #156	@ tmp208, tmp208,
 3845              	@ main.c:1597: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3846 00b8 2246     		mov	r2, r4	@, tmp160
 3847 00ba 2146     		mov	r1, r4	@, tmp160
 3848 00bc 0123     		movs	r3, #1	@,
 3849 00be 4046     		mov	r0, r8	@, tmp209
 3850              	@ main.c:1596: 		SX1278_1.hw = &SX1278_hw1;			// wybor modulu		
 3851 00c0 C8F80050 		str	r5, [r8]	@ tmp197, SX1278_1.hw
 3852              	@ main.c:1588: 		SX1278_hw1.dio0 = (u32 *)m_BITBAND_PERIPH(&GPIOB->IDR, 1); 
 3853 00c4 C5E904EC 		strd	lr, ip, [r5, #16]	@ tmp206, tmp208, tmp197,
 3854              	@ main.c:1597: 		SX1278_begin(&SX1278_1,sx[0],sx[1],sx[2],sx[3]);
 3855 00c8 FFF7FEFF 		bl	SX1278_begin	@
 3856              	@ main.c:1601: 		GPIOA->CRH = (GPIOA->CRH & 0x0fffffff) | 0x60000000;
 3857 00cc 7B68     		ldr	r3, [r7, #4]	@ _10, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 3858              	@ main.c:1611: 		GPIOA->ODR = 0b0001010000000000;
 3859 00ce 4FF4A051 		mov	r1, #5120	@ tmp228,
 3860              	@ main.c:1601: 		GPIOA->CRH = (GPIOA->CRH & 0x0fffffff) | 0x60000000;
 3861 00d2 23F07043 		bic	r3, r3, #-268435456	@ tmp214, _10,
 3862 00d6 43F0C043 		orr	r3, r3, #1610612736	@ _12, tmp214,
 3863 00da 7B60     		str	r3, [r7, #4]	@ _12, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 3864              	@ main.c:1607: 		LED	   = 1;		
 3865 00dc 0123     		movs	r3, #1	@ tmp272,
 3866              	@ main.c:1606: 		flag_9 = 0;		
 3867 00de 344A     		ldr	r2, .L300+24	@ tmp217,
 3868              	@ main.c:1607: 		LED	   = 1;		
 3869 00e0 3448     		ldr	r0, .L300+28	@ tmp220,
 3870              	@ main.c:1606: 		flag_9 = 0;		
 3871 00e2 5201     		lsls	r2, r2, #5	@ tmp218, tmp217,
 3872 00e4 5462     		str	r4, [r2, #36]	@ tmp160, *_17
 3873              	@ main.c:1607: 		LED	   = 1;		
 3874 00e6 0360     		str	r3, [r0]	@ tmp272, MEM[(volatile long unsigned int *)1109524916B]
 3875              	@ main.c:1609: 		GPIOA->CRH = (GPIOA->CRH & 0xfff0f0ff)|0x00020200 ; //low power
 3876 00e8 7B68     		ldr	r3, [r7, #4]	@ _18, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
ARM GAS  /tmp/ccrMssCc.s 			page 69


 3877 00ea DFF8F090 		ldr	r9, .L300+68	@ tmp263,
 3878 00ee 23F47023 		bic	r3, r3, #983040	@ tmp223, _18,
 3879 00f2 23F47063 		bic	r3, r3, #3840	@ tmp223, tmp223,
 3880 00f6 43F40033 		orr	r3, r3, #131072	@ _20, tmp223,
 3881 00fa 43F40073 		orr	r3, r3, #512	@ _20, _20,
 3882 00fe 7B60     		str	r3, [r7, #4]	@ _20, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 3883              	@ main.c:1611: 		GPIOA->ODR = 0b0001010000000000;
 3884 0100 F960     		str	r1, [r7, #12]	@ tmp228, MEM[(struct GPIO_TypeDef *)1073809408B].ODR
 3885              	@ main.c:1612: 		GPIOA->ODR |= (1<<10)|(1<<12); 
 3886 0102 FB68     		ldr	r3, [r7, #12]	@ _21, MEM[(struct GPIO_TypeDef *)1073809408B].ODR
 3887              	@ main.c:1647: 				LED ^= 1;
 3888 0104 8346     		mov	fp, r0	@ tmp238, tmp220
 3889              	@ main.c:1612: 		GPIOA->ODR |= (1<<10)|(1<<12); 
 3890 0106 0B43     		orrs	r3, r3, r1	@, _22, _21,
 3891 0108 FB60     		str	r3, [r7, #12]	@ _22, MEM[(struct GPIO_TypeDef *)1073809408B].ODR
 3892              	@ main.c:1642: 		flag_9=1;	
 3893 010a 0123     		movs	r3, #1	@ tmp274,
 3894 010c CA46     		mov	r10, r9	@ tmp265, tmp263
 3895              	@ main.c:1606: 		flag_9 = 0;		
 3896 010e 3046     		mov	r0, r6	@ n, n
 3897              	@ main.c:1642: 		flag_9=1;	
 3898 0110 5362     		str	r3, [r2, #36]	@ tmp274, *_17
 3899 0112 294D     		ldr	r5, .L300+32	@ tmp262,
 3900              	@ main.c:1606: 		flag_9 = 0;		
 3901 0114 02F12403 		add	r3, r2, #36	@ _17, tmp218,
 3902              	@ main.c:1645: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 3903 0118 284C     		ldr	r4, .L300+36	@ tmp233,
 3904 011a 294F     		ldr	r7, .L300+40	@ tmp235,
 3905              	@ main.c:1606: 		flag_9 = 0;		
 3906 011c 0393     		str	r3, [sp, #12]	@ _17, %sfp
 3907              	.L296:
 3908              	@ main.c:1645: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 3909 011e 2B68     		ldr	r3, [r5]	@ trg0.136_23, trg0
 3910 0120 A268     		ldr	r2, [r4, #8]	@ _24, MEM[(struct SysTick_Type *)3758153744B].VAL
 3911 0122 9B1A     		subs	r3, r3, r2	@ tmp234, trg0.136_23, _24
 3912 0124 BB42     		cmp	r3, r7	@ tmp234, tmp235
 3913 0126 FAD9     		bls	.L296	@,
 3914              	@ main.c:1649: 				strcpy (buf_tx," ");		
 3915 0128 4FF0200E 		mov	lr, #32	@ tmp242,
 3916              	@ main.c:1646: 				trg0 = SysTick->VAL; 
 3917 012c A368     		ldr	r3, [r4, #8]	@ _26, MEM[(struct SysTick_Type *)3758153744B].VAL
 3918              	@ main.c:1651: 				strcat (buf_tx,unt2str(n++,str_num,5));
 3919 012e 00F1010C 		add	ip, r0, #1	@ tmp243, n,
 3920              	@ main.c:1646: 				trg0 = SysTick->VAL; 
 3921 0132 2B60     		str	r3, [r5]	@ _26, trg0
 3922              	@ main.c:1647: 				LED ^= 1;
 3923 0134 DBF80020 		ldr	r2, [fp]	@ _27, MEM[(volatile long unsigned int *)1109524916B]
 3924              	@ main.c:1651: 				strcat (buf_tx,unt2str(n++,str_num,5));
 3925 0138 1FFA8CF3 		uxth	r3, ip	@ n, tmp243
 3926              	@ main.c:1647: 				LED ^= 1;
 3927 013c 82F00102 		eor	r2, r2, #1	@ _28, _27,
 3928 0140 CBF80020 		str	r2, [fp]	@ _28, MEM[(volatile long unsigned int *)1109524916B]
 3929              	@ main.c:1651: 				strcat (buf_tx,unt2str(n++,str_num,5));
 3930 0144 1F49     		ldr	r1, .L300+44	@,
 3931 0146 0522     		movs	r2, #5	@,
 3932              	@ main.c:1649: 				strcpy (buf_tx," ");		
 3933 0148 A9F800E0 		strh	lr, [r9]	@ movhi	@ tmp242, MEM[(void *)&buf_tx]
ARM GAS  /tmp/ccrMssCc.s 			page 70


 3934              	@ main.c:1651: 				strcat (buf_tx,unt2str(n++,str_num,5));
 3935 014c 0293     		str	r3, [sp, #8]	@ n, %sfp
 3936 014e FFF7FEFF 		bl	unt2str	@
 3937 0152 0646     		mov	r6, r0	@ _30,
 3938 0154 5046     		mov	r0, r10	@, tmp265
 3939 0156 FFF7FEFF 		bl	strlen	@
 3940 015a 3146     		mov	r1, r6	@, _30
 3941 015c 4844     		add	r0, r0, r9	@, tmp263
 3942 015e FFF7FEFF 		bl	stpcpy	@
 3943              	@ main.c:1652: 				strcat (buf_tx," ");
 3944 0162 194B     		ldr	r3, .L300+48	@ tmp278,
 3945 0164 A0EB0906 		sub	r6, r0, r9	@ _64, tmp249, tmp263
 3946 0168 1A88     		ldrh	r2, [r3]	@ unaligned	@ tmp254, MEM[(void *)" "]
 3947              	@ main.c:1653: 				message_length = strlen(buf_tx); 
 3948 016a 0136     		adds	r6, r6, #1	@ tmp255, _64,
 3949              	@ main.c:1655: 				SX1278_LoRaEntryTx (&SX1278_1, message_length, 2000);
 3950 016c F6B2     		uxtb	r6, r6	@ _32, tmp255
 3951              	@ main.c:1652: 				strcat (buf_tx," ");
 3952 016e 0280     		strh	r2, [r0]	@ unaligned	@ tmp254, MEM[(void *)_65]
 3953              	@ main.c:1655: 				SX1278_LoRaEntryTx (&SX1278_1, message_length, 2000);
 3954 0170 3146     		mov	r1, r6	@, _32
 3955 0172 4FF4FA62 		mov	r2, #2000	@,
 3956 0176 4046     		mov	r0, r8	@, tmp266
 3957 0178 FFF7FEFF 		bl	SX1278_LoRaEntryTx	@
 3958              	@ main.c:1659: 				SX1278_LoRaTxPacketStart(&SX1278_1, (uint8_t *) buf_tx, message_length);  // Sta
 3959 017c 3246     		mov	r2, r6	@, _32
 3960 017e 5146     		mov	r1, r10	@, tmp265
 3961 0180 4046     		mov	r0, r8	@, tmp266
 3962 0182 FFF7FEFF 		bl	SX1278_LoRaTxPacketStart	@
 3963              	@ main.c:1660: 				flag_9=1;	
 3964 0186 0122     		movs	r2, #1	@ tmp259,
 3965 0188 039B     		ldr	r3, [sp, #12]	@ _17, %sfp
 3966              	@ main.c:1661: 				SX1278_sleep(&SX1278_1);
 3967 018a 4046     		mov	r0, r8	@, tmp266
 3968              	@ main.c:1660: 				flag_9=1;	
 3969 018c 1A60     		str	r2, [r3]	@ tmp259, *_17
 3970              	@ main.c:1661: 				SX1278_sleep(&SX1278_1);
 3971 018e FFF7FEFF 		bl	SX1278_sleep	@
 3972              	@ main.c:1651: 				strcat (buf_tx,unt2str(n++,str_num,5));
 3973 0192 029B     		ldr	r3, [sp, #8]	@ n, %sfp
 3974 0194 1846     		mov	r0, r3	@ n, n
 3975 0196 C2E7     		b	.L296	@
 3976              	.L301:
 3977              		.align	2
 3978              	.L300:
 3979 0198 00100240 		.word	1073876992
 3980 019c 00040040 		.word	1073742848
 3981 01a0 00E100E0 		.word	-536813312
 3982 01a4 43430400 		.word	279363
 3983 01a8 000C0140 		.word	1073810432
 3984 01ac 00000000 		.word	.LANCHOR23
 3985 01b0 00001001 		.word	.LANCHOR17+17825792
 3986 01b4 B4012242 		.word	1109524916
 3987 01b8 00000000 		.word	trg0
 3988 01bc 10E000E0 		.word	-536813552
 3989 01c0 40548900 		.word	9000000
 3990 01c4 00000000 		.word	.LANCHOR26
ARM GAS  /tmp/ccrMssCc.s 			page 71


 3991 01c8 24010000 		.word	.LC36
 3992 01cc 00000000 		.word	p_Fifo1
 3993 01d0 88012142 		.word	1109459336
 3994 01d4 04012142 		.word	1109459204
 3995 01d8 00000000 		.word	.LANCHOR24
 3996 01dc 00000000 		.word	.LANCHOR25
 3997              		.size	LoRaTX, .-LoRaTX
 3998              		.section	.text.col1,"ax",%progbits
 3999              		.align	1
 4000              		.p2align 2,,3
 4001              		.global	col1
 4002              		.syntax unified
 4003              		.thumb
 4004              		.thumb_func
 4005              		.fpu softvfp
 4006              		.type	col1, %function
 4007              	col1:
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 4010              		@ link register save eliminated.
 4011              	@ main.c:1779: 			dma_buf[0]=0xe0;	dma_buf[8]  =0xe0;	dma_buf[16]=0xe0;
 4012 0000 4FF0E032 		mov	r2, #-522133280	@ tmp111,
 4013 0004 044B     		ldr	r3, .L303	@ tmp110,
 4014              	@ main.c:1782: 			dma_buf[3]=0xe0;	dma_buf[11] =0xe0;	dma_buf[19]=0xe0;
 4015 0006 0549     		ldr	r1, .L303+4	@ tmp113,
 4016              	@ main.c:1779: 			dma_buf[0]=0xe0;	dma_buf[8]  =0xe0;	dma_buf[16]=0xe0;
 4017 0008 1A60     		str	r2, [r3]	@ tmp111, MEM[(u08[24] *)&dma_buf]
 4018              	@ main.c:1782: 			dma_buf[3]=0xe0;	dma_buf[11] =0xe0;	dma_buf[19]=0xe0;
 4019 000a C3E90222 		strd	r2, r2, [r3, #8]	@ tmp111, tmp111, tmp110,
 4020 000e C3E90422 		strd	r2, r2, [r3, #16]	@ tmp111, tmp111, tmp110,
 4021 0012 5960     		str	r1, [r3, #4]	@ tmp113, MEM[(u08[24] *)&dma_buf + 4B]
 4022              	@ main.c:1787: 		}
 4023 0014 7047     		bx	lr	@
 4024              	.L304:
 4025 0016 00BF     		.align	2
 4026              	.L303:
 4027 0018 00000000 		.word	.LANCHOR27
 4028 001c E0F8F8F8 		.word	-117901088
 4029              		.size	col1, .-col1
 4030              		.section	.text.col2,"ax",%progbits
 4031              		.align	1
 4032              		.p2align 2,,3
 4033              		.global	col2
 4034              		.syntax unified
 4035              		.thumb
 4036              		.thumb_func
 4037              		.fpu softvfp
 4038              		.type	col2, %function
 4039              	col2:
 4040              		@ args = 0, pretend = 0, frame = 0
 4041              		@ frame_needed = 0, uses_anonymous_args = 0
 4042              		@ link register save eliminated.
 4043              	@ main.c:1789: 			dma_buf[0]=0xe0;	dma_buf[8]  =0xe0;	dma_buf[16]=0xe0;
 4044 0000 4FF0E032 		mov	r2, #-522133280	@ tmp111,
 4045 0004 034B     		ldr	r3, .L306	@ tmp110,
 4046              	@ main.c:1792: 			dma_buf[3]=0xe0;	dma_buf[11] =0xe0;	dma_buf[19]=0xe0;
 4047 0006 C3E90022 		strd	r2, r2, [r3]	@ tmp111, tmp111, tmp110
ARM GAS  /tmp/ccrMssCc.s 			page 72


 4048 000a C3E90222 		strd	r2, r2, [r3, #8]	@ tmp111, tmp111, tmp110,
 4049 000e C3E90422 		strd	r2, r2, [r3, #16]	@ tmp111, tmp111, tmp110,
 4050              	@ main.c:1797: 	}	
 4051 0012 7047     		bx	lr	@
 4052              	.L307:
 4053              		.align	2
 4054              	.L306:
 4055 0014 00000000 		.word	.LANCHOR27
 4056              		.size	col2, .-col2
 4057              		.section	.text.col0,"ax",%progbits
 4058              		.align	1
 4059              		.p2align 2,,3
 4060              		.global	col0
 4061              		.syntax unified
 4062              		.thumb
 4063              		.thumb_func
 4064              		.fpu softvfp
 4065              		.type	col0, %function
 4066              	col0:
 4067              		@ args = 0, pretend = 0, frame = 0
 4068              		@ frame_needed = 0, uses_anonymous_args = 0
 4069              		@ link register save eliminated.
 4070              	@ main.c:1799: 			dma_buf[0]=0;	dma_buf[8]  =0x0;	dma_buf[16]=0x0;
 4071 0000 0022     		movs	r2, #0	@ tmp111,
 4072 0002 044B     		ldr	r3, .L309	@ tmp110,
 4073              	@ main.c:1802: 			dma_buf[3]=0;	dma_buf[11] =0x0;	dma_buf[19]=0x0;
 4074 0004 C3E90022 		strd	r2, r2, [r3]	@ tmp111, tmp111, tmp110
 4075 0008 C3E90222 		strd	r2, r2, [r3, #8]	@ tmp111, tmp111, tmp110,
 4076 000c C3E90422 		strd	r2, r2, [r3, #16]	@ tmp111, tmp111, tmp110,
 4077              	@ main.c:1807: 	}
 4078 0010 7047     		bx	lr	@
 4079              	.L310:
 4080 0012 00BF     		.align	2
 4081              	.L309:
 4082 0014 00000000 		.word	.LANCHOR27
 4083              		.size	col0, .-col0
 4084              		.section	.text.ws2812led,"ax",%progbits
 4085              		.align	1
 4086              		.p2align 2,,3
 4087              		.global	ws2812led
 4088              		.syntax unified
 4089              		.thumb
 4090              		.thumb_func
 4091              		.fpu softvfp
 4092              		.type	ws2812led, %function
 4093              	ws2812led:
 4094              		@ args = 0, pretend = 0, frame = 0
 4095              		@ frame_needed = 0, uses_anonymous_args = 0
 4096 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 4097              	@ main.c:1819: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|SPI_CR1_MSTR|SPI_CR1_BR_0|SPI_CR1_BR_1;	// 0x0
 4098 0004 4FF44774 		mov	r4, #796	@ tmp152,
 4099              	@ main.c:1813: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0xBBB30000;	// PA5~7
 4100 0008 3648     		ldr	r0, .L323	@ tmp143,
 4101              	@ main.c:1817: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 4102 000a 3749     		ldr	r1, .L323+4	@ tmp148,
 4103              	@ main.c:1813: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0xBBB30000;	// PA5~7
 4104 000c 0368     		ldr	r3, [r0]	@ _2, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
ARM GAS  /tmp/ccrMssCc.s 			page 73


 4105              	@ main.c:1819: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|SPI_CR1_MSTR|SPI_CR1_BR_0|SPI_CR1_BR_1;	// 0x0
 4106 000e 374A     		ldr	r2, .L323+8	@ tmp150,
 4107              	@ main.c:1813: 		GPIOA->CRL = (GPIOA->CRL & 0x0000ffff) | 0xBBB30000;	// PA5~7
 4108 0010 9BB2     		uxth	r3, r3	@ tmp144, _2
 4109 0012 43F03B43 		orr	r3, r3, #-1157627904	@ _5, tmp144,
 4110 0016 43F43303 		orr	r3, r3, #11730944	@ _5, _5,
 4111 001a 0360     		str	r3, [r0]	@ _5, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 4112              	@ main.c:1832: 		DMA1_Channel3->CCR 	= 0;										//Disable channel
 4113 001c 0020     		movs	r0, #0	@ tmp167,
 4114              	@ main.c:1817: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 4115 001e 8B69     		ldr	r3, [r1, #24]	@ _7, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 4116              	@ main.c:1847: 		DMA1_Channel3->CCR =  CCR_reg;	
 4117 0020 B026     		movs	r6, #176	@ tmp175,
 4118              	@ main.c:1817: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 4119 0022 43F48053 		orr	r3, r3, #4096	@ _8, _7,
 4120 0026 8B61     		str	r3, [r1, #24]	@ _8, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 4121              	@ main.c:1819: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|SPI_CR1_MSTR|SPI_CR1_BR_0|SPI_CR1_BR_1;	// 0x0
 4122 0028 1480     		strh	r4, [r2]	@ movhi	@ tmp152, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 4123              	@ main.c:1820: 		SPI1->CR2 |= SPI_CR2_TXDMAEN;
 4124 002a 9388     		ldrh	r3, [r2, #4]	@, MEM[(struct SPI_TypeDef *)1073819648B].CR2
 4125              	@ main.c:1854: 		u08 fl=0;
 4126 002c 0446     		mov	r4, r0	@ fl, tmp167
 4127              	@ main.c:1820: 		SPI1->CR2 |= SPI_CR2_TXDMAEN;
 4128 002e 43F00203 		orr	r3, r3, #2	@ _10, MEM[(struct SPI_TypeDef *)1073819648B].CR2,
 4129 0032 9380     		strh	r3, [r2, #4]	@ movhi	@ _10, MEM[(struct SPI_TypeDef *)1073819648B].CR2
 4130              	@ main.c:1821: 		SPI1->CR1 |= SPI_CR1_SPE;		
 4131 0034 1388     		ldrh	r3, [r2]	@, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 4132              	@ main.c:1849: 		DMA1->IFCR = DMA_IFCR_CGIF3 | DMA_IFCR_CTCIF3;
 4133 0036 4FF44075 		mov	r5, #768	@ tmp177,
 4134              	@ main.c:1821: 		SPI1->CR1 |= SPI_CR1_SPE;		
 4135 003a 43F04003 		orr	r3, r3, #64	@ _12, MEM[(struct SPI_TypeDef *)1073819648B].CR1,
 4136 003e 1380     		strh	r3, [r2]	@ movhi	@ _12, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 4137              	@ main.c:1829: 		col0();
 4138 0040 FFF7FEFF 		bl	col0	@
 4139              	@ main.c:1836: 		DMA1_Channel3->CNDTR = 24;		//Buffor size :
 4140 0044 4FF0180C 		mov	ip, #24	@ tmp173,
 4141              	@ main.c:1831: 		RCC->AHBENR   			|= RCC_AHBENR_DMA1EN;		// enable clock for DMA1
 4142 0048 4A69     		ldr	r2, [r1, #20]	@ _13, MEM[(struct RCC_TypeDef *)1073876992B].AHBENR
 4143              	@ main.c:1832: 		DMA1_Channel3->CCR 	= 0;										//Disable channel
 4144 004a 294B     		ldr	r3, .L323+12	@ tmp166,
 4145              	@ main.c:1831: 		RCC->AHBENR   			|= RCC_AHBENR_DMA1EN;		// enable clock for DMA1
 4146 004c 42F00102 		orr	r2, r2, #1	@ _14, _13,
 4147 0050 4A61     		str	r2, [r1, #20]	@ _14, MEM[(struct RCC_TypeDef *)1073876992B].AHBENR
 4148              	@ main.c:1833: 		DMA1_Channel3->CMAR = (uint32_t)dma_buf;	 	//Destination address:
 4149 0052 2849     		ldr	r1, .L323+16	@ tmp168,
 4150              	@ main.c:1834: 		DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;	//Source PERIPHERAL address:
 4151 0054 284A     		ldr	r2, .L323+20	@ tmp171,
 4152              	@ main.c:1832: 		DMA1_Channel3->CCR 	= 0;										//Disable channel
 4153 0056 1860     		str	r0, [r3]	@ tmp167, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CCR
 4154              	@ main.c:1833: 		DMA1_Channel3->CMAR = (uint32_t)dma_buf;	 	//Destination address:
 4155 0058 D960     		str	r1, [r3, #12]	@ tmp168, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CMAR
 4156              	@ main.c:1834: 		DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;	//Source PERIPHERAL address:
 4157 005a 9A60     		str	r2, [r3, #8]	@ tmp171, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CPAR
 4158              	@ main.c:1849: 		DMA1->IFCR = DMA_IFCR_CGIF3 | DMA_IFCR_CTCIF3;
 4159 005c 274A     		ldr	r2, .L323+24	@ tmp176,
 4160              	@ main.c:1836: 		DMA1_Channel3->CNDTR = 24;		//Buffor size :
 4161 005e C3F804C0 		str	ip, [r3, #4]	@ tmp173, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CNDTR
ARM GAS  /tmp/ccrMssCc.s 			page 74


 4162              	@ main.c:1847: 		DMA1_Channel3->CCR =  CCR_reg;	
 4163 0062 1E60     		str	r6, [r3]	@ tmp175, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CCR
 4164              	@ main.c:1849: 		DMA1->IFCR = DMA_IFCR_CGIF3 | DMA_IFCR_CTCIF3;
 4165 0064 5560     		str	r5, [r2, #4]	@ tmp177, MEM[(struct DMA_TypeDef *)1073872896B].IFCR
 4166              	@ main.c:1850: 		DMA1_Channel3->CCR |= DMA_CCR1_EN;
 4167 0066 1A68     		ldr	r2, [r3]	@ _16, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CCR
 4168              	@ main.c:1853: 		UaPutK("\r\n DMA start...");
 4169 0068 2548     		ldr	r0, .L323+28	@,
 4170              	@ main.c:1850: 		DMA1_Channel3->CCR |= DMA_CCR1_EN;
 4171 006a 42F00102 		orr	r2, r2, #1	@ _17, _16,
 4172 006e 1A60     		str	r2, [r3]	@ _17, MEM[(struct DMA_Channel_TypeDef *)1073872944B].CCR
 4173              	@ main.c:1853: 		UaPutK("\r\n DMA start...");
 4174 0070 FFF7FEFF 		bl	UaPutK	@
 4175 0074 234F     		ldr	r7, .L323+32	@ tmp206,
 4176 0076 DFF8A080 		ldr	r8, .L323+52	@ tmp208,
 4177 007a 234E     		ldr	r6, .L323+36	@ tmp207,
 4178              	@ main.c:1858: 			if(STCLK_MS*100 < (trg0 - SysTick->VAL)){
 4179 007c 2348     		ldr	r0, .L323+40	@ tmp182,
 4180              	@ main.c:1885: 					LED ^= 1;
 4181 007e 244D     		ldr	r5, .L323+44	@ tmp209,
 4182              	.L318:
 4183              	@ main.c:1858: 			if(STCLK_MS*100 < (trg0 - SysTick->VAL)){
 4184 0080 DFF898C0 		ldr	ip, .L323+56	@ tmp184,
 4185              	@ main.c:1862: 			if(STCLK_MS*200 < (trg1 - SysTick->VAL)){
 4186 0084 2349     		ldr	r1, .L323+48	@ tmp190,
 4187              	.L313:
 4188              	@ main.c:1858: 			if(STCLK_MS*100 < (trg0 - SysTick->VAL)){
 4189 0086 3B68     		ldr	r3, [r7]	@ trg0.145_18, trg0
 4190 0088 8268     		ldr	r2, [r0, #8]	@ _19, MEM[(struct SysTick_Type *)3758153744B].VAL
 4191 008a 9B1A     		subs	r3, r3, r2	@ tmp183, trg0.145_18, _19
 4192 008c 6345     		cmp	r3, ip	@ tmp183, tmp184
 4193              	@ main.c:1859: 				trg0 = SysTick->VAL;
 4194 008e 84BF     		itt	hi
 4195 0090 8368     		ldrhi	r3, [r0, #8]	@ _21, MEM[(struct SysTick_Type *)3758153744B].VAL
 4196 0092 3B60     		strhi	r3, [r7]	@ _21, trg0
 4197              	@ main.c:1862: 			if(STCLK_MS*200 < (trg1 - SysTick->VAL)){
 4198 0094 D8F80030 		ldr	r3, [r8]	@ trg1.146_22, trg1
 4199 0098 8268     		ldr	r2, [r0, #8]	@ _23, MEM[(struct SysTick_Type *)3758153744B].VAL
 4200 009a 9B1A     		subs	r3, r3, r2	@ tmp189, trg1.146_22, _23
 4201 009c 8B42     		cmp	r3, r1	@ tmp189, tmp190
 4202 009e F2D9     		bls	.L313	@,
 4203              	@ main.c:1863: 				trg1 = SysTick->VAL;
 4204 00a0 8368     		ldr	r3, [r0, #8]	@ _25, MEM[(struct SysTick_Type *)3758153744B].VAL
 4205 00a2 C8F80030 		str	r3, [r8]	@ _25, trg1
 4206              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4207 00a6 8368     		ldr	r3, [r0, #8]	@ _55, MEM[(struct SysTick_Type *)3758153744B].VAL
 4208 00a8 3360     		str	r3, [r6]	@ _55, delay_us
 4209              	.L314:
 4210              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4211 00aa 3368     		ldr	r3, [r6]	@ delay_us.85_56, delay_us
 4212 00ac 8268     		ldr	r2, [r0, #8]	@ _57, MEM[(struct SysTick_Type *)3758153744B].VAL
 4213 00ae 9B1A     		subs	r3, r3, r2	@ tmp197, delay_us.85_56, _57
 4214 00b0 B3F5E17F 		cmp	r3, #450	@ tmp197,
 4215 00b4 F9D3     		bcc	.L314	@,
 4216              	@ main.c:1879: 				if(fl){
 4217 00b6 74B1     		cbz	r4, .L315	@ fl,
 4218              	@ main.c:1880: 					col1();
ARM GAS  /tmp/ccrMssCc.s 			page 75


 4219 00b8 FFF7FEFF 		bl	col1	@
 4220              	@ main.c:1881: 					fl=0;
 4221 00bc 0024     		movs	r4, #0	@ fl,
 4222              	.L316:
 4223              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4224 00be 40F62311 		movw	r1, #2339	@ tmp205,
 4225              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4226 00c2 8368     		ldr	r3, [r0, #8]	@ _59, MEM[(struct SysTick_Type *)3758153744B].VAL
 4227 00c4 3360     		str	r3, [r6]	@ _59, delay_us
 4228              	.L317:
 4229              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4230 00c6 3368     		ldr	r3, [r6]	@ delay_us.85_60, delay_us
 4231 00c8 8268     		ldr	r2, [r0, #8]	@ _61, MEM[(struct SysTick_Type *)3758153744B].VAL
 4232 00ca 9B1A     		subs	r3, r3, r2	@ tmp204, delay_us.85_60, _61
 4233 00cc 8B42     		cmp	r3, r1	@ tmp204, tmp205
 4234 00ce FAD9     		bls	.L317	@,
 4235              	@ main.c:1889: 				col0();
 4236 00d0 FFF7FEFF 		bl	col0	@
 4237 00d4 D4E7     		b	.L318	@
 4238              	.L315:
 4239              	@ main.c:1884: 					fl=1;
 4240 00d6 0124     		movs	r4, #1	@ fl,
 4241              	@ main.c:1883: 					col1();
 4242 00d8 FFF7FEFF 		bl	col1	@
 4243              	@ main.c:1885: 					LED ^= 1;
 4244 00dc 2B68     		ldr	r3, [r5]	@ _26, MEM[(volatile long unsigned int *)1109524916B]
 4245 00de 6340     		eors	r3, r3, r4	@, _27, _26,
 4246 00e0 2B60     		str	r3, [r5]	@ _27, MEM[(volatile long unsigned int *)1109524916B]
 4247 00e2 ECE7     		b	.L316	@
 4248              	.L324:
 4249              		.align	2
 4250              	.L323:
 4251 00e4 00080140 		.word	1073809408
 4252 00e8 00100240 		.word	1073876992
 4253 00ec 00300140 		.word	1073819648
 4254 00f0 30000240 		.word	1073872944
 4255 00f4 00000000 		.word	.LANCHOR27
 4256 00f8 0C300140 		.word	1073819660
 4257 00fc 00000240 		.word	1073872896
 4258 0100 00000000 		.word	.LC62
 4259 0104 00000000 		.word	trg0
 4260 0108 00000000 		.word	delay_us
 4261 010c 10E000E0 		.word	-536813552
 4262 0110 B4012242 		.word	1109524916
 4263 0114 40771B00 		.word	1800000
 4264 0118 00000000 		.word	trg1
 4265 011c A0BB0D00 		.word	900000
 4266              		.size	ws2812led, .-ws2812led
 4267              		.section	.text.lexmark_lcd,"ax",%progbits
 4268              		.align	1
 4269              		.p2align 2,,3
 4270              		.global	lexmark_lcd
 4271              		.syntax unified
 4272              		.thumb
 4273              		.thumb_func
 4274              		.fpu softvfp
 4275              		.type	lexmark_lcd, %function
ARM GAS  /tmp/ccrMssCc.s 			page 76


 4276              	lexmark_lcd:
 4277              		@ Volatile: function does not return.
 4278              		@ args = 0, pretend = 0, frame = 8
 4279              		@ frame_needed = 0, uses_anonymous_args = 0
 4280 0000 00B5     		push	{lr}	@
 4281 0002 83B0     		sub	sp, sp, #12	@,,
 4282              	@ main.c:1970: 		UC1608_Init();
 4283 0004 FFF7FEFF 		bl	UC1608_Init	@
 4284              	@ main.c:1976: 		UC1608_Clr();
 4285 0008 FFF7FEFF 		bl	UC1608_Clr	@
 4286              	@ main.c:1978: 		UC1608_str (0, 0,"Witaj szkolo         ");
 4287 000c 0021     		movs	r1, #0	@,
 4288 000e 174A     		ldr	r2, .L330	@,
 4289 0010 0846     		mov	r0, r1	@,
 4290 0012 FFF7FEFF 		bl	UC1608_str	@
 4291              	@ main.c:1979: 		UC1608_str (1, 0,"Zapraszam do pracy        ");
 4292 0016 164A     		ldr	r2, .L330+4	@,
 4293 0018 0021     		movs	r1, #0	@,
 4294 001a 0120     		movs	r0, #1	@,
 4295 001c FFF7FEFF 		bl	UC1608_str	@
 4296              	@ main.c:1980: 		UC1608_Refresh();
 4297 0020 FFF7FEFF 		bl	UC1608_Refresh	@
 4298              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 4299 0024 134B     		ldr	r3, .L330+8	@ tmp122,
 4300 0026 144A     		ldr	r2, .L330+12	@ tmp137,
 4301              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 4302 0028 1D46     		mov	r5, r3	@ tmp125, tmp122
 4303              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 4304 002a 9B68     		ldr	r3, [r3, #8]	@ _17, MEM[(struct SysTick_Type *)3758153744B].VAL
 4305              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 4306 002c 1349     		ldr	r1, .L330+16	@ tmp127,
 4307              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 4308 002e 1360     		str	r3, [r2]	@ _17, delay_us
 4309              	.L326:
 4310              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 4311 0030 1368     		ldr	r3, [r2]	@ delay_us.72_18, delay_us
 4312 0032 A868     		ldr	r0, [r5, #8]	@ _19, MEM[(struct SysTick_Type *)3758153744B].VAL
 4313 0034 1B1A     		subs	r3, r3, r0	@ tmp126, delay_us.72_18, _19
 4314 0036 8B42     		cmp	r3, r1	@ tmp126, tmp127
 4315 0038 FAD9     		bls	.L326	@,
 4316              	@ main.c:1983: 		UC1608_str (1, 0,"                          ");
 4317 003a 114A     		ldr	r2, .L330+20	@,
 4318 003c 0021     		movs	r1, #0	@,
 4319 003e 0120     		movs	r0, #1	@,
 4320 0040 FFF7FEFF 		bl	UC1608_str	@
 4321              	@ main.c:1984: 		UC1608_Refresh();
 4322 0044 FFF7FEFF 		bl	UC1608_Refresh	@
 4323              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 4324 0048 AA68     		ldr	r2, [r5, #8]	@ _16, MEM[(struct SysTick_Type *)3758153744B].VAL
 4325 004a 0E4B     		ldr	r3, .L330+24	@ tmp130,
 4326              	@ main.c:1989: 		UaPutS(" T[us]="); sint2uart(tim/TIM_US);
 4327 004c 0E48     		ldr	r0, .L330+28	@,
 4328              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 4329 004e 1A60     		str	r2, [r3]	@ _16, Timt
 4330              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 4331 0050 1C68     		ldr	r4, [r3]	@ Timt.84_13, Timt
 4332 0052 AB68     		ldr	r3, [r5, #8]	@ _14, MEM[(struct SysTick_Type *)3758153744B].VAL
ARM GAS  /tmp/ccrMssCc.s 			page 77


 4333 0054 E41A     		subs	r4, r4, r3	@ _15, Timt.84_13, _14
 4334 0056 0194     		str	r4, [sp, #4]	@ _15, MEM[(volatile u32 *)&tim]
 4335              	@ main.c:1989: 		UaPutS(" T[us]="); sint2uart(tim/TIM_US);
 4336 0058 FFF7FEFF 		bl	UaPutS	@
 4337 005c 0B48     		ldr	r0, .L330+32	@ tmp136,
 4338 005e A0FB0430 		umull	r3, r0, r0, r4	@ tmp138, tmp135, tmp136, _15
 4339 0062 4008     		lsrs	r0, r0, #1	@, tmp135,
 4340 0064 FFF7FEFF 		bl	sint2uart	@
 4341              	.L327:
 4342 0068 FEE7     		b	.L327	@
 4343              	.L331:
 4344 006a 00BF     		.align	2
 4345              	.L330:
 4346 006c 00000000 		.word	.LC63
 4347 0070 18000000 		.word	.LC64
 4348 0074 10E000E0 		.word	-536813552
 4349 0078 00000000 		.word	delay_us
 4350 007c 3F548900 		.word	8999999
 4351 0080 34000000 		.word	.LC65
 4352 0084 00000000 		.word	Timt
 4353 0088 50000000 		.word	.LC66
 4354 008c 398EE338 		.word	954437177
 4355              		.size	lexmark_lcd, .-lexmark_lcd
 4356              		.section	.text.softUTX_init,"ax",%progbits
 4357              		.align	1
 4358              		.p2align 2,,3
 4359              		.global	softUTX_init
 4360              		.syntax unified
 4361              		.thumb
 4362              		.thumb_func
 4363              		.fpu softvfp
 4364              		.type	softUTX_init, %function
 4365              	softUTX_init:
 4366              		@ args = 0, pretend = 0, frame = 0
 4367              		@ frame_needed = 0, uses_anonymous_args = 0
 4368              		@ link register save eliminated.
 4369              	@ main.c:2059: 		GPIOC->CRH = (GPIOC->CRH & 0xf0ffffff) | 0x01000000;  				// PC14 = softUART
 4370 0000 034A     		ldr	r2, .L333	@ tmp113,
 4371 0002 5368     		ldr	r3, [r2, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 4372 0004 23F07063 		bic	r3, r3, #251658240	@ tmp114, _1,
 4373 0008 43F08073 		orr	r3, r3, #16777216	@ _3, tmp114,
 4374 000c 5360     		str	r3, [r2, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073811456B].CRH
 4375              	@ main.c:2060: 	}
 4376 000e 7047     		bx	lr	@
 4377              	.L334:
 4378              		.align	2
 4379              	.L333:
 4380 0010 00100140 		.word	1073811456
 4381              		.size	softUTX_init, .-softUTX_init
 4382              		.section	.text.sofUTX,"ax",%progbits
 4383              		.align	1
 4384              		.p2align 2,,3
 4385              		.global	sofUTX
 4386              		.syntax unified
 4387              		.thumb
 4388              		.thumb_func
 4389              		.fpu softvfp
ARM GAS  /tmp/ccrMssCc.s 			page 78


 4390              		.type	sofUTX, %function
 4391              	sofUTX:
 4392              		@ args = 0, pretend = 0, frame = 8
 4393              		@ frame_needed = 0, uses_anonymous_args = 0
 4394              		@ link register save eliminated.
 4395              	@ main.c:2064: 		p_SofTX=0;				  //START Bit
 4396 0000 0021     		movs	r1, #0	@ tmp129,
 4397              	@ main.c:2061: void sofUTX(volatile u08 bTX)	{  /// Sotware Transmit USART Frame [8N1] with TIMER P
 4398 0002 F0B4     		push	{r4, r5, r6, r7}	@
 4399              	@ main.c:2064: 		p_SofTX=0;				  //START Bit
 4400 0004 194A     		ldr	r2, .L347	@ tmp128,
 4401              	@ inc/tool/delay.h:99: 		delay_us = SysTick->VAL; 
 4402 0006 1A4B     		ldr	r3, .L347+4	@ tmp130,
 4403              	@ main.c:2061: void sofUTX(volatile u08 bTX)	{  /// Sotware Transmit USART Frame [8N1] with TIMER P
 4404 0008 82B0     		sub	sp, sp, #8	@,,
 4405              	@ main.c:2061: void sofUTX(volatile u08 bTX)	{  /// Sotware Transmit USART Frame [8N1] with TIMER P
 4406 000a 8DF80700 		strb	r0, [sp, #7]	@ bTX, bTX
 4407              	@ main.c:2064: 		p_SofTX=0;				  //START Bit
 4408 000e 1160     		str	r1, [r2]	@ tmp129, MEM[(volatile long unsigned int *)1109524920B]
 4409              	@ inc/tool/delay.h:100: 		while( STCLK_DN*ns > (delay_us - SysTick->VAL) );
 4410 0010 1C46     		mov	r4, r3	@ tmp133, tmp130
 4411              	@ inc/tool/delay.h:99: 		delay_us = SysTick->VAL; 
 4412 0012 1849     		ldr	r1, .L347+8	@ tmp158,
 4413 0014 9B68     		ldr	r3, [r3, #8]	@ _16, MEM[(struct SysTick_Type *)3758153744B].VAL
 4414 0016 0B60     		str	r3, [r1]	@ _16, delay_us
 4415              	.L336:
 4416              	@ inc/tool/delay.h:100: 		while( STCLK_DN*ns > (delay_us - SysTick->VAL) );
 4417 0018 0B68     		ldr	r3, [r1]	@ delay_us.154_17, delay_us
 4418 001a A268     		ldr	r2, [r4, #8]	@ _18, MEM[(struct SysTick_Type *)3758153744B].VAL
 4419 001c 9B1A     		subs	r3, r3, r2	@ tmp134, delay_us.154_17, _18
 4420 001e 112B     		cmp	r3, #17	@ tmp134,
 4421 0020 FAD9     		bls	.L336	@,
 4422              	@ main.c:2062: 		u08  cTX = 1 ;
 4423 0022 0124     		movs	r4, #1	@ cTX,
 4424              	@ inc/tool/delay.h:100: 		while( STCLK_DN*ns > (delay_us - SysTick->VAL) );
 4425 0024 0825     		movs	r5, #8	@ ivtmp_3,
 4426              	@ main.c:2067: 		 if(bTX & cTX)  p_SofTX=1;
 4427 0026 2746     		mov	r7, r4	@ tmp160, cTX
 4428              	@ main.c:2068: 		 else 					p_SofTX=0;
 4429 0028 104E     		ldr	r6, .L347	@ tmp159,
 4430              	@ inc/tool/delay.h:99: 		delay_us = SysTick->VAL; 
 4431 002a 1148     		ldr	r0, .L347+4	@ tmp146,
 4432              	.L340:
 4433              	@ main.c:2067: 		 if(bTX & cTX)  p_SofTX=1;
 4434 002c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2	@ bTX, bTX
 4435 0030 2340     		ands	r3, r3, r4	@ tmp140, bTX, cTX
 4436 0032 14BF     		ite	ne
 4437 0034 3760     		strne	r7, [r6]	@ tmp160, MEM[(volatile long unsigned int *)1109524920B]
 4438              	@ main.c:2068: 		 else 					p_SofTX=0;
 4439 0036 3360     		streq	r3, [r6]	@ tmp140, MEM[(volatile long unsigned int *)1109524920B]
 4440              	@ inc/tool/delay.h:99: 		delay_us = SysTick->VAL; 
 4441 0038 8368     		ldr	r3, [r0, #8]	@ _20, MEM[(struct SysTick_Type *)3758153744B].VAL
 4442              	@ main.c:2069: 		 cTX <<= 1;
 4443 003a 6400     		lsls	r4, r4, #1	@ tmp145, cTX,
 4444 003c E4B2     		uxtb	r4, r4	@ cTX, tmp145
 4445              	@ inc/tool/delay.h:99: 		delay_us = SysTick->VAL; 
 4446 003e 0B60     		str	r3, [r1]	@ _20, delay_us
ARM GAS  /tmp/ccrMssCc.s 			page 79


 4447              	.L339:
 4448              	@ inc/tool/delay.h:100: 		while( STCLK_DN*ns > (delay_us - SysTick->VAL) );
 4449 0040 0B68     		ldr	r3, [r1]	@ delay_us.154_21, delay_us
 4450 0042 8268     		ldr	r2, [r0, #8]	@ _22, MEM[(struct SysTick_Type *)3758153744B].VAL
 4451 0044 9B1A     		subs	r3, r3, r2	@ tmp150, delay_us.154_21, _22
 4452 0046 112B     		cmp	r3, #17	@ tmp150,
 4453 0048 FAD9     		bls	.L339	@,
 4454              	@ main.c:2066: 		while(cTX != 0){		//Wait to send Data
 4455 004a 013D     		subs	r5, r5, #1	@ ivtmp_3, ivtmp_3,
 4456 004c EED1     		bne	.L340	@,
 4457              	@ main.c:2072: 		p_SofTX=1;				//STOP Bit		
 4458 004e 0122     		movs	r2, #1	@ tmp152,
 4459 0050 064B     		ldr	r3, .L347	@ tmp151,
 4460              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4461 0052 074C     		ldr	r4, .L347+4	@ tmp156,
 4462              	@ main.c:2072: 		p_SofTX=1;				//STOP Bit		
 4463 0054 1A60     		str	r2, [r3]	@ tmp152, MEM[(volatile long unsigned int *)1109524920B]
 4464              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4465 0056 8368     		ldr	r3, [r0, #8]	@ _12, MEM[(struct SysTick_Type *)3758153744B].VAL
 4466 0058 0B60     		str	r3, [r1]	@ _12, delay_us
 4467              	.L341:
 4468              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4469 005a 0B68     		ldr	r3, [r1]	@ delay_us.85_13, delay_us
 4470 005c A268     		ldr	r2, [r4, #8]	@ _14, MEM[(struct SysTick_Type *)3758153744B].VAL
 4471 005e 9B1A     		subs	r3, r3, r2	@ tmp157, delay_us.85_13, _14
 4472 0060 592B     		cmp	r3, #89	@ tmp157,
 4473 0062 FAD9     		bls	.L341	@,
 4474              	@ main.c:2074: 	}
 4475 0064 02B0     		add	sp, sp, #8	@,,
 4476              		@ sp needed	@
 4477 0066 F0BC     		pop	{r4, r5, r6, r7}	@
 4478 0068 7047     		bx	lr	@
 4479              	.L348:
 4480 006a 00BF     		.align	2
 4481              	.L347:
 4482 006c B8012242 		.word	1109524920
 4483 0070 10E000E0 		.word	-536813552
 4484 0074 00000000 		.word	delay_us
 4485              		.size	sofUTX, .-sofUTX
 4486              		.section	.text.ToLED,"ax",%progbits
 4487              		.align	1
 4488              		.p2align 2,,3
 4489              		.global	ToLED
 4490              		.syntax unified
 4491              		.thumb
 4492              		.thumb_func
 4493              		.fpu softvfp
 4494              		.type	ToLED, %function
 4495              	ToLED:
 4496              		@ args = 0, pretend = 0, frame = 0
 4497              		@ frame_needed = 0, uses_anonymous_args = 0
 4498 0000 70B5     		push	{r4, r5, r6, lr}	@
 4499              	@ main.c:2075: void ToLED(u16 B,u16 A,u08 dot)	{
 4500 0002 0546     		mov	r5, r0	@ B, B
 4501 0004 0C46     		mov	r4, r1	@ A, A
 4502 0006 1646     		mov	r6, r2	@ dot, dot
 4503              	@ main.c:2076: 		sofUTX(B&0x00ff);	// segment LO
ARM GAS  /tmp/ccrMssCc.s 			page 80


 4504 0008 C0B2     		uxtb	r0, r0	@, B
 4505 000a FFF7FEFF 		bl	sofUTX	@
 4506              	@ main.c:2077: 		sofUTX(B>>8);			// segment HI
 4507 000e 280A     		lsrs	r0, r5, #8	@, B,
 4508 0010 FFF7FEFF 		bl	sofUTX	@
 4509              	@ main.c:2078: 		sofUTX(A&0x00ff);	// segment LO
 4510 0014 E0B2     		uxtb	r0, r4	@, A
 4511 0016 FFF7FEFF 		bl	sofUTX	@
 4512              	@ main.c:2079: 		sofUTX(A>>8);			// segment HI
 4513 001a 200A     		lsrs	r0, r4, #8	@, A,
 4514 001c FFF7FEFF 		bl	sofUTX	@
 4515              	@ main.c:2080: 		sofUTX(dot);
 4516 0020 3046     		mov	r0, r6	@, dot
 4517              	@ main.c:2081: 	}
 4518 0022 BDE87040 		pop	{r4, r5, r6, lr}	@
 4519              	@ main.c:2080: 		sofUTX(dot);
 4520 0026 FFF7FEBF 		b	sofUTX	@
 4521              		.size	ToLED, .-ToLED
 4522 002a 00BF     		.section	.text.cmd_LCD,"ax",%progbits
 4523              		.align	1
 4524              		.p2align 2,,3
 4525              		.global	cmd_LCD
 4526              		.syntax unified
 4527              		.thumb
 4528              		.thumb_func
 4529              		.fpu softvfp
 4530              		.type	cmd_LCD, %function
 4531              	cmd_LCD:
 4532              		@ args = 0, pretend = 0, frame = 0
 4533              		@ frame_needed = 0, uses_anonymous_args = 0
 4534 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 4535              	@ main.c:2086: 			if (byte & 0x80)	sMOSI = 1;
 4536 0004 4FF0010E 		mov	lr, #1	@ tmp147,
 4537              	@ main.c:2082: void cmd_LCD(uint8_t byte)	{
 4538 0008 0825     		movs	r5, #8	@ ivtmp_2,
 4539              	@ main.c:2089: 			sSCK = 1; /* a slave latches input data bit */
 4540 000a F046     		mov	r8, lr	@ MEM[(volatile long unsigned int *)1109459348B], tmp147
 4541              	@ main.c:2087: 			else							sMOSI = 0;
 4542 000c 0027     		movs	r7, #0	@ tmp146,
 4543 000e 1249     		ldr	r1, .L361	@ tmp144,
 4544 0010 DFF850C0 		ldr	ip, .L361+12	@ tmp145,
 4545              	@ main.c:2089: 			sSCK = 1; /* a slave latches input data bit */
 4546 0014 114E     		ldr	r6, .L361+4	@ tmp129,
 4547              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4548 0016 124A     		ldr	r2, .L361+8	@ tmp131,
 4549              	.L356:
 4550              	@ main.c:2086: 			if (byte & 0x80)	sMOSI = 1;
 4551 0018 0306     		lsls	r3, r0, #24	@, byte,
 4552 001a 4CBF     		ite	mi
 4553 001c CCF800E0 		strmi	lr, [ip]	@ tmp147, MEM[(volatile long unsigned int *)1109459356B]
 4554              	@ main.c:2087: 			else							sMOSI = 0;
 4555 0020 CCF80070 		strpl	r7, [ip]	@ tmp146, MEM[(volatile long unsigned int *)1109459356B]
 4556              	@ main.c:2089: 			sSCK = 1; /* a slave latches input data bit */
 4557 0024 C6F80080 		str	r8, [r6]	@ MEM[(volatile long unsigned int *)1109459348B], MEM[(volatile long unsigned int *)1
 4558              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4559 0028 9368     		ldr	r3, [r2, #8]	@ _18, MEM[(struct SysTick_Type *)3758153744B].VAL
 4560              	@ main.c:2088: 			byte <<= 1;
ARM GAS  /tmp/ccrMssCc.s 			page 81


 4561 002a 4000     		lsls	r0, r0, #1	@ tmp128, byte,
 4562 002c C0B2     		uxtb	r0, r0	@ byte, tmp128
 4563              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4564 002e 0B60     		str	r3, [r1]	@ _18, delay_us
 4565              	.L354:
 4566              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4567 0030 0B68     		ldr	r3, [r1]	@ delay_us.85_19, delay_us
 4568 0032 9468     		ldr	r4, [r2, #8]	@ _20, MEM[(struct SysTick_Type *)3758153744B].VAL
 4569 0034 1B1B     		subs	r3, r3, r4	@ tmp135, delay_us.85_19, _20
 4570 0036 112B     		cmp	r3, #17	@ tmp135,
 4571 0038 FAD9     		bls	.L354	@,
 4572              	@ main.c:2091: 			sSCK = 0; /* a slave shifts out next output data bit */
 4573 003a 3760     		str	r7, [r6]	@ tmp146, MEM[(volatile long unsigned int *)1109459348B]
 4574              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 4575 003c 9368     		ldr	r3, [r2, #8]	@ _14, MEM[(struct SysTick_Type *)3758153744B].VAL
 4576 003e 0B60     		str	r3, [r1]	@ _14, delay_us
 4577              	.L355:
 4578              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 4579 0040 0B68     		ldr	r3, [r1]	@ delay_us.85_15, delay_us
 4580 0042 9468     		ldr	r4, [r2, #8]	@ _16, MEM[(struct SysTick_Type *)3758153744B].VAL
 4581 0044 1B1B     		subs	r3, r3, r4	@ tmp142, delay_us.85_15, _16
 4582 0046 112B     		cmp	r3, #17	@ tmp142,
 4583 0048 FAD9     		bls	.L355	@,
 4584 004a 013D     		subs	r5, r5, #1	@ tmp143, ivtmp_2,
 4585              	@ main.c:2084: 		for(counter = 8; counter; counter--)
 4586 004c 15F0FF05 		ands	r5, r5, #255	@ ivtmp_2, tmp143,
 4587 0050 E2D1     		bne	.L356	@,
 4588              	@ main.c:2095: 	}
 4589 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 4590              	.L362:
 4591 0056 00BF     		.align	2
 4592              	.L361:
 4593 0058 00000000 		.word	delay_us
 4594 005c 94012142 		.word	1109459348
 4595 0060 10E000E0 		.word	-536813552
 4596 0064 9C012142 		.word	1109459356
 4597              		.size	cmd_LCD, .-cmd_LCD
 4598              		.section	.text.CalculateLux,"ax",%progbits
 4599              		.align	1
 4600              		.p2align 2,,3
 4601              		.global	CalculateLux
 4602              		.syntax unified
 4603              		.thumb
 4604              		.thumb_func
 4605              		.fpu softvfp
 4606              		.type	CalculateLux, %function
 4607              	CalculateLux:
 4608              		@ args = 4, pretend = 0, frame = 0
 4609              		@ frame_needed = 0, uses_anonymous_args = 0
 4610              		@ link register save eliminated.
 4611 0000 30B4     		push	{r4, r5}	@
 4612              	@ main.c:2096: u16  CalculateLux(u16 iGain, u16 tInt, u16 ch0, u16 ch1, int iType)	{
 4613 0002 029D     		ldr	r5, [sp, #8]	@ iType, iType
 4614              	@ main.c:2114:     switch (tInt)
 4615 0004 0029     		cmp	r1, #0	@ tInt
 4616 0006 47D0     		beq	.L365	@
 4617              	@ main.c:2125:        chScale = (1 << CH_SCALE);
ARM GAS  /tmp/ccrMssCc.s 			page 82


 4618 0008 40F6E774 		movw	r4, #4071	@ tmp153,
 4619 000c 0129     		cmp	r1, #1	@ tInt,
 4620 000e 0CBF     		ite	eq
 4621 0010 2146     		moveq	r1, r4	@ chScale, tmp153
 4622 0012 4FF48061 		movne	r1, #1024	@ chScale,
 4623              	.L366:
 4624              	@ main.c:2130:     if (!iGain) chScale = chScale << 4; // scale 1X to 16X
 4625 0016 00B9     		cbnz	r0, .L367	@ iGain,
 4626              	@ main.c:2130:     if (!iGain) chScale = chScale << 4; // scale 1X to 16X
 4627 0018 0901     		lsls	r1, r1, #4	@ chScale, chScale,
 4628              	.L367:
 4629              	@ main.c:2134:     channel1 = (ch1 * chScale) >> CH_SCALE;
 4630 001a 01FB03F3 		mul	r3, r1, r3	@ _4, chScale, ch1
 4631              	@ main.c:2133:     channel0 = (ch0 * chScale) >> CH_SCALE;
 4632 001e 01FB02F1 		mul	r1, r1, r2	@ tmp139, chScale, ch0
 4633              	@ main.c:2140:     if (channel0 != 0) ratio1 = (channel1 << (RATIO_SCALE+1)) / channel0;
 4634 0022 890A     		lsrs	r1, r1, #10	@ channel0, tmp139,
 4635              	@ main.c:2134:     channel1 = (ch1 * chScale) >> CH_SCALE;
 4636 0024 4FEA9320 		lsr	r0, r3, #10	@ channel1, _4,
 4637              	@ main.c:2140:     if (channel0 != 0) ratio1 = (channel1 << (RATIO_SCALE+1)) / channel0;
 4638 0028 18D0     		beq	.L368	@,
 4639              	@ main.c:2140:     if (channel0 != 0) ratio1 = (channel1 << (RATIO_SCALE+1)) / channel0;
 4640 002a 23F47F73 		bic	r3, r3, #1020	@ tmp140, _4,
 4641 002e 23F00303 		bic	r3, r3, #3	@ tmp140, tmp140,
 4642 0032 B3FBF1F3 		udiv	r3, r3, r1	@ ratio1, tmp140, channel0
 4643 0036 0133     		adds	r3, r3, #1	@ tmp144, ratio1,
 4644 0038 5B08     		lsrs	r3, r3, #1	@ prephitmp_18, tmp144,
 4645              	@ main.c:2148:     switch (iType)
 4646 003a ADB3     		cbz	r5, .L370	@ iType,
 4647 003c 012D     		cmp	r5, #1	@ iType,
 4648 003e 15D0     		beq	.L371	@,
 4649              	.L369:
 4650 0040 0022     		movs	r2, #0	@ _164,
 4651 0042 1346     		mov	r3, r2	@ _166, _164
 4652              	.L372:
 4653              	@ main.c:2191:     temp = (u32)((channel0 * b) - (channel1 * m));
 4654 0044 02FB01F1 		mul	r1, r2, r1	@ tmp148, _164, channel0
 4655 0048 03FB1011 		mls	r1, r3, r0, r1	@ temp, _166, channel1, tmp148
 4656 004c 21EAE171 		bic	r1, r1, r1, asr #31	@ temp, temp
 4657 0050 01F50051 		add	r1, r1, #8192	@ tmp150, temp,
 4658 0054 C1F38F30 		ubfx	r0, r1, #14, #16	@ <retval>, tmp150,,
 4659              	.L393:
 4660              	@ main.c:2203: 	}
 4661 0058 30BC     		pop	{r4, r5}	@
 4662 005a 7047     		bx	lr	@
 4663              	.L368:
 4664              	@ main.c:2148:     switch (iType)
 4665 005c FDB1     		cbz	r5, .L389	@ iType,
 4666 005e 012D     		cmp	r5, #1	@ iType,
 4667 0060 EED1     		bne	.L369	@,
 4668              	.L382:
 4669 0062 40F2AD13 		movw	r3, #429	@ _166,
 4670 0066 4FF40172 		mov	r2, #516	@ _164,
 4671 006a EBE7     		b	.L372	@
 4672              	.L371:
 4673              	@ main.c:2170:             if ((ratio >= 0) && (ratio <= K1C))
 4674 006c 432B     		cmp	r3, #67	@ prephitmp_18,
ARM GAS  /tmp/ccrMssCc.s 			page 83


 4675 006e F8D9     		bls	.L382	@,
 4676              	@ main.c:2172:             else if (ratio <= K2C)
 4677 0070 852B     		cmp	r3, #133	@ prephitmp_18,
 4678 0072 34D9     		bls	.L383	@,
 4679              	@ main.c:2174:             else if (ratio <= K3C)
 4680 0074 C82B     		cmp	r3, #200	@ prephitmp_18,
 4681 0076 37DD     		ble	.L384	@,
 4682              	@ main.c:2176:             else if (ratio <= K4C)
 4683 0078 B3F5857F 		cmp	r3, #266	@ prephitmp_18,
 4684 007c 43DD     		ble	.L385	@,
 4685              	@ main.c:2178:             else if (ratio <= K5C)
 4686 007e B3F5A77F 		cmp	r3, #334	@ prephitmp_18,
 4687 0082 45DB     		blt	.L386	@,
 4688              	@ main.c:2180:             else if (ratio <= K6C)
 4689 0084 B3F5CD7F 		cmp	r3, #410	@ prephitmp_18,
 4690 0088 51DD     		ble	.L387	@,
 4691              	@ main.c:2182:             else if (ratio <= K7C)
 4692 008a 40F29A22 		movw	r2, #666	@ tmp146,
 4693 008e 9342     		cmp	r3, r2	@ prephitmp_18, tmp146
 4694 0090 4BDC     		bgt	.L388	@,
 4695 0092 2B23     		movs	r3, #43	@ _166,
 4696 0094 3722     		movs	r2, #55	@ _164,
 4697 0096 D5E7     		b	.L372	@
 4698              	.L365:
 4699              	@ main.c:2117:        chScale = CHSCALE_TINT0;
 4700 0098 47F21751 		movw	r1, #29975	@ chScale,
 4701 009c BBE7     		b	.L366	@
 4702              	.L389:
 4703              	@ main.c:2148:     switch (iType)
 4704 009e 4FF4DF73 		mov	r3, #446	@ _166,
 4705 00a2 4FF4F972 		mov	r2, #498	@ _164,
 4706 00a6 CDE7     		b	.L372	@
 4707              	.L370:
 4708              	@ main.c:2151:         if ((ratio >= 0) && (ratio <= K1T))
 4709 00a8 402B     		cmp	r3, #64	@ prephitmp_18,
 4710 00aa F8D9     		bls	.L389	@,
 4711              	@ main.c:2153:             else if (ratio <= K2T)
 4712 00ac 802B     		cmp	r3, #128	@ prephitmp_18,
 4713 00ae 11D9     		bls	.L376	@,
 4714              	@ main.c:2155:             else if (ratio <= K3T)
 4715 00b0 C02B     		cmp	r3, #192	@ prephitmp_18,
 4716 00b2 1EDD     		ble	.L377	@,
 4717              	@ main.c:2157:             else if (ratio <= K4T)
 4718 00b4 B3F5807F 		cmp	r3, #256	@ prephitmp_18,
 4719 00b8 20DD     		ble	.L378	@,
 4720              	@ main.c:2159:             else if (ratio <= K5T)
 4721 00ba B3F59C7F 		cmp	r3, #312	@ prephitmp_18,
 4722 00be 2CDD     		ble	.L379	@,
 4723              	@ main.c:2161:             else if (ratio <= K6T)
 4724 00c0 B3F5CD7F 		cmp	r3, #410	@ prephitmp_18,
 4725 00c4 2EDD     		ble	.L380	@,
 4726              	@ main.c:2163:             else if (ratio <= K7T)
 4727 00c6 40F29A22 		movw	r2, #666	@ tmp145,
 4728 00ca 9342     		cmp	r3, r2	@ prephitmp_18, tmp145
 4729 00cc 2DDC     		bgt	.L388	@,
 4730 00ce 1223     		movs	r3, #18	@ _166,
 4731 00d0 1822     		movs	r2, #24	@ _164,
ARM GAS  /tmp/ccrMssCc.s 			page 84


 4732 00d2 B7E7     		b	.L372	@
 4733              	.L376:
 4734 00d4 40F2D123 		movw	r3, #721	@ _166,
 4735 00d8 4FF40572 		mov	r2, #532	@ _164,
 4736 00dc B2E7     		b	.L372	@
 4737              	.L383:
 4738 00de 40F2C123 		movw	r3, #705	@ _166,
 4739 00e2 4FF40A72 		mov	r2, #552	@ _164,
 4740 00e6 ADE7     		b	.L372	@
 4741              	.L384:
 4742 00e8 40F26333 		movw	r3, #867	@ _166,
 4743 00ec 40F25322 		movw	r2, #595	@ _164,
 4744 00f0 A8E7     		b	.L372	@
 4745              	.L377:
 4746 00f2 40F27B33 		movw	r3, #891	@ _166,
 4747 00f6 40F23F22 		movw	r2, #575	@ _164,
 4748 00fa A3E7     		b	.L372	@
 4749              	.L378:
 4750 00fc 40F2FE33 		movw	r3, #1022	@ _166,
 4751 0100 4FF41C72 		mov	r2, #624	@ _164,
 4752 0104 9EE7     		b	.L372	@
 4753              	.L385:
 4754 0106 40F2DF33 		movw	r3, #991	@ _166,
 4755 010a 40F28222 		movw	r2, #642	@ _164,
 4756 010e 99E7     		b	.L372	@
 4757              	.L386:
 4758 0110 40F2DD13 		movw	r3, #477	@ _166,
 4759 0114 40F27712 		movw	r2, #375	@ _164,
 4760 0118 94E7     		b	.L372	@
 4761              	.L379:
 4762 011a 4FF4FE73 		mov	r3, #508	@ _166,
 4763 011e 40F26F12 		movw	r2, #367	@ _164,
 4764 0122 8FE7     		b	.L372	@
 4765              	.L380:
 4766 0124 FB23     		movs	r3, #251	@ _166,
 4767 0126 D222     		movs	r2, #210	@ _164,
 4768 0128 8CE7     		b	.L372	@
 4769              	.L388:
 4770 012a 0020     		movs	r0, #0	@ <retval>,
 4771              	@ main.c:2202:     return(lux);
 4772 012c 94E7     		b	.L393	@
 4773              	.L387:
 4774 012e 40F22713 		movw	r3, #295	@ _166,
 4775 0132 40F20112 		movw	r2, #257	@ _164,
 4776 0136 85E7     		b	.L372	@
 4777              		.size	CalculateLux, .-CalculateLux
 4778              		.section	.text.TSL2561_i2c,"ax",%progbits
 4779              		.align	1
 4780              		.p2align 2,,3
 4781              		.global	TSL2561_i2c
 4782              		.syntax unified
 4783              		.thumb
 4784              		.thumb_func
 4785              		.fpu softvfp
 4786              		.type	TSL2561_i2c, %function
 4787              	TSL2561_i2c:
 4788              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccrMssCc.s 			page 85


 4789              		@ frame_needed = 0, uses_anonymous_args = 0
 4790              	@ main.c:2218: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 4791 0000 0122     		movs	r2, #1	@ tmp142,
 4792              	@ main.c:2204: void TSL2561_i2c(void){
 4793 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 4794              	@ main.c:2238: 		buf[0]=0x80;
 4795 0006 4FF46070 		mov	r0, #896	@ tmp159,
 4796              	@ main.c:2220: 		I2C2_CR1_SWRST_bb = 0;
 4797 000a 0027     		movs	r7, #0	@ tmp146,
 4798              	@ main.c:2221: 		I2C2->TRISE = 37;               		// limit slope
 4799 000c 2526     		movs	r6, #37	@ tmp149,
 4800              	@ main.c:2223: 		I2C2->CCR = (F_CPU/(4*400000));             // setup speed (100kHz)
 4801 000e 2D25     		movs	r5, #45	@ tmp152,
 4802              	@ main.c:2226: 		I2C2->CR2 = I2C_CR2_FREQ_36MHz;     // config I2C2 module
 4803 0010 2424     		movs	r4, #36	@ tmp155,
 4804              	@ main.c:2216: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// ...009900 PB11=SDA (Open-d
 4805 0012 3249     		ldr	r1, .L400	@ tmp138,
 4806              	@ main.c:2204: void TSL2561_i2c(void){
 4807 0014 82B0     		sub	sp, sp, #8	@,,
 4808              	@ main.c:2216: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// ...009900 PB11=SDA (Open-d
 4809 0016 4B68     		ldr	r3, [r1, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 4810              	@ main.c:2238: 		buf[0]=0x80;
 4811 0018 0DF10808 		add	r8, sp, #8	@ tmp195,,
 4812              	@ main.c:2216: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// ...009900 PB11=SDA (Open-d
 4813 001c 23F47F43 		bic	r3, r3, #65280	@ tmp139, _1,
 4814 0020 43F45D43 		orr	r3, r3, #56576	@ _3, tmp139,
 4815 0024 4B60     		str	r3, [r1, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 4816              	@ main.c:2218: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 4817 0026 2E4B     		ldr	r3, .L400+4	@ tmp141,
 4818              	@ main.c:2219: 		I2C2_CR1_SWRST_bb = 1;            	// force software reset of I2C peripheral
 4819 0028 2E49     		ldr	r1, .L400+8	@ tmp143,
 4820              	@ main.c:2218: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 4821 002a 1A60     		str	r2, [r3]	@ tmp142, MEM[(volatile long unsigned int *)1111622616B]
 4822              	@ main.c:2221: 		I2C2->TRISE = 37;               		// limit slope
 4823 002c 2E4B     		ldr	r3, .L400+12	@ tmp147,
 4824              	@ main.c:2219: 		I2C2_CR1_SWRST_bb = 1;            	// force software reset of I2C peripheral
 4825 002e 0A60     		str	r2, [r1]	@ tmp142, MEM[(volatile long unsigned int *)1108017212B]
 4826              	@ main.c:2220: 		I2C2_CR1_SWRST_bb = 0;
 4827 0030 0F60     		str	r7, [r1]	@ tmp146, MEM[(volatile long unsigned int *)1108017212B]
 4828              	@ main.c:2221: 		I2C2->TRISE = 37;               		// limit slope
 4829 0032 1E84     		strh	r6, [r3, #32]	@ movhi	@ tmp149, MEM[(struct I2C_TypeDef *)1073764352B].TRISE
 4830              	@ main.c:2223: 		I2C2->CCR = (F_CPU/(4*400000));             // setup speed (100kHz)
 4831 0034 9D83     		strh	r5, [r3, #28]	@ movhi	@ tmp152, MEM[(struct I2C_TypeDef *)1073764352B].CCR
 4832              	@ main.c:2226: 		I2C2->CR2 = I2C_CR2_FREQ_36MHz;     // config I2C2 module
 4833 0036 9C80     		strh	r4, [r3, #4]	@ movhi	@ tmp155, MEM[(struct I2C_TypeDef *)1073764352B].CR2
 4834              	@ main.c:2227: 		I2C2_CR1_PE_bb = 1;               	// enable peripheral
 4835 0038 41F83C2C 		str	r2, [r1, #-60]	@ tmp142, MEM[(volatile long unsigned int *)1108017152B]
 4836              	@ main.c:2238: 		buf[0]=0x80;
 4837 003c 28F8080D 		strh	r0, [r8, #-8]!	@ movhi	@ tmp159, MEM[(u08[3] *)&buf]
 4838              	@ main.c:2240: 		i2c2_write(TSL2561_ADR,buf,2); // init control Power UP
 4839 0040 4146     		mov	r1, r8	@, tmp195
 4840 0042 0222     		movs	r2, #2	@,
 4841 0044 7220     		movs	r0, #114	@,
 4842 0046 FFF7FEFF 		bl	i2c2_write	@
 4843              	@ main.c:2241: 		buf[0]=0x81;
 4844 004a 40F28123 		movw	r3, #641	@ tmp162,
 4845              	@ main.c:2243: 		i2c2_write(TSL2561_ADR,buf,2); // init Timing 
ARM GAS  /tmp/ccrMssCc.s 			page 86


 4846 004e 4146     		mov	r1, r8	@, tmp195
 4847 0050 0222     		movs	r2, #2	@,
 4848 0052 7220     		movs	r0, #114	@,
 4849              	@ main.c:2241: 		buf[0]=0x81;
 4850 0054 ADF80030 		strh	r3, [sp]	@ movhi	@ tmp162, MEM[(u08[3] *)&buf]
 4851              	@ main.c:2243: 		i2c2_write(TSL2561_ADR,buf,2); // init Timing 
 4852 0058 FFF7FEFF 		bl	i2c2_write	@
 4853 005c 234D     		ldr	r5, .L400+16	@ tmp196,
 4854 005e 244F     		ldr	r7, .L400+20	@ tmp194,
 4855              	@ main.c:2248: 			if(STCLK_MS*300 < (trg0 - SysTick->VAL)){
 4856 0060 244C     		ldr	r4, .L400+24	@ tmp165,
 4857 0062 254E     		ldr	r6, .L400+28	@ tmp167,
 4858              	.L396:
 4859 0064 2B68     		ldr	r3, [r5]	@ trg0.159_4, trg0
 4860 0066 A268     		ldr	r2, [r4, #8]	@ _5, MEM[(struct SysTick_Type *)3758153744B].VAL
 4861 0068 9B1A     		subs	r3, r3, r2	@ tmp166, trg0.159_4, _5
 4862 006a B342     		cmp	r3, r6	@ tmp166, tmp167
 4863 006c FAD9     		bls	.L396	@,
 4864              	@ main.c:2249: 				trg0 = SysTick->VAL;
 4865 006e D4F808C0 		ldr	ip, [r4, #8]	@ _7, MEM[(struct SysTick_Type *)3758153744B].VAL
 4866              	@ main.c:2255: 				i2c2_read(TSL2561_ADR, DATA0LOW, buf,2 );
 4867 0072 0223     		movs	r3, #2	@,
 4868 0074 4246     		mov	r2, r8	@, tmp195
 4869 0076 8C21     		movs	r1, #140	@,
 4870 0078 7220     		movs	r0, #114	@,
 4871              	@ main.c:2249: 				trg0 = SysTick->VAL;
 4872 007a C5F800C0 		str	ip, [r5]	@ _7, trg0
 4873              	@ main.c:2255: 				i2c2_read(TSL2561_ADR, DATA0LOW, buf,2 );
 4874 007e FFF7FEFF 		bl	i2c2_read	@
 4875              	@ main.c:2256: 				ch0 = (buf[1]<<8)+buf[0];
 4876 0082 9DF80120 		ldrb	r2, [sp, #1]	@ zero_extendqisi2	@ buf, buf
 4877 0086 9DF800A0 		ldrb	r10, [sp]	@ zero_extendqisi2	@ buf, buf
 4878              	@ main.c:2257: 				i2c2_read(TSL2561_ADR, DATA1LOW, buf,2 );
 4879 008a 8E21     		movs	r1, #142	@,
 4880 008c 0223     		movs	r3, #2	@,
 4881              	@ main.c:2256: 				ch0 = (buf[1]<<8)+buf[0];
 4882 008e 0AEB022A 		add	r10, r10, r2, lsl #8	@ tmp177, buf, buf,
 4883              	@ main.c:2257: 				i2c2_read(TSL2561_ADR, DATA1LOW, buf,2 );
 4884 0092 7220     		movs	r0, #114	@,
 4885 0094 4246     		mov	r2, r8	@, tmp195
 4886 0096 FFF7FEFF 		bl	i2c2_read	@
 4887              	@ main.c:2258: 				ch1	= (buf[1]<<8)+buf[0];
 4888 009a 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2	@ buf, buf
 4889 009e 9DF80090 		ldrb	r9, [sp]	@ zero_extendqisi2	@ buf, buf
 4890              	@ main.c:2256: 				ch0 = (buf[1]<<8)+buf[0];
 4891 00a2 1FFA8AFA 		uxth	r10, r10	@ ch0, tmp177
 4892              	@ main.c:2258: 				ch1	= (buf[1]<<8)+buf[0];
 4893 00a6 09EB0329 		add	r9, r9, r3, lsl #8	@ tmp185, buf, buf,
 4894              	@ main.c:2268: 				sint2uart(ch0);
 4895 00aa 5046     		mov	r0, r10	@, ch0
 4896 00ac FFF7FEFF 		bl	sint2uart	@
 4897              	@ main.c:2258: 				ch1	= (buf[1]<<8)+buf[0];
 4898 00b0 1FFA89F9 		uxth	r9, r9	@ ch1, tmp185
 4899              	@ main.c:2269: 				UaPutK(",");	
 4900 00b4 1148     		ldr	r0, .L400+32	@,
 4901 00b6 FFF7FEFF 		bl	UaPutK	@
 4902              	@ main.c:2270: 				sint2uart(ch1);
ARM GAS  /tmp/ccrMssCc.s 			page 87


 4903 00ba 4846     		mov	r0, r9	@, ch1
 4904 00bc FFF7FEFF 		bl	sint2uart	@
 4905              	@ main.c:2271: 				UaPutK("\r\n");	
 4906 00c0 0F48     		ldr	r0, .L400+36	@,
 4907 00c2 FFF7FEFF 		bl	UaPutK	@
 4908              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 4909 00c6 A368     		ldr	r3, [r4, #8]	@ _52, MEM[(struct SysTick_Type *)3758153744B].VAL
 4910 00c8 3B60     		str	r3, [r7]	@ _52, Timt
 4911              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 4912 00ca 3B68     		ldr	r3, [r7]	@ Timt.84_49, Timt
 4913 00cc A268     		ldr	r2, [r4, #8]	@ _50, MEM[(struct SysTick_Type *)3758153744B].VAL
 4914 00ce 9B1A     		subs	r3, r3, r2	@ _51, Timt.84_49, _50
 4915 00d0 0193     		str	r3, [sp, #4]	@ _51, MEM[(volatile u32 *)&tim]
 4916 00d2 3B68     		ldr	r3, [r7]	@ Timt.84_42, Timt
 4917 00d4 A268     		ldr	r2, [r4, #8]	@ _47, MEM[(struct SysTick_Type *)3758153744B].VAL
 4918 00d6 9B1A     		subs	r3, r3, r2	@ _48, Timt.84_42, _47
 4919 00d8 0193     		str	r3, [sp, #4]	@ _48, MEM[(volatile u32 *)&tim]
 4920 00da C3E7     		b	.L396	@
 4921              	.L401:
 4922              		.align	2
 4923              	.L400:
 4924 00dc 000C0140 		.word	1073810432
 4925 00e0 D8034242 		.word	1111622616
 4926 00e4 3C000B42 		.word	1108017212
 4927 00e8 00580040 		.word	1073764352
 4928 00ec 00000000 		.word	trg0
 4929 00f0 00000000 		.word	Timt
 4930 00f4 10E000E0 		.word	-536813552
 4931 00f8 E0322900 		.word	2700000
 4932 00fc 00000000 		.word	.LC67
 4933 0100 04000000 		.word	.LC13
 4934              		.size	TSL2561_i2c, .-TSL2561_i2c
 4935              		.section	.text.set_mode,"ax",%progbits
 4936              		.align	1
 4937              		.p2align 2,,3
 4938              		.global	set_mode
 4939              		.syntax unified
 4940              		.thumb
 4941              		.thumb_func
 4942              		.fpu softvfp
 4943              		.type	set_mode, %function
 4944              	set_mode:
 4945              		@ args = 0, pretend = 0, frame = 8
 4946              		@ frame_needed = 0, uses_anonymous_args = 0
 4947 0000 30B5     		push	{r4, r5, lr}	@
 4948 0002 83B0     		sub	sp, sp, #12	@,,
 4949              	@ main.c:2304: 		i2c1_read(APDS9960_ADR, APDS9960_ENABLE, buf,1 );
 4950 0004 0123     		movs	r3, #1	@,
 4951              	@ main.c:2301: void set_mode( u08 mode, bool enable )	{
 4952 0006 0446     		mov	r4, r0	@ mode, mode
 4953 0008 0D46     		mov	r5, r1	@ enable, enable
 4954              	@ main.c:2304: 		i2c1_read(APDS9960_ADR, APDS9960_ENABLE, buf,1 );
 4955 000a 01AA     		add	r2, sp, #4	@ tmp134,,
 4956 000c 8021     		movs	r1, #128	@,
 4957 000e 7220     		movs	r0, #114	@,
 4958 0010 FFF7FEFF 		bl	i2c1_read	@
 4959              	@ main.c:2305: 		uint8_t reg_val = buf[0];
ARM GAS  /tmp/ccrMssCc.s 			page 88


 4960 0014 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2	@ reg_val, buf
 4961              	@ main.c:2307:     if( reg_val == ERROR )
 4962 0018 FF2B     		cmp	r3, #255	@ reg_val,
 4963 001a 0FD0     		beq	.L402	@,
 4964              	@ main.c:2312:     if( mode == ALL )
 4965 001c 062C     		cmp	r4, #6	@ mode,
 4966 001e 0FD9     		bls	.L404	@,
 4967              	@ main.c:2316:       reg_val = 0x7F;
 4968 0020 002D     		cmp	r5, #0	@ enable,
 4969 0022 0CBF     		ite	eq
 4970 0024 0023     		moveq	r3, #0	@ reg_val,
 4971 0026 7F23     		movne	r3, #127	@ reg_val,
 4972              	.L405:
 4973              	@ main.c:2325: 		buf[0]=APDS9960_ENABLE;			buf[1]=reg_val; 			i2c1_write(APDS9960_ADR,buf,2); 
 4974 0028 8024     		movs	r4, #128	@ tmp129,
 4975 002a 01A9     		add	r1, sp, #4	@ tmp135,,
 4976 002c 0222     		movs	r2, #2	@,
 4977 002e 7220     		movs	r0, #114	@,
 4978 0030 8DF80530 		strb	r3, [sp, #5]	@ reg_val, buf
 4979 0034 8DF80440 		strb	r4, [sp, #4]	@ tmp129, buf
 4980 0038 FFF7FEFF 		bl	i2c1_write	@
 4981              	.L402:
 4982              	@ main.c:2326: 	}
 4983 003c 03B0     		add	sp, sp, #12	@,,
 4984              		@ sp needed	@
 4985 003e 30BD     		pop	{r4, r5, pc}	@
 4986              	.L404:
 4987              	@ main.c:2318:       reg_val &= ~( 1 << mode );
 4988 0040 0120     		movs	r0, #1	@ tmp123,
 4989 0042 A040     		lsls	r0, r0, r4	@ tmp122, tmp123, mode
 4990 0044 5BB2     		sxtb	r3, r3	@ reg_val.160_5, reg_val
 4991 0046 40B2     		sxtb	r0, r0	@ _3, tmp122
 4992              	@ main.c:2319:       if( enable )
 4993 0048 15B1     		cbz	r5, .L413	@ enable,
 4994              	@ main.c:2320:       reg_val |= ( 1 << mode );
 4995 004a 1843     		orrs	r0, r0, r3	@, tmp128, _3, reg_val.160_5
 4996 004c C3B2     		uxtb	r3, r0	@ reg_val, tmp128
 4997 004e EBE7     		b	.L405	@
 4998              	.L413:
 4999              	@ main.c:2318:       reg_val &= ~( 1 << mode );
 5000 0050 23EA0003 		bic	r3, r3, r0	@ tmp127, reg_val.160_5, _3
 5001 0054 DBB2     		uxtb	r3, r3	@ reg_val, tmp127
 5002 0056 E7E7     		b	.L405	@
 5003              		.size	set_mode, .-set_mode
 5004              		.section	.text.MAX44009_i2c,"ax",%progbits
 5005              		.align	1
 5006              		.p2align 2,,3
 5007              		.global	MAX44009_i2c
 5008              		.syntax unified
 5009              		.thumb
 5010              		.thumb_func
 5011              		.fpu softvfp
 5012              		.type	MAX44009_i2c, %function
 5013              	MAX44009_i2c:
 5014              		@ args = 0, pretend = 0, frame = 16
 5015              		@ frame_needed = 0, uses_anonymous_args = 0
 5016 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
ARM GAS  /tmp/ccrMssCc.s 			page 89


 5017              	@ main.c:2343: 		I2C2->CR2     = 0;
 5018 0004 0020     		movs	r0, #0	@ tmp203,
 5019              	@ main.c:2344: 		I2C2->CCR     = (F_CPU/(4*400000));             	// setup speed (100kHz)
 5020 0006 2D21     		movs	r1, #45	@ tmp206,
 5021              	@ main.c:2341: 		I2C2->TRISE   = 37;               								// limit slope
 5022 0008 2525     		movs	r5, #37	@ tmp200,
 5023              	@ main.c:2338: 		GPIOB->CRH    = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// PB11=SDA (Open-drain) P
 5024 000a 784F     		ldr	r7, .L421	@ tmp193,
 5025              	@ main.c:2377: 		buf[0]=0x02;
 5026 000c 44F20204 		movw	r4, #16386	@ tmp234,
 5027              	@ main.c:2338: 		GPIOB->CRH    = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// PB11=SDA (Open-drain) P
 5028 0010 7B68     		ldr	r3, [r7, #4]	@ _2, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5029              	@ main.c:2339: 		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 5030 0012 774A     		ldr	r2, .L421+4	@ tmp196,
 5031              	@ main.c:2338: 		GPIOB->CRH    = (GPIOB->CRH & 0xffff00ff) | 0x0000dd00;	// PB11=SDA (Open-drain) P
 5032 0014 23F47F43 		bic	r3, r3, #65280	@ tmp194, _2,
 5033 0018 43F45D43 		orr	r3, r3, #56576	@ _4, tmp194,
 5034 001c 7B60     		str	r3, [r7, #4]	@ _4, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5035              	@ main.c:2339: 		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 5036 001e D2F81CC0 		ldr	ip, [r2, #28]	@ _5, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 5037              	@ main.c:2341: 		I2C2->TRISE   = 37;               								// limit slope
 5038 0022 744B     		ldr	r3, .L421+8	@ tmp198,
 5039              	@ main.c:2339: 		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 5040 0024 4CF4800C 		orr	ip, ip, #4194304	@ _6, _5,
 5041 0028 C2F81CC0 		str	ip, [r2, #28]	@ _6, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 5042              	@ main.c:2341: 		I2C2->TRISE   = 37;               								// limit slope
 5043 002c 1D84     		strh	r5, [r3, #32]	@ movhi	@ tmp200, MEM[(struct I2C_TypeDef *)1073764352B].TRISE
 5044              	@ main.c:2343: 		I2C2->CR2     = 0;
 5045 002e 9880     		strh	r0, [r3, #4]	@ movhi	@ tmp203, MEM[(struct I2C_TypeDef *)1073764352B].CR2
 5046              	@ main.c:2344: 		I2C2->CCR     = (F_CPU/(4*400000));             	// setup speed (100kHz)
 5047 0030 9983     		strh	r1, [r3, #28]	@ movhi	@ tmp206, MEM[(struct I2C_TypeDef *)1073764352B].CCR
 5048              	@ main.c:2346: 		I2C2->CR1    |= I2C_CR1_PE;											  // I2C2 Pheripherial enable
 5049 0032 B3F800C0 		ldrh	ip, [r3]	@, MEM[(struct I2C_TypeDef *)1073764352B].CR1
 5050              	@ main.c:2327: void MAX44009_i2c(void){
 5051 0036 87B0     		sub	sp, sp, #28	@,,
 5052              	@ main.c:2346: 		I2C2->CR1    |= I2C_CR1_PE;											  // I2C2 Pheripherial enable
 5053 0038 4CF0010C 		orr	ip, ip, #1	@ _8, MEM[(struct I2C_TypeDef *)1073764352B].CR1,
 5054 003c A3F800C0 		strh	ip, [r3]	@ movhi	@ _8, MEM[(struct I2C_TypeDef *)1073764352B].CR1
 5055              	@ main.c:2348: 		AFIO->MAPR   |= AFIO_MAPR_I2C1_REMAP;		// Remap TIM3 CH2->PB5
 5056 0040 DFF8D8C1 		ldr	ip, .L421+48	@ tmp212,
 5057              	@ main.c:2377: 		buf[0]=0x02;
 5058 0044 06AE     		add	r6, sp, #24	@ tmp332,,
 5059              	@ main.c:2348: 		AFIO->MAPR   |= AFIO_MAPR_I2C1_REMAP;		// Remap TIM3 CH2->PB5
 5060 0046 DCF80430 		ldr	r3, [ip, #4]	@ _9, MEM[(struct AFIO_TypeDef *)1073807360B].MAPR
 5061 004a 43F00203 		orr	r3, r3, #2	@ _10, _9,
 5062 004e CCF80430 		str	r3, [ip, #4]	@ _10, MEM[(struct AFIO_TypeDef *)1073807360B].MAPR
 5063              	@ main.c:2349: 		GPIOB->CRH    = (GPIOB->CRH & 0xffffff00) | 0x000000dd;	// PB9=SDA (Alternate Open
 5064 0052 7B68     		ldr	r3, [r7, #4]	@ _11, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5065 0054 23F0FF03 		bic	r3, r3, #255	@ tmp215, _11,
 5066 0058 43F0DD03 		orr	r3, r3, #221	@ _13, tmp215,
 5067 005c 7B60     		str	r3, [r7, #4]	@ _13, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5068              	@ main.c:2350: 		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 5069 005e D769     		ldr	r7, [r2, #28]	@ _14, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 5070              	@ main.c:2351: 		I2C1->TRISE   = 37;               		// limit slope
 5071 0060 654B     		ldr	r3, .L421+12	@ tmp219,
 5072              	@ main.c:2350: 		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 5073 0062 47F40017 		orr	r7, r7, #2097152	@ _15, _14,
ARM GAS  /tmp/ccrMssCc.s 			page 90


 5074 0066 D761     		str	r7, [r2, #28]	@ _15, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 5075              	@ main.c:2351: 		I2C1->TRISE   = 37;               		// limit slope
 5076 0068 1D84     		strh	r5, [r3, #32]	@ movhi	@ tmp200, MEM[(struct I2C_TypeDef *)1073763328B].TRISE
 5077              	@ main.c:2352: 		I2C1->CR2     = 0;
 5078 006a 9880     		strh	r0, [r3, #4]	@ movhi	@ tmp203, MEM[(struct I2C_TypeDef *)1073763328B].CR2
 5079              	@ main.c:2353: 		I2C1->CCR     = (F_CPU/(4*400000));   // setup speed (400kHz)
 5080 006c 9983     		strh	r1, [r3, #28]	@ movhi	@ tmp206, MEM[(struct I2C_TypeDef *)1073763328B].CCR
 5081              	@ main.c:2354: 		I2C1->CR1    |= I2C_CR1_PE;						// I2C2 Pheripherial enable
 5082 006e 1988     		ldrh	r1, [r3]	@, MEM[(struct I2C_TypeDef *)1073763328B].CR1
 5083              	@ main.c:2379: 		i2c2_write(MAX44009_ADR,buf,2); // init control Power UP
 5084 0070 0222     		movs	r2, #2	@,
 5085              	@ main.c:2354: 		I2C1->CR1    |= I2C_CR1_PE;						// I2C2 Pheripherial enable
 5086 0072 41F00101 		orr	r1, r1, #1	@ _17, MEM[(struct I2C_TypeDef *)1073763328B].CR1,
 5087 0076 1980     		strh	r1, [r3]	@ movhi	@ _17, MEM[(struct I2C_TypeDef *)1073763328B].CR1
 5088              	@ main.c:2377: 		buf[0]=0x02;
 5089 0078 26F80C4D 		strh	r4, [r6, #-12]!	@ movhi	@ tmp234, MEM[(u08[10] *)&buf]
 5090              	@ main.c:2379: 		i2c2_write(MAX44009_ADR,buf,2); // init control Power UP
 5091 007c 3146     		mov	r1, r6	@, tmp332
 5092 007e 9420     		movs	r0, #148	@,
 5093 0080 FFF7FEFF 		bl	i2c2_write	@
 5094              	@ main.c:2397: 		set_mode( AMBIENT_LIGHT, true );
 5095 0084 0121     		movs	r1, #1	@,
 5096 0086 0846     		mov	r0, r1	@,
 5097 0088 FFF7FEFF 		bl	set_mode	@
 5098              	@ main.c:2400: 		i2c1_read(APDS9960_ADR, APDS9960_ID, buf,1 );
 5099 008c 3246     		mov	r2, r6	@, tmp332
 5100 008e 0123     		movs	r3, #1	@,
 5101 0090 9221     		movs	r1, #146	@,
 5102 0092 7220     		movs	r0, #114	@,
 5103 0094 FFF7FEFF 		bl	i2c1_read	@
 5104              	@ main.c:2401: 		UaPutK("\r\n APDS9960_ID=0x");	
 5105 0098 5848     		ldr	r0, .L421+16	@,
 5106 009a FFF7FEFF 		bl	UaPutK	@
 5107              	@ main.c:2402: 		hex2uart(buf[0],2);
 5108 009e 0221     		movs	r1, #2	@,
 5109 00a0 9DF80C00 		ldrb	r0, [sp, #12]	@ zero_extendqisi2	@, buf
 5110 00a4 FFF7FEFF 		bl	hex2uart	@
 5111              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 5112 00a8 554B     		ldr	r3, .L421+20	@ tmp239,
 5113 00aa 564A     		ldr	r2, .L421+24	@ tmp330,
 5114              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 5115 00ac 1846     		mov	r0, r3	@ tmp242, tmp239
 5116              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 5117 00ae 9B68     		ldr	r3, [r3, #8]	@ _106, MEM[(struct SysTick_Type *)3758153744B].VAL
 5118              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 5119 00b0 5549     		ldr	r1, .L421+28	@ tmp244,
 5120              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 5121 00b2 1360     		str	r3, [r2]	@ _106, delay_us
 5122              	.L415:
 5123              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 5124 00b4 1368     		ldr	r3, [r2]	@ delay_us.72_123, delay_us
 5125 00b6 8468     		ldr	r4, [r0, #8]	@ _124, MEM[(struct SysTick_Type *)3758153744B].VAL
 5126 00b8 1B1B     		subs	r3, r3, r4	@ tmp243, delay_us.72_123, _124
 5127 00ba 8B42     		cmp	r3, r1	@ tmp243, tmp244
 5128 00bc FAD9     		bls	.L415	@,
 5129 00be 534D     		ldr	r5, .L421+32	@ tmp331,
 5130              	@ main.c:2408: 			if(STCLK_MS*100 < (trg0 - SysTick->VAL)){
ARM GAS  /tmp/ccrMssCc.s 			page 91


 5131 00c0 4F4C     		ldr	r4, .L421+20	@ tmp246,
 5132 00c2 534F     		ldr	r7, .L421+36	@ tmp248,
 5133              	@ main.c:2420: 				lux = ((1<<exponent) * mantissa * 45 ) /1000 ;
 5134 00c4 DFF85881 		ldr	r8, .L421+52	@ tmp270,
 5135              	.L416:
 5136              	@ main.c:2408: 			if(STCLK_MS*100 < (trg0 - SysTick->VAL)){
 5137 00c8 2B68     		ldr	r3, [r5]	@ trg0.162_20, trg0
 5138 00ca A268     		ldr	r2, [r4, #8]	@ _21, MEM[(struct SysTick_Type *)3758153744B].VAL
 5139 00cc 9B1A     		subs	r3, r3, r2	@ tmp247, trg0.162_20, _21
 5140 00ce BB42     		cmp	r3, r7	@ tmp247, tmp248
 5141 00d0 FAD9     		bls	.L416	@,
 5142              	@ main.c:2409: 				trg0 = SysTick->VAL;
 5143 00d2 A368     		ldr	r3, [r4, #8]	@ _23, MEM[(struct SysTick_Type *)3758153744B].VAL
 5144              	@ main.c:2411: 				UaPutK("\r\n");	
 5145 00d4 4F48     		ldr	r0, .L421+40	@,
 5146              	@ main.c:2409: 				trg0 = SysTick->VAL;
 5147 00d6 2B60     		str	r3, [r5]	@ _23, trg0
 5148              	@ main.c:2411: 				UaPutK("\r\n");	
 5149 00d8 FFF7FEFF 		bl	UaPutK	@
 5150              	@ main.c:2415: 				i2c2_read(MAX44009_ADR, 0x03, buf,2 );
 5151 00dc 0321     		movs	r1, #3	@,
 5152 00de 3246     		mov	r2, r6	@, tmp332
 5153 00e0 0223     		movs	r3, #2	@,
 5154 00e2 9420     		movs	r0, #148	@,
 5155 00e4 FFF7FEFF 		bl	i2c2_read	@
 5156              	@ main.c:2417: 				exponent = (buf[0] & 0xF0) >> 4;
 5157 00e8 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2	@ _24, buf
 5158              	@ main.c:2418: 				mantissa = ((buf[0] & 0x0F) << 4) | (buf[1] & 0x0F);
 5159 00ec 9DF80D20 		ldrb	r2, [sp, #13]	@ zero_extendqisi2	@ buf, buf
 5160 00f0 1801     		lsls	r0, r3, #4	@ tmp253, _24,
 5161 00f2 02F00F02 		and	r2, r2, #15	@ tmp258, buf,
 5162 00f6 C0B2     		uxtb	r0, r0	@ tmp254, tmp253
 5163              	@ main.c:2417: 				exponent = (buf[0] & 0xF0) >> 4;
 5164 00f8 1B09     		lsrs	r3, r3, #4	@ exponent, _24,
 5165              	@ main.c:2418: 				mantissa = ((buf[0] & 0x0F) << 4) | (buf[1] & 0x0F);
 5166 00fa 1043     		orrs	r0, r0, r2	@, mantissa, tmp254, tmp258
 5167              	@ main.c:2420: 				lux = ((1<<exponent) * mantissa * 45 ) /1000 ;
 5168 00fc 9840     		lsls	r0, r0, r3	@ tmp262, mantissa, exponent
 5169 00fe 00EB4000 		add	r0, r0, r0, lsl #1	@ tmp265, tmp262, tmp262,
 5170 0102 C0EB0010 		rsb	r0, r0, r0, lsl #4	@ tmp267, tmp265, tmp265,
 5171 0106 A8FB0030 		umull	r3, r0, r8, r0	@ tmp336, tmp269, tmp270, tmp267
 5172              	@ main.c:2423: 				sint2uart(lux);
 5173 010a 8009     		lsrs	r0, r0, #6	@, tmp269,
 5174 010c FFF7FEFF 		bl	sint2uart	@
 5175              	@ main.c:2424: 				UaPutK(",");	
 5176 0110 4148     		ldr	r0, .L421+44	@,
 5177 0112 FFF7FEFF 		bl	UaPutK	@
 5178              	@ main.c:2426: 				i2c2_read(TSL2561_ADR, DATA0LOW, buf,2 );
 5179 0116 3246     		mov	r2, r6	@, tmp332
 5180 0118 0223     		movs	r3, #2	@,
 5181 011a 8C21     		movs	r1, #140	@,
 5182 011c 7220     		movs	r0, #114	@,
 5183 011e FFF7FEFF 		bl	i2c2_read	@
 5184              	@ main.c:2427: 				ch0 = (buf[1]<<8)+buf[0];
 5185 0122 9DF80D20 		ldrb	r2, [sp, #13]	@ zero_extendqisi2	@ buf, buf
 5186 0126 9DF80C90 		ldrb	r9, [sp, #12]	@ zero_extendqisi2	@ buf, buf
 5187              	@ main.c:2428: 				i2c2_read(TSL2561_ADR, DATA1LOW, buf,2 );
ARM GAS  /tmp/ccrMssCc.s 			page 92


 5188 012a 0223     		movs	r3, #2	@,
 5189              	@ main.c:2427: 				ch0 = (buf[1]<<8)+buf[0];
 5190 012c 09EB0229 		add	r9, r9, r2, lsl #8	@ tmp284, buf, buf,
 5191              	@ main.c:2428: 				i2c2_read(TSL2561_ADR, DATA1LOW, buf,2 );
 5192 0130 8E21     		movs	r1, #142	@,
 5193 0132 3246     		mov	r2, r6	@, tmp332
 5194 0134 7220     		movs	r0, #114	@,
 5195 0136 FFF7FEFF 		bl	i2c2_read	@
 5196              	@ main.c:2431: 				lux=CalculateLux(1,2,ch0,ch1,0);
 5197 013a 0021     		movs	r1, #0	@ tmp294,
 5198              	@ main.c:2429: 				ch1	= (buf[1]<<8)+buf[0];
 5199 013c 9DF80D00 		ldrb	r0, [sp, #13]	@ zero_extendqisi2	@ buf, buf
 5200 0140 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2	@ buf, buf
 5201              	@ main.c:2427: 				ch0 = (buf[1]<<8)+buf[0];
 5202 0144 1FFA89F9 		uxth	r9, r9	@ ch0, tmp284
 5203              	@ main.c:2429: 				ch1	= (buf[1]<<8)+buf[0];
 5204 0148 03EB0023 		add	r3, r3, r0, lsl #8	@ tmp292, buf, buf,
 5205              	@ main.c:2431: 				lux=CalculateLux(1,2,ch0,ch1,0);
 5206 014c 4A46     		mov	r2, r9	@, ch0
 5207 014e 9BB2     		uxth	r3, r3	@, tmp292
 5208 0150 0091     		str	r1, [sp]	@ tmp294,
 5209 0152 0120     		movs	r0, #1	@,
 5210 0154 0221     		movs	r1, #2	@,
 5211 0156 FFF7FEFF 		bl	CalculateLux	@
 5212              	@ main.c:2432: 				sint2uart(lux);
 5213 015a FFF7FEFF 		bl	sint2uart	@
 5214              	@ main.c:2434: 				UaPutC(',');
 5215 015e 2C20     		movs	r0, #44	@,
 5216 0160 FFF7FEFF 		bl	UaPutC	@
 5217              	@ main.c:2437: 				memset ( buf, 1, 10);
 5218 0164 4FF0013C 		mov	ip, #16843009	@ tmp298,
 5219              	@ main.c:2438: 				i2c1_read(APDS9960_ADR, 0x94, buf,8 );
 5220 0168 3246     		mov	r2, r6	@, tmp332
 5221 016a 0823     		movs	r3, #8	@,
 5222 016c 9421     		movs	r1, #148	@,
 5223 016e 7220     		movs	r0, #114	@,
 5224              	@ main.c:2437: 				memset ( buf, 1, 10);
 5225 0170 C6E900CC 		strd	ip, ip, [r6]	@ tmp298, tmp298, tmp332
 5226 0174 A6F808C0 		strh	ip, [r6, #8]	@ movhi	@ tmp298, MEM[(void *)&buf]
 5227              	@ main.c:2438: 				i2c1_read(APDS9960_ADR, 0x94, buf,8 );
 5228 0178 FFF7FEFF 		bl	i2c1_read	@
 5229              	@ main.c:2439: 				aC = (buf[1]<<8)+buf[0];
 5230 017c 9DF80DC0 		ldrb	ip, [sp, #13]	@ zero_extendqisi2	@ buf, buf
 5231 0180 9DF80C00 		ldrb	r0, [sp, #12]	@ zero_extendqisi2	@ buf, buf
 5232              	@ main.c:2440: 				aR = (buf[3]<<8)+buf[2];
 5233 0184 9DF80F10 		ldrb	r1, [sp, #15]	@ zero_extendqisi2	@ buf, buf
 5234 0188 9DF80EB0 		ldrb	fp, [sp, #14]	@ zero_extendqisi2	@ buf, buf
 5235              	@ main.c:2441: 				aG = (buf[5]<<8)+buf[4];
 5236 018c 9DF81120 		ldrb	r2, [sp, #17]	@ zero_extendqisi2	@ buf, buf
 5237              	@ main.c:2442: 				aB = (buf[7]<<8)+buf[6];
 5238 0190 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2	@ buf, buf
 5239              	@ main.c:2439: 				aC = (buf[1]<<8)+buf[0];
 5240 0194 00EB0C20 		add	r0, r0, ip, lsl #8	@ tmp328, buf, buf,
 5241              	@ main.c:2441: 				aG = (buf[5]<<8)+buf[4];
 5242 0198 9DF810A0 		ldrb	r10, [sp, #16]	@ zero_extendqisi2	@ buf, buf
 5243              	@ main.c:2442: 				aB = (buf[7]<<8)+buf[6];
 5244 019c 9DF81290 		ldrb	r9, [sp, #18]	@ zero_extendqisi2	@ buf, buf
ARM GAS  /tmp/ccrMssCc.s 			page 93


 5245              	@ main.c:2440: 				aR = (buf[3]<<8)+buf[2];
 5246 01a0 0BEB012B 		add	fp, fp, r1, lsl #8	@ tmp307, buf, buf,
 5247              	@ main.c:2444: 				sint2uart(aC); UaPutC(','); //hex2uart((buf[1]<<8)+buf[0],4);
 5248 01a4 80B2     		uxth	r0, r0	@, tmp328
 5249              	@ main.c:2441: 				aG = (buf[5]<<8)+buf[4];
 5250 01a6 0AEB022A 		add	r10, r10, r2, lsl #8	@ tmp314, buf, buf,
 5251              	@ main.c:2442: 				aB = (buf[7]<<8)+buf[6];
 5252 01aa 09EB0329 		add	r9, r9, r3, lsl #8	@ tmp321, buf, buf,
 5253              	@ main.c:2440: 				aR = (buf[3]<<8)+buf[2];
 5254 01ae 1FFA8BFB 		uxth	fp, fp	@ aR, tmp307
 5255              	@ main.c:2444: 				sint2uart(aC); UaPutC(','); //hex2uart((buf[1]<<8)+buf[0],4);
 5256 01b2 FFF7FEFF 		bl	sint2uart	@
 5257 01b6 2C20     		movs	r0, #44	@,
 5258 01b8 FFF7FEFF 		bl	UaPutC	@
 5259              	@ main.c:2445: 				sint2uart(aR); UaPutC(','); //hex2uart((buf[3]<<8)+buf[2],4);
 5260 01bc 5846     		mov	r0, fp	@, aR
 5261 01be FFF7FEFF 		bl	sint2uart	@
 5262              	@ main.c:2441: 				aG = (buf[5]<<8)+buf[4];
 5263 01c2 1FFA8AFA 		uxth	r10, r10	@ aG, tmp314
 5264              	@ main.c:2445: 				sint2uart(aR); UaPutC(','); //hex2uart((buf[3]<<8)+buf[2],4);
 5265 01c6 2C20     		movs	r0, #44	@,
 5266 01c8 FFF7FEFF 		bl	UaPutC	@
 5267              	@ main.c:2446: 				sint2uart(aG); UaPutC(','); //hex2uart((buf[5]<<8)+buf[4],4);
 5268 01cc 5046     		mov	r0, r10	@, aG
 5269 01ce FFF7FEFF 		bl	sint2uart	@
 5270              	@ main.c:2442: 				aB = (buf[7]<<8)+buf[6];
 5271 01d2 1FFA89F9 		uxth	r9, r9	@ aB, tmp321
 5272              	@ main.c:2446: 				sint2uart(aG); UaPutC(','); //hex2uart((buf[5]<<8)+buf[4],4);
 5273 01d6 2C20     		movs	r0, #44	@,
 5274 01d8 FFF7FEFF 		bl	UaPutC	@
 5275              	@ main.c:2447: 				sint2uart(aB); UaPutC(',');//hex2uart((buf[7]<<8)+buf[6],4);
 5276 01dc 4846     		mov	r0, r9	@, aB
 5277 01de FFF7FEFF 		bl	sint2uart	@
 5278 01e2 2C20     		movs	r0, #44	@,
 5279 01e4 FFF7FEFF 		bl	UaPutC	@
 5280 01e8 6EE7     		b	.L416	@
 5281              	.L422:
 5282 01ea 00BF     		.align	2
 5283              	.L421:
 5284 01ec 000C0140 		.word	1073810432
 5285 01f0 00100240 		.word	1073876992
 5286 01f4 00580040 		.word	1073764352
 5287 01f8 00540040 		.word	1073763328
 5288 01fc 00000000 		.word	.LC68
 5289 0200 10E000E0 		.word	-536813552
 5290 0204 00000000 		.word	delay_us
 5291 0208 3F771B00 		.word	1799999
 5292 020c 00000000 		.word	trg0
 5293 0210 A0BB0D00 		.word	900000
 5294 0214 04000000 		.word	.LC13
 5295 0218 00000000 		.word	.LC67
 5296 021c 00000140 		.word	1073807360
 5297 0220 D34D6210 		.word	274877907
 5298              		.size	MAX44009_i2c, .-MAX44009_i2c
 5299              		.section	.text.BMP280_i2c,"ax",%progbits
 5300              		.align	1
 5301              		.p2align 2,,3
ARM GAS  /tmp/ccrMssCc.s 			page 94


 5302              		.global	BMP280_i2c
 5303              		.syntax unified
 5304              		.thumb
 5305              		.thumb_func
 5306              		.fpu softvfp
 5307              		.type	BMP280_i2c, %function
 5308              	BMP280_i2c:
 5309              		@ args = 0, pretend = 0, frame = 80
 5310              		@ frame_needed = 0, uses_anonymous_args = 0
 5311 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5312              	@ main.c:2475: 		I2C2->CCR = (1<<15) | 25;               			// setup speed (800kHz)
 5313 0004 48F2190C 		movw	ip, #32793	@ tmp322,
 5314              	@ main.c:2472: 		I2C2->TRISE = 37;               		// limit slope
 5315 0008 4FF0250E 		mov	lr, #37	@ tmp319,
 5316              	@ main.c:2469: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 5317 000c 0125     		movs	r5, #1	@ tmp312,
 5318              	@ main.c:2471: 		I2C2_CR1_SWRST_bb = 0;
 5319 000e 4FF00008 		mov	r8, #0	@ tmp316,
 5320              	@ main.c:2476: 		I2C2->CR2 = I2C_CR2_FREQ_36MHz;     // config I2C2 module
 5321 0012 2427     		movs	r7, #36	@ tmp325,
 5322              	@ main.c:2467: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000bf00;	// ...009d00 PB10=SCL(Push-pu
 5323 0014 C74A     		ldr	r2, .L432	@ tmp308,
 5324              	@ main.c:2472: 		I2C2->TRISE = 37;               		// limit slope
 5325 0016 C84C     		ldr	r4, .L432+4	@ tmp317,
 5326              	@ main.c:2467: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000bf00;	// ...009d00 PB10=SCL(Push-pu
 5327 0018 5368     		ldr	r3, [r2, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5328              	@ main.c:2470: 		I2C2_CR1_SWRST_bb = 1;            	// force software reset of I2C peripheral
 5329 001a C848     		ldr	r0, .L432+8	@ tmp313,
 5330              	@ main.c:2469: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 5331 001c C849     		ldr	r1, .L432+12	@ tmp311,
 5332              	@ main.c:2477: 		I2C2_CR1_PE_bb = 1;               	// enable peripheral
 5333 001e C94E     		ldr	r6, .L432+16	@ tmp326,
 5334              	@ main.c:2467: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000bf00;	// ...009d00 PB10=SCL(Push-pu
 5335 0020 23F47F43 		bic	r3, r3, #65280	@ tmp309, _1,
 5336              	@ main.c:2460: void BMP280_i2c(void){
 5337 0024 95B0     		sub	sp, sp, #84	@,,
 5338              	@ main.c:2467: 		GPIOB->CRH = (GPIOB->CRH & 0xffff00ff) | 0x0000bf00;	// ...009d00 PB10=SCL(Push-pu
 5339 0026 43F43F43 		orr	r3, r3, #48896	@ _3, tmp309,
 5340 002a 5360     		str	r3, [r2, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 5341              	@ main.c:2469: 		RCC_APB1ENR_I2C2EN_bb = 1;         	// enable clock for I2C2 module
 5342 002c 0D60     		str	r5, [r1]	@ tmp312, MEM[(volatile long unsigned int *)1111622616B]
 5343              	@ main.c:2479: 		i2c2_read(BMP280_ADR,  0xD0, buf,1 );
 5344 002e 2B46     		mov	r3, r5	@, tmp312
 5345              	@ main.c:2470: 		I2C2_CR1_SWRST_bb = 1;            	// force software reset of I2C peripheral
 5346 0030 0560     		str	r5, [r0]	@ tmp312, MEM[(volatile long unsigned int *)1108017212B]
 5347              	@ main.c:2479: 		i2c2_read(BMP280_ADR,  0xD0, buf,1 );
 5348 0032 0EAA     		add	r2, sp, #56	@ tmp503,,
 5349              	@ main.c:2471: 		I2C2_CR1_SWRST_bb = 0;
 5350 0034 C0F80080 		str	r8, [r0]	@ tmp316, MEM[(volatile long unsigned int *)1108017212B]
 5351              	@ main.c:2479: 		i2c2_read(BMP280_ADR,  0xD0, buf,1 );
 5352 0038 D021     		movs	r1, #208	@,
 5353              	@ main.c:2472: 		I2C2->TRISE = 37;               		// limit slope
 5354 003a A4F820E0 		strh	lr, [r4, #32]	@ movhi	@ tmp319, MEM[(struct I2C_TypeDef *)1073764352B].TRISE
 5355              	@ main.c:2479: 		i2c2_read(BMP280_ADR,  0xD0, buf,1 );
 5356 003e EC20     		movs	r0, #236	@,
 5357              	@ main.c:2475: 		I2C2->CCR = (1<<15) | 25;               			// setup speed (800kHz)
 5358 0040 A4F81CC0 		strh	ip, [r4, #28]	@ movhi	@ tmp322, MEM[(struct I2C_TypeDef *)1073764352B].CCR
ARM GAS  /tmp/ccrMssCc.s 			page 95


 5359              	@ main.c:2476: 		I2C2->CR2 = I2C_CR2_FREQ_36MHz;     // config I2C2 module
 5360 0044 A780     		strh	r7, [r4, #4]	@ movhi	@ tmp325, MEM[(struct I2C_TypeDef *)1073764352B].CR2
 5361              	@ main.c:2477: 		I2C2_CR1_PE_bb = 1;               	// enable peripheral
 5362 0046 3560     		str	r5, [r6]	@ tmp312, MEM[(volatile long unsigned int *)1108017152B]
 5363              	@ main.c:2479: 		i2c2_read(BMP280_ADR,  0xD0, buf,1 );
 5364 0048 FFF7FEFF 		bl	i2c2_read	@
 5365              	@ main.c:2480: 		UaPutK("\r\n i2c_BMP280 = 0x");	
 5366 004c BE48     		ldr	r0, .L432+20	@,
 5367 004e FFF7FEFF 		bl	UaPutK	@
 5368              	@ main.c:2481: 		hex2uart(buf[0],2);
 5369 0052 0221     		movs	r1, #2	@,
 5370 0054 9DF83800 		ldrb	r0, [sp, #56]	@ zero_extendqisi2	@, buf
 5371 0058 FFF7FEFF 		bl	hex2uart	@
 5372              	@ main.c:2484: 		buf[0]=0xf4;
 5373 005c 4BF2F473 		movw	r3, #47092	@ tmp332,
 5374              	@ main.c:2486: 		i2c2_write(BMP280_ADR,buf,2); // set mode
 5375 0060 0EA9     		add	r1, sp, #56	@ tmp504,,
 5376 0062 0222     		movs	r2, #2	@,
 5377 0064 EC20     		movs	r0, #236	@,
 5378              	@ main.c:2484: 		buf[0]=0xf4;
 5379 0066 ADF83830 		strh	r3, [sp, #56]	@ movhi	@ tmp332, MEM[(u08[24] *)&buf]
 5380              	@ main.c:2486: 		i2c2_write(BMP280_ADR,buf,2); // set mode
 5381 006a FFF7FEFF 		bl	i2c2_write	@
 5382              	@ main.c:2488: 		buf[0]=0xf5;
 5383 006e 41F2F503 		movw	r3, #4341	@ tmp335,
 5384              	@ main.c:2490: 		i2c2_write(BMP280_ADR,buf,2); // set mode
 5385 0072 0EA9     		add	r1, sp, #56	@ tmp505,,
 5386 0074 0222     		movs	r2, #2	@,
 5387 0076 EC20     		movs	r0, #236	@,
 5388              	@ main.c:2488: 		buf[0]=0xf5;
 5389 0078 ADF83830 		strh	r3, [sp, #56]	@ movhi	@ tmp335, MEM[(u08[24] *)&buf]
 5390              	@ main.c:2490: 		i2c2_write(BMP280_ADR,buf,2); // set mode
 5391 007c FFF7FEFF 		bl	i2c2_write	@
 5392              	@ main.c:2492: 		i2c2_read(BMP280_ADR,  0x88, buf,6+16 );
 5393 0080 0EAA     		add	r2, sp, #56	@ tmp506,,
 5394 0082 1623     		movs	r3, #22	@,
 5395 0084 8821     		movs	r1, #136	@,
 5396 0086 EC20     		movs	r0, #236	@,
 5397 0088 FFF7FEFF 		bl	i2c2_read	@
 5398              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5399 008c 9DF83D20 		ldrb	r2, [sp, #61]	@ zero_extendqisi2	@ buf, buf
 5400              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5401 0090 9DF84110 		ldrb	r1, [sp, #65]	@ zero_extendqisi2	@ buf, buf
 5402              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5403 0094 0692     		str	r2, [sp, #24]	@ buf, %sfp
 5404              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5405 0096 9DF84F20 		ldrb	r2, [sp, #79]	@ zero_extendqisi2	@ buf, buf
 5406              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5407 009a 9DF83CA0 		ldrb	r10, [sp, #60]	@ zero_extendqisi2	@ buf, buf
 5408              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5409 009e 0592     		str	r2, [sp, #20]	@ buf, %sfp
 5410              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5411 00a0 069A     		ldr	r2, [sp, #24]	@ buf, %sfp
 5412              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5413 00a2 0091     		str	r1, [sp]	@ buf, %sfp
 5414              	@ main.c:2499: 		dig_P3 = (s16)((buf[11]<<8) | buf[10]);
 5415 00a4 9DF84300 		ldrb	r0, [sp, #67]	@ zero_extendqisi2	@ buf, buf
ARM GAS  /tmp/ccrMssCc.s 			page 96


 5416              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5417 00a8 4AEA022A 		orr	r10, r10, r2, lsl #8	@ tmp349, buf, buf,
 5418              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5419 00ac 9DF84090 		ldrb	r9, [sp, #64]	@ zero_extendqisi2	@ buf, buf
 5420 00b0 009A     		ldr	r2, [sp]	@ buf, %sfp
 5421              	@ main.c:2499: 		dig_P3 = (s16)((buf[11]<<8) | buf[10]);
 5422 00b2 0190     		str	r0, [sp, #4]	@ buf, %sfp
 5423              	@ main.c:2501: 		dig_P5 = (s16)((buf[15]<<8) | buf[14]);
 5424 00b4 9DF84760 		ldrb	r6, [sp, #71]	@ zero_extendqisi2	@ buf, buf
 5425              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5426 00b8 49EA0229 		orr	r9, r9, r2, lsl #8	@ tmp355, buf, buf,
 5427              	@ main.c:2499: 		dig_P3 = (s16)((buf[11]<<8) | buf[10]);
 5428 00bc 9DF84280 		ldrb	r8, [sp, #66]	@ zero_extendqisi2	@ buf, buf
 5429 00c0 019A     		ldr	r2, [sp, #4]	@ buf, %sfp
 5430              	@ main.c:2501: 		dig_P5 = (s16)((buf[15]<<8) | buf[14]);
 5431 00c2 0296     		str	r6, [sp, #8]	@ buf, %sfp
 5432              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5433 00c4 9DF84970 		ldrb	r7, [sp, #73]	@ zero_extendqisi2	@ buf, buf
 5434              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5435 00c8 9DF84B10 		ldrb	r1, [sp, #75]	@ zero_extendqisi2	@ buf, buf
 5436              	@ main.c:2494: 		dig_T2 = (s16)((buf[3]<<8) | buf[2]);
 5437 00cc 9DF83B30 		ldrb	r3, [sp, #59]	@ zero_extendqisi2	@ buf, buf
 5438              	@ main.c:2499: 		dig_P3 = (s16)((buf[11]<<8) | buf[10]);
 5439 00d0 48EA0228 		orr	r8, r8, r2, lsl #8	@ tmp361, buf, buf,
 5440              	@ main.c:2494: 		dig_T2 = (s16)((buf[3]<<8) | buf[2]);
 5441 00d4 9DF83AB0 		ldrb	fp, [sp, #58]	@ zero_extendqisi2	@ buf, buf
 5442              	@ main.c:2501: 		dig_P5 = (s16)((buf[15]<<8) | buf[14]);
 5443 00d8 029A     		ldr	r2, [sp, #8]	@ buf, %sfp
 5444 00da 9DF846E0 		ldrb	lr, [sp, #70]	@ zero_extendqisi2	@ buf, buf
 5445              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5446 00de 0397     		str	r7, [sp, #12]	@ buf, %sfp
 5447              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5448 00e0 9DF84C60 		ldrb	r6, [sp, #76]	@ zero_extendqisi2	@ buf, buf
 5449              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5450 00e4 0491     		str	r1, [sp, #16]	@ buf, %sfp
 5451              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5452 00e6 9DF84D10 		ldrb	r1, [sp, #77]	@ zero_extendqisi2	@ buf, buf
 5453              	@ main.c:2501: 		dig_P5 = (s16)((buf[15]<<8) | buf[14]);
 5454 00ea 4EEA022E 		orr	lr, lr, r2, lsl #8	@ tmp373, buf, buf,
 5455              	@ main.c:2494: 		dig_T2 = (s16)((buf[3]<<8) | buf[2]);
 5456 00ee 4BEA032B 		orr	fp, fp, r3, lsl #8	@ tmp343, buf, buf,
 5457              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5458 00f2 9DF848C0 		ldrb	ip, [sp, #72]	@ zero_extendqisi2	@ buf, buf
 5459 00f6 039A     		ldr	r2, [sp, #12]	@ buf, %sfp
 5460              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5461 00f8 46EA0121 		orr	r1, r6, r1, lsl #8	@ tmp391, buf, buf,
 5462              	@ main.c:2494: 		dig_T2 = (s16)((buf[3]<<8) | buf[2]);
 5463 00fc 0FFA8BF6 		sxth	r6, fp	@ dig_T2, tmp343
 5464              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5465 0100 4CEA022C 		orr	ip, ip, r2, lsl #8	@ tmp379, buf, buf,
 5466              	@ main.c:2500: 		dig_P4 = (s16)((buf[13]<<8) | buf[12]);
 5467 0104 9DF84500 		ldrb	r0, [sp, #69]	@ zero_extendqisi2	@ buf, buf
 5468 0108 9DF84440 		ldrb	r4, [sp, #68]	@ zero_extendqisi2	@ buf, buf
 5469              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5470 010c 9DF84A70 		ldrb	r7, [sp, #74]	@ zero_extendqisi2	@ buf, buf
 5471              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5472 0110 9DF84E30 		ldrb	r3, [sp, #78]	@ zero_extendqisi2	@ buf, buf
ARM GAS  /tmp/ccrMssCc.s 			page 97


 5473              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5474 0114 049A     		ldr	r2, [sp, #16]	@ buf, %sfp
 5475              	@ main.c:2494: 		dig_T2 = (s16)((buf[3]<<8) | buf[2]);
 5476 0116 0296     		str	r6, [sp, #8]	@ dig_T2, %sfp
 5477              	@ main.c:2495: 		dig_T3 = (s16)((buf[5]<<8) | buf[4]);
 5478 0118 0FFA8AF6 		sxth	r6, r10	@ dig_T3, tmp349
 5479 011c 0396     		str	r6, [sp, #12]	@ dig_T3, %sfp
 5480              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5481 011e 0FFA89F6 		sxth	r6, r9	@ dig_P2, tmp355
 5482              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5483 0122 47EA0227 		orr	r7, r7, r2, lsl #8	@ tmp385, buf, buf,
 5484              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5485 0126 059A     		ldr	r2, [sp, #20]	@ buf, %sfp
 5486              	@ main.c:2498: 		dig_P2 = (s16)((buf[9]<<8 ) | buf[8]);
 5487 0128 0596     		str	r6, [sp, #20]	@ dig_P2, %sfp
 5488              	@ main.c:2499: 		dig_P3 = (s16)((buf[11]<<8) | buf[10]);
 5489 012a 0FFA88F6 		sxth	r6, r8	@ dig_P3, tmp361
 5490 012e 0696     		str	r6, [sp, #24]	@ dig_P3, %sfp
 5491              	@ main.c:2501: 		dig_P5 = (s16)((buf[15]<<8) | buf[14]);
 5492 0130 0FFA8EF6 		sxth	r6, lr	@ dig_P5, tmp373
 5493 0134 0796     		str	r6, [sp, #28]	@ dig_P5, %sfp
 5494              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5495 0136 0FFA8CF6 		sxth	r6, ip	@ dig_P6, tmp379
 5496              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5497 013a 0091     		str	r1, [sp]	@ tmp391, %sfp
 5498              	@ main.c:2502: 		dig_P6 = (s16)((buf[17]<<8) | buf[16]);
 5499 013c 0896     		str	r6, [sp, #32]	@ dig_P6, %sfp
 5500              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5501 013e 3EB2     		sxth	r6, r7	@ dig_P7, tmp385
 5502              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5503 0140 43EA0223 		orr	r3, r3, r2, lsl #8	@ tmp397, buf, buf,
 5504              	@ main.c:2503: 		dig_P7 = (s16)((buf[19]<<8) | buf[18]);
 5505 0144 0996     		str	r6, [sp, #36]	@ dig_P7, %sfp
 5506              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5507 0146 BDF90060 		ldrsh	r6, [sp]	@ dig_P8, %sfp
 5508              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5509 014a 0193     		str	r3, [sp, #4]	@ tmp397, %sfp
 5510              	@ main.c:2504: 		dig_P8 = (s16)((buf[21]<<8) | buf[20]);
 5511 014c 0A96     		str	r6, [sp, #40]	@ dig_P8, %sfp
 5512              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5513 014e BDF90460 		ldrsh	r6, [sp, #4]	@ dig_P9, %sfp
 5514              	@ main.c:2507: 		i2c2_read(BMP280_ADR,  0xf4, buf,1 ); hex2uart(buf[0],2);
 5515 0152 2B46     		mov	r3, r5	@, tmp312
 5516              	@ main.c:2505: 		dig_P9 = (s16)((buf[23]<<8) | buf[22]);
 5517 0154 0B96     		str	r6, [sp, #44]	@ dig_P9, %sfp
 5518              	@ main.c:2497: 		dig_P1 = (u16)(((u16)(buf[7]<<8)) | buf[6]);
 5519 0156 BDF83E60 		ldrh	r6, [sp, #62]	@ dig_P1, MEM[(u08[24] *)&buf + 6B]
 5520              	@ main.c:2507: 		i2c2_read(BMP280_ADR,  0xf4, buf,1 ); hex2uart(buf[0],2);
 5521 015a 0EAA     		add	r2, sp, #56	@ tmp533,,
 5522              	@ main.c:2500: 		dig_P4 = (s16)((buf[13]<<8) | buf[12]);
 5523 015c 44EA0024 		orr	r4, r4, r0, lsl #8	@ tmp367, buf, buf,
 5524              	@ main.c:2507: 		i2c2_read(BMP280_ADR,  0xf4, buf,1 ); hex2uart(buf[0],2);
 5525 0160 F421     		movs	r1, #244	@,
 5526 0162 EC20     		movs	r0, #236	@,
 5527              	@ main.c:2493: 		dig_T1 = (u16)(((u16)(buf[1]<<8)) | buf[0]);
 5528 0164 BDF838A0 		ldrh	r10, [sp, #56]	@ dig_T1, MEM[(u08[24] *)&buf]
 5529              	@ main.c:2497: 		dig_P1 = (u16)(((u16)(buf[7]<<8)) | buf[6]);
ARM GAS  /tmp/ccrMssCc.s 			page 98


 5530 0168 0496     		str	r6, [sp, #16]	@ dig_P1, %sfp
 5531              	@ main.c:2507: 		i2c2_read(BMP280_ADR,  0xf4, buf,1 ); hex2uart(buf[0],2);
 5532 016a FFF7FEFF 		bl	i2c2_read	@
 5533 016e 0221     		movs	r1, #2	@,
 5534 0170 9DF83800 		ldrb	r0, [sp, #56]	@ zero_extendqisi2	@, buf
 5535 0174 FFF7FEFF 		bl	hex2uart	@
 5536              	@ main.c:2508: 		i2c2_read(BMP280_ADR,  0xf5, buf,1 ); hex2uart(buf[0],2);
 5537 0178 2B46     		mov	r3, r5	@, tmp312
 5538 017a 0EAA     		add	r2, sp, #56	@ tmp554,,
 5539 017c F521     		movs	r1, #245	@,
 5540 017e EC20     		movs	r0, #236	@,
 5541 0180 FFF7FEFF 		bl	i2c2_read	@
 5542              	@ main.c:2500: 		dig_P4 = (s16)((buf[13]<<8) | buf[12]);
 5543 0184 24B2     		sxth	r4, r4	@ dig_P4, tmp367
 5544              	@ main.c:2508: 		i2c2_read(BMP280_ADR,  0xf5, buf,1 ); hex2uart(buf[0],2);
 5545 0186 0221     		movs	r1, #2	@,
 5546 0188 9DF83800 		ldrb	r0, [sp, #56]	@ zero_extendqisi2	@, buf
 5547 018c FFF7FEFF 		bl	hex2uart	@
 5548              	@ main.c:2560: 				var2 = (var2>>2)+(((s32)dig_P4)<<16); 
 5549 0190 2304     		lsls	r3, r4, #16	@ _139, dig_P4,
 5550 0192 0193     		str	r3, [sp, #4]	@ _139, %sfp
 5551 0194 DFF8DC81 		ldr	r8, .L432+64	@ tmp494,
 5552              	@ main.c:2534: 				var1 = ((((adc_T>>3)  - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 5553 0198 0AFA05F3 		lsl	r3, r10, r5	@ _99, dig_T1,
 5554 019c 6B4F     		ldr	r7, .L432+24	@ tmp496,
 5555              	@ main.c:2519: 			if(STCLK_MS*500 < (trg0 - SysTick->VAL)){
 5556 019e DFF8D891 		ldr	r9, .L432+68	@ tmp405,
 5557              	@ main.c:2586: 			if( STCLK_MS*1000 < (trg1 - SysTick->VAL)){
 5558 01a2 DFF8D8B1 		ldr	fp, .L432+72	@ tmp498,
 5559              	@ main.c:2519: 			if(STCLK_MS*500 < (trg0 - SysTick->VAL)){
 5560 01a6 6A4E     		ldr	r6, .L432+28	@ tmp403,
 5561              	@ main.c:2534: 				var1 = ((((adc_T>>3)  - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 5562 01a8 0093     		str	r3, [sp]	@ _99, %sfp
 5563              	.L428:
 5564              	@ main.c:2519: 			if(STCLK_MS*500 < (trg0 - SysTick->VAL)){
 5565 01aa D8F80030 		ldr	r3, [r8]	@ trg0.165_80, trg0
 5566 01ae B268     		ldr	r2, [r6, #8]	@ _81, MEM[(struct SysTick_Type *)3758153744B].VAL
 5567 01b0 9B1A     		subs	r3, r3, r2	@ tmp404, trg0.165_80, _81
 5568 01b2 4B45     		cmp	r3, r9	@ tmp404, tmp405
 5569 01b4 40F2B080 		bls	.L424	@,
 5570              	@ main.c:2520: 				trg0 = SysTick->VAL;
 5571 01b8 B368     		ldr	r3, [r6, #8]	@ _83, MEM[(struct SysTick_Type *)3758153744B].VAL
 5572              	@ main.c:2522: 				UaPutK("\r\n BMP280 ");	
 5573 01ba 6648     		ldr	r0, .L432+32	@,
 5574              	@ main.c:2520: 				trg0 = SysTick->VAL;
 5575 01bc C8F80030 		str	r3, [r8]	@ _83, trg0
 5576              	@ main.c:2522: 				UaPutK("\r\n BMP280 ");	
 5577 01c0 FFF7FEFF 		bl	UaPutK	@
 5578              	@ main.c:2529: 				i2c2_read(BMP280_ADR,  0xFA, buf,3 );
 5579 01c4 0323     		movs	r3, #3	@,
 5580 01c6 0EAA     		add	r2, sp, #56	@ tmp558,,
 5581 01c8 FA21     		movs	r1, #250	@,
 5582 01ca EC20     		movs	r0, #236	@,
 5583 01cc FFF7FEFF 		bl	i2c2_read	@
 5584              	@ main.c:2533: 				adc_T = ( (u32)((u16)((buf[0]) << 8) | buf[1] ) << 4) | ( (buf[2]) >> 4);
 5585 01d0 BDF83830 		ldrh	r3, [sp, #56]	@, MEM[(u08[24] *)&buf]
 5586 01d4 9DF83A20 		ldrb	r2, [sp, #58]	@ zero_extendqisi2	@ buf, buf
ARM GAS  /tmp/ccrMssCc.s 			page 99


 5587 01d8 5BBA     		rev16	r3, r3	@ tmp412, MEM[(u08[24] *)&buf]
 5588 01da 9BB2     		uxth	r3, r3	@ tmp414, tmp412
 5589 01dc 1209     		lsrs	r2, r2, #4	@ tmp418, buf,
 5590 01de 42EA0312 		orr	r2, r2, r3, lsl #4	@ adc_T, tmp418, tmp414,
 5591              	@ main.c:2535:         var2 = (((((adc_T>>4) - ((s32)dig_T1)) * ((adc_T>>4) - ((s32)dig_T1))) >> 12
 5592 01e2 CAEB1213 		rsb	r3, r10, r2, lsr #4	@ _105, dig_T1, adc_T,
 5593 01e6 03FB03F3 		mul	r3, r3, r3	@ tmp424, _105, _105
 5594              	@ main.c:2536: 				* ((s32)dig_T3))>>14;
 5595 01ea 0398     		ldr	r0, [sp, #12]	@ dig_T3, %sfp
 5596              	@ main.c:2535:         var2 = (((((adc_T>>4) - ((s32)dig_T1)) * ((adc_T>>4) - ((s32)dig_T1))) >> 12
 5597 01ec 1B0B     		lsrs	r3, r3, #12	@ tmp425, tmp424,
 5598              	@ main.c:2536: 				* ((s32)dig_T3))>>14;
 5599 01ee 00FB03F3 		mul	r3, r0, r3	@ tmp426, dig_T3, tmp425
 5600              	@ main.c:2534: 				var1 = ((((adc_T>>3)  - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 5601 01f2 0098     		ldr	r0, [sp]	@ _99, %sfp
 5602              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 5603 01f4 B168     		ldr	r1, [r6, #8]	@ _259, MEM[(struct SysTick_Type *)3758153744B].VAL
 5604              	@ main.c:2534: 				var1 = ((((adc_T>>3)  - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 5605 01f6 C0EBD202 		rsb	r2, r0, r2, lsr #3	@ tmp421, _99, adc_T,
 5606 01fa 0298     		ldr	r0, [sp, #8]	@ dig_T2, %sfp
 5607              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 5608 01fc 3960     		str	r1, [r7]	@ _259, Timt
 5609              	@ main.c:2534: 				var1 = ((((adc_T>>3)  - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 5610 01fe 00FB02F2 		mul	r2, r0, r2	@ tmp422, dig_T2, tmp421
 5611              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 5612 0202 3D68     		ldr	r5, [r7]	@ Timt.84_256, Timt
 5613 0204 B168     		ldr	r1, [r6, #8]	@ _257, MEM[(struct SysTick_Type *)3758153744B].VAL
 5614              	@ main.c:2535:         var2 = (((((adc_T>>4) - ((s32)dig_T1)) * ((adc_T>>4) - ((s32)dig_T1))) >> 12
 5615 0206 9B0B     		lsrs	r3, r3, #14	@ var2, tmp426,
 5616              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 5617 0208 6D1A     		subs	r5, r5, r1	@ _258, Timt.84_256, _257
 5618              	@ main.c:2545: 				UaPutS("tt="); sint2uart(tim);
 5619 020a 5348     		ldr	r0, .L432+36	@,
 5620              	@ main.c:2538:         t_fine = var1 + var2;
 5621 020c 03EBD224 		add	r4, r3, r2, lsr #11	@ t_fine, var2, tmp422,
 5622              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 5623 0210 0D95     		str	r5, [sp, #52]	@ _258, MEM[(volatile u32 *)&tim]
 5624              	@ main.c:2545: 				UaPutS("tt="); sint2uart(tim);
 5625 0212 FFF7FEFF 		bl	UaPutS	@
 5626 0216 2846     		mov	r0, r5	@, _258
 5627 0218 FFF7FEFF 		bl	sint2uart	@
 5628              	@ main.c:2548: 				UaPutK(" T=");	
 5629 021c 4F48     		ldr	r0, .L432+40	@,
 5630 021e FFF7FEFF 		bl	UaPutK	@
 5631              	@ main.c:2541: 				T     = (t_fine * 50 + 1280) >> 8; // resolution 0.001 C
 5632 0222 3220     		movs	r0, #50	@ tmp433,
 5633 0224 00FB04F0 		mul	r0, r0, r4	@ tmp432, tmp433, t_fine
 5634 0228 00F5A060 		add	r0, r0, #1280	@ tmp434, tmp432,
 5635              	@ main.c:2549: 				num2uart(T,5,3);
 5636 022c 000A     		lsrs	r0, r0, #8	@, tmp434,
 5637 022e 0322     		movs	r2, #3	@,
 5638 0230 0521     		movs	r1, #5	@,
 5639 0232 FFF7FEFF 		bl	num2uart	@
 5640              	@ main.c:2553: 				i2c2_read(BMP280_ADR,  0xF7, buf,3 );				
 5641 0236 0323     		movs	r3, #3	@,
 5642 0238 0EAA     		add	r2, sp, #56	@ tmp563,,
 5643 023a F721     		movs	r1, #247	@,
ARM GAS  /tmp/ccrMssCc.s 			page 100


 5644 023c EC20     		movs	r0, #236	@,
 5645 023e FFF7FEFF 		bl	i2c2_read	@
 5646              	@ main.c:2557: 				var1 = (((s32)t_fine)>>1) - 64000UL; 
 5647 0242 6210     		asrs	r2, r4, #1	@ tmp446, t_fine,
 5648 0244 A2F57A42 		sub	r2, r2, #64000	@ var1, tmp446,
 5649              	@ main.c:2558: 				var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((s32)dig_P6); 
 5650 0248 9308     		lsrs	r3, r2, #2	@ _129, var1,
 5651 024a 03FB03F3 		mul	r3, r3, r3	@ _130, _129, _129
 5652              	@ main.c:2561: 				var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((s32)dig_P2) * v
 5653 024e 0599     		ldr	r1, [sp, #20]	@ dig_P2, %sfp
 5654 0250 069C     		ldr	r4, [sp, #24]	@ dig_P3, %sfp
 5655 0252 01FB02F0 		mul	r0, r1, r2	@ tmp454, dig_P2, var1
 5656 0256 590B     		lsrs	r1, r3, #13	@ tmp451, _130,
 5657 0258 04FB01F1 		mul	r1, r4, r1	@ tmp452, dig_P3, tmp451
 5658              	@ main.c:2559: 				var2 = var2 + ((var1*((s32)dig_P5))<<1); 
 5659 025c 079C     		ldr	r4, [sp, #28]	@ dig_P5, %sfp
 5660              	@ main.c:2561: 				var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((s32)dig_P2) * v
 5661 025e 4008     		lsrs	r0, r0, #1	@ tmp455, tmp454,
 5662              	@ main.c:2559: 				var2 = var2 + ((var1*((s32)dig_P5))<<1); 
 5663 0260 04FB02F2 		mul	r2, r4, r2	@ tmp448, dig_P5, var1
 5664              	@ main.c:2561: 				var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((s32)dig_P2) * v
 5665 0264 00EBD100 		add	r0, r0, r1, lsr #3	@ _147, tmp455, tmp452,
 5666 0268 800C     		lsrs	r0, r0, #18	@ var1, _147,
 5667              	@ main.c:2562: 				var1 =((((32768+var1))*((s32)dig_P1))>>15); 
 5668 026a 0499     		ldr	r1, [sp, #16]	@ dig_P1, %sfp
 5669 026c 00F50040 		add	r0, r0, #32768	@ tmp457, var1,
 5670 0270 01FB00F0 		mul	r0, r1, r0	@ _150, dig_P1, tmp457
 5671              	@ main.c:2559: 				var2 = var2 + ((var1*((s32)dig_P5))<<1); 
 5672 0274 0899     		ldr	r1, [sp, #32]	@ dig_P6, %sfp
 5673 0276 5200     		lsls	r2, r2, #1	@ tmp449, tmp448,
 5674              	@ main.c:2558: 				var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((s32)dig_P6); 
 5675 0278 DB0A     		lsrs	r3, r3, #11	@ tmp447, _130,
 5676              	@ main.c:2559: 				var2 = var2 + ((var1*((s32)dig_P5))<<1); 
 5677 027a 01FB0323 		mla	r3, r1, r3, r2	@ var2, dig_P6, tmp447, tmp449
 5678              	@ main.c:2554: 				adc_P   = ((u32)((u16)(buf[0] << 8) | buf[1])<<4) | (buf[2]>>4);
 5679 027e BDF83810 		ldrh	r1, [sp, #56]	@, MEM[(u08[24] *)&buf]
 5680 0282 9DF83A20 		ldrb	r2, [sp, #58]	@ zero_extendqisi2	@ buf, buf
 5681 0286 49BA     		rev16	r1, r1	@ tmp437, MEM[(u08[24] *)&buf]
 5682 0288 89B2     		uxth	r1, r1	@ tmp439, tmp437
 5683              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 5684 028a B468     		ldr	r4, [r6, #8]	@ _255, MEM[(struct SysTick_Type *)3758153744B].VAL
 5685              	@ main.c:2554: 				adc_P   = ((u32)((u16)(buf[0] << 8) | buf[1])<<4) | (buf[2]>>4);
 5686 028c 1209     		lsrs	r2, r2, #4	@ tmp443, buf,
 5687              	@ main.c:2560: 				var2 = (var2>>2)+(((s32)dig_P4)<<16); 
 5688 028e 019D     		ldr	r5, [sp, #4]	@ _139, %sfp
 5689              	@ main.c:2554: 				adc_P   = ((u32)((u16)(buf[0] << 8) | buf[1])<<4) | (buf[2]>>4);
 5690 0290 42EA0112 		orr	r2, r2, r1, lsl #4	@ adc_P, tmp443, tmp439,
 5691              	@ main.c:2563: 				if (var1 == 0) 
 5692 0294 C10B     		lsrs	r1, r0, #15	@ var1, _150,
 5693              	@ main.c:2560: 				var2 = (var2>>2)+(((s32)dig_P4)<<16); 
 5694 0296 05EB9303 		add	r3, r5, r3, lsr #2	@ var2, _139, var2,
 5695              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 5696 029a 3C60     		str	r4, [r7]	@ _255, Timt
 5697              	@ main.c:2563: 				if (var1 == 0) 
 5698 029c 46D0     		beq	.L423	@,
 5699              	@ main.c:2568: 					p = (((u32)(((s32)1048576)-adc_P)-(var2>>12)))*3125; 
 5700 029e 3048     		ldr	r0, .L432+44	@ tmp461,
ARM GAS  /tmp/ccrMssCc.s 			page 101


 5701 02a0 02EB1333 		add	r3, r2, r3, lsr #12	@ tmp459, adc_P, var2,
 5702 02a4 00FB03F0 		mul	r0, r0, r3	@ tmp460, tmp461, tmp459
 5703 02a8 00F14340 		add	r0, r0, #-1023410176	@ p, tmp460,
 5704 02ac 00F5A000 		add	r0, r0, #5242880	@ p, p,
 5705              	@ main.c:2569: 					if (p < 0x80000000) { p = (p << 1) / ((u32)var1); 	}  
 5706 02b0 0028     		cmp	r0, #0	@ p,
 5707              	@ main.c:2570: 					else  							{ p = (p 			 /  (u32)var1)*2; } 
 5708 02b2 B3BF     		iteet	lt
 5709 02b4 B0FBF1F0 		udivlt	r0, r0, r1	@ _157, p, var1
 5710              	@ main.c:2569: 					if (p < 0x80000000) { p = (p << 1) / ((u32)var1); 	}  
 5711 02b8 4000     		lslge	r0, r0, #1	@ _156, p,
 5712 02ba B0FBF1F0 		udivge	r0, r0, r1	@ p, _156, var1
 5713              	@ main.c:2570: 					else  							{ p = (p 			 /  (u32)var1)*2; } 
 5714 02be 4000     		lsllt	r0, r0, #1	@ p, _157,
 5715              	@ main.c:2571: 					var1 = (((s32)dig_P9) * ((s32)(((p>>3) * (p>>3))>>13)))>>12; 
 5716 02c0 C308     		lsrs	r3, r0, #3	@ _159, p,
 5717 02c2 03FB03F3 		mul	r3, r3, r3	@ tmp463, _159, _159
 5718              	@ main.c:2572: 					var2 = (((s32)(p>>2)) * ((s32)dig_P8))>>13; 
 5719 02c6 0A99     		ldr	r1, [sp, #40]	@ dig_P8, %sfp
 5720 02c8 8208     		lsrs	r2, r0, #2	@ tmp467, p,
 5721 02ca 01FB02F2 		mul	r2, r1, r2	@ tmp468, dig_P8, tmp467
 5722              	@ main.c:2571: 					var1 = (((s32)dig_P9) * ((s32)(((p>>3) * (p>>3))>>13)))>>12; 
 5723 02ce 0B99     		ldr	r1, [sp, #44]	@ dig_P9, %sfp
 5724 02d0 5B0B     		lsrs	r3, r3, #13	@ tmp464, tmp463,
 5725 02d2 01FB03F3 		mul	r3, r1, r3	@ tmp465, dig_P9, tmp464
 5726              	@ main.c:2573: 					p = (u32)((s32)p + ((var1 + var2 + dig_P7) >> 4)); 
 5727 02d6 0999     		ldr	r1, [sp, #36]	@ dig_P7, %sfp
 5728 02d8 01EB6232 		add	r2, r1, r2, asr #13	@ tmp470, dig_P7, tmp468,
 5729 02dc 02EB2333 		add	r3, r2, r3, asr #12	@ tmp471, tmp470, tmp465,
 5730 02e0 00EB1310 		add	r0, r0, r3, lsr #4	@ p, p, tmp471,
 5731              	@ main.c:2574: 					p = (p*5)/8;
 5732 02e4 00EB8000 		add	r0, r0, r0, lsl #2	@ tmp475, p, p,
 5733 02e8 C008     		lsrs	r0, r0, #3	@ p, tmp475,
 5734              	@ main.c:2575: 					p = (p*5)/8;
 5735 02ea 00EB8004 		add	r4, r0, r0, lsl #2	@ tmp479, p, p,
 5736              	@ main.c:2576: 					UaPutK(" p= ");	
 5737 02ee 1D48     		ldr	r0, .L432+48	@,
 5738 02f0 FFF7FEFF 		bl	UaPutK	@
 5739              	@ main.c:2577: 					num2uart(p,9,3);
 5740 02f4 E008     		lsrs	r0, r4, #3	@, tmp479,
 5741 02f6 0322     		movs	r2, #3	@,
 5742 02f8 0921     		movs	r1, #9	@,
 5743 02fa FFF7FEFF 		bl	num2uart	@
 5744              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 5745 02fe 3C68     		ldr	r4, [r7]	@ Timt.84_260, Timt
 5746 0300 B368     		ldr	r3, [r6, #8]	@ _261, MEM[(struct SysTick_Type *)3758153744B].VAL
 5747              	@ main.c:2581: 				UaPutS(" tp="); sint2uart(tim/TIM_US);
 5748 0302 1948     		ldr	r0, .L432+52	@,
 5749              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 5750 0304 E41A     		subs	r4, r4, r3	@ _262, Timt.84_260, _261
 5751 0306 0D94     		str	r4, [sp, #52]	@ _262, MEM[(volatile u32 *)&tim]
 5752              	@ main.c:2581: 				UaPutS(" tp="); sint2uart(tim/TIM_US);
 5753 0308 FFF7FEFF 		bl	UaPutS	@
 5754 030c 174B     		ldr	r3, .L432+56	@ tmp577,
 5755 030e A3FB0430 		umull	r3, r0, r3, r4	@ tmp502, tmp486, tmp577, _262
 5756 0312 4008     		lsrs	r0, r0, #1	@, tmp486,
 5757 0314 FFF7FEFF 		bl	sint2uart	@
ARM GAS  /tmp/ccrMssCc.s 			page 102


 5758              	.L424:
 5759              	@ main.c:2586: 			if( STCLK_MS*1000 < (trg1 - SysTick->VAL)){
 5760 0318 154A     		ldr	r2, .L432+60	@ tmp488,
 5761 031a 1368     		ldr	r3, [r2]	@ trg1.171_178, trg1
 5762 031c B168     		ldr	r1, [r6, #8]	@ _179, MEM[(struct SysTick_Type *)3758153744B].VAL
 5763 031e 5B1A     		subs	r3, r3, r1	@ tmp490, trg1.171_178, _179
 5764 0320 5B45     		cmp	r3, fp	@ tmp490, tmp498
 5765 0322 7FF642AF 		bls	.L428	@,
 5766              	@ main.c:2587: 				trg1 = SysTick->VAL;
 5767 0326 B368     		ldr	r3, [r6, #8]	@ _181, MEM[(struct SysTick_Type *)3758153744B].VAL
 5768 0328 1360     		str	r3, [r2]	@ _181, trg1
 5769 032a 3EE7     		b	.L428	@
 5770              	.L423:
 5771              	@ main.c:2591: 	}
 5772 032c 15B0     		add	sp, sp, #84	@,,
 5773              		@ sp needed	@
 5774 032e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5775              	.L433:
 5776 0332 00BF     		.align	2
 5777              	.L432:
 5778 0334 000C0140 		.word	1073810432
 5779 0338 00580040 		.word	1073764352
 5780 033c 3C000B42 		.word	1108017212
 5781 0340 D8034242 		.word	1111622616
 5782 0344 00000B42 		.word	1108017152
 5783 0348 00000000 		.word	.LC69
 5784 034c 00000000 		.word	Timt
 5785 0350 10E000E0 		.word	-536813552
 5786 0354 14000000 		.word	.LC70
 5787 0358 20000000 		.word	.LC71
 5788 035c 24000000 		.word	.LC72
 5789 0360 CBF3FFFF 		.word	-3125
 5790 0364 28000000 		.word	.LC73
 5791 0368 30000000 		.word	.LC74
 5792 036c 398EE338 		.word	954437177
 5793 0370 00000000 		.word	trg1
 5794 0374 00000000 		.word	trg0
 5795 0378 20AA4400 		.word	4500000
 5796 037c 40548900 		.word	9000000
 5797              		.size	BMP280_i2c, .-BMP280_i2c
 5798              		.section	.text.BMP280_spi,"ax",%progbits
 5799              		.align	1
 5800              		.p2align 2,,3
 5801              		.global	BMP280_spi
 5802              		.syntax unified
 5803              		.thumb
 5804              		.thumb_func
 5805              		.fpu softvfp
 5806              		.type	BMP280_spi, %function
 5807              	BMP280_spi:
 5808              		@ args = 0, pretend = 0, frame = 16
 5809              		@ frame_needed = 0, uses_anonymous_args = 0
 5810 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5811              	@ main.c:2605: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|7<<3|SPI_CR1_MSTR|SPI_CR1_CPOL|SPI_CR1_CPHA;		
 5812 0004 40F23F36 		movw	r6, #831	@ tmp198,
 5813              	@ main.c:2621: 		RX1276_CS1 = 0;
 5814 0008 0025     		movs	r5, #0	@ tmp211,
ARM GAS  /tmp/ccrMssCc.s 			page 103


 5815              	@ main.c:2601: 		GPIOA->CRL = (GPIOA->CRL&0x0000ffff)|0xB4B30000;	// PA4~7
 5816 000a 6C48     		ldr	r0, .L441	@ tmp189,
 5817              	@ main.c:2602: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 5818 000c 6C49     		ldr	r1, .L441+4	@ tmp194,
 5819              	@ main.c:2601: 		GPIOA->CRL = (GPIOA->CRL&0x0000ffff)|0xB4B30000;	// PA4~7
 5820 000e 0368     		ldr	r3, [r0]	@ _1, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 5821              	@ main.c:2605: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|7<<3|SPI_CR1_MSTR|SPI_CR1_CPOL|SPI_CR1_CPHA;		
 5822 0010 6C4A     		ldr	r2, .L441+8	@ tmp196,
 5823              	@ main.c:2601: 		GPIOA->CRL = (GPIOA->CRL&0x0000ffff)|0xB4B30000;	// PA4~7
 5824 0012 9BB2     		uxth	r3, r3	@ tmp190, _1
 5825 0014 43F03443 		orr	r3, r3, #-1275068416	@ _4, tmp190,
 5826 0018 43F43303 		orr	r3, r3, #11730944	@ _4, _4,
 5827 001c 0360     		str	r3, [r0]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 5828              	@ main.c:2602: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 5829 001e 8B69     		ldr	r3, [r1, #24]	@ _6, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 5830              	@ main.c:2611: 		trg0 = SysTick->VAL;		trg1 = SysTick->VAL;		trg2 = SysTick->VAL;
 5831 0020 694C     		ldr	r4, .L441+12	@ tmp204,
 5832              	@ main.c:2602: 		RCC->APB2ENR   |= RCC_APB2ENR_SPI1EN;
 5833 0022 43F48053 		orr	r3, r3, #4096	@ _8, _6,
 5834 0026 8B61     		str	r3, [r1, #24]	@ _8, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 5835              	@ main.c:2605: 		SPI1->CR1 = SPI_CR1_SSM|SPI_CR1_SSI|7<<3|SPI_CR1_MSTR|SPI_CR1_CPOL|SPI_CR1_CPHA;		
 5836 0028 1680     		strh	r6, [r2]	@ movhi	@ tmp198, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 5837              	@ main.c:2609: 		SPI1->CR1 |= SPI_CR1_SPE;		
 5838 002a 1388     		ldrh	r3, [r2]	@, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 5839              	@ main.c:2611: 		trg0 = SysTick->VAL;		trg1 = SysTick->VAL;		trg2 = SysTick->VAL;
 5840 002c 6749     		ldr	r1, .L441+16	@ tmp205,
 5841              	@ main.c:2609: 		SPI1->CR1 |= SPI_CR1_SPE;		
 5842 002e 43F04003 		orr	r3, r3, #64	@ _11, MEM[(struct SPI_TypeDef *)1073819648B].CR1,
 5843 0032 1380     		strh	r3, [r2]	@ movhi	@ _11, MEM[(struct SPI_TypeDef *)1073819648B].CR1
 5844              	@ main.c:2611: 		trg0 = SysTick->VAL;		trg1 = SysTick->VAL;		trg2 = SysTick->VAL;
 5845 0034 A268     		ldr	r2, [r4, #8]	@ _12, MEM[(struct SysTick_Type *)3758153744B].VAL
 5846 0036 664B     		ldr	r3, .L441+20	@ tmp207,
 5847 0038 0A60     		str	r2, [r1]	@ _12, trg0
 5848 003a A268     		ldr	r2, [r4, #8]	@ _13, MEM[(struct SysTick_Type *)3758153744B].VAL
 5849 003c DFF8B091 		ldr	r9, .L441+52	@ tmp285,
 5850 0040 1A60     		str	r2, [r3]	@ _13, trg1
 5851 0042 A268     		ldr	r2, [r4, #8]	@ _14, MEM[(struct SysTick_Type *)3758153744B].VAL
 5852              	@ main.c:2621: 		RX1276_CS1 = 0;
 5853 0044 634B     		ldr	r3, .L441+24	@ tmp210,
 5854              	@ main.c:2611: 		trg0 = SysTick->VAL;		trg1 = SysTick->VAL;		trg2 = SysTick->VAL;
 5855 0046 C9F80020 		str	r2, [r9]	@ _14, trg2
 5856              	@ main.c:2621: 		RX1276_CS1 = 0;
 5857 004a 1D60     		str	r5, [r3]	@ tmp211, MEM[(volatile long unsigned int *)1109459344B]
 5858              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 5859 004c 2546     		mov	r5, r4	@ tmp215, tmp204
 5860              	@ main.c:2592: void BMP280_spi(void){
 5861 004e 85B0     		sub	sp, sp, #20	@,,
 5862              	@ main.c:2623: 		spi1_rw(0xE0 & 0x7f);   // reset write
 5863 0050 6020     		movs	r0, #96	@,
 5864 0052 FFF7FEFF 		bl	spi1_rw	@
 5865              	@ main.c:2624: 		spi1_rw(0xB6); 			    // reset value
 5866 0056 B620     		movs	r0, #182	@,
 5867 0058 FFF7FEFF 		bl	spi1_rw	@
 5868              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 5869 005c A368     		ldr	r3, [r4, #8]	@ _123, MEM[(struct SysTick_Type *)3758153744B].VAL
 5870 005e 5E49     		ldr	r1, .L441+28	@ tmp286,
 5871              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
ARM GAS  /tmp/ccrMssCc.s 			page 104


 5872 0060 5E48     		ldr	r0, .L441+32	@ tmp217,
 5873              	@ inc/tool/delay.h:109: 		delay_us = SysTick->VAL; 
 5874 0062 0B60     		str	r3, [r1]	@ _123, delay_us
 5875              	.L435:
 5876              	@ inc/tool/delay.h:110: 		while( STCLK_MS*ms > (delay_us - SysTick->VAL) );
 5877 0064 0B68     		ldr	r3, [r1]	@ delay_us.72_124, delay_us
 5878 0066 AA68     		ldr	r2, [r5, #8]	@ _125, MEM[(struct SysTick_Type *)3758153744B].VAL
 5879 0068 9B1A     		subs	r3, r3, r2	@ tmp216, delay_us.72_124, _125
 5880 006a 8342     		cmp	r3, r0	@ tmp216, tmp217
 5881 006c FAD9     		bls	.L435	@,
 5882              	@ main.c:2628: 		spi1_rw(0xf4 & 0x7f); 	// Select Control register 
 5883 006e 7420     		movs	r0, #116	@,
 5884 0070 FFF7FEFF 		bl	spi1_rw	@
 5885              	@ main.c:2629: 		spi1_rw(0x27); 					// Write  Control register 
 5886 0074 2720     		movs	r0, #39	@,
 5887 0076 FFF7FEFF 		bl	spi1_rw	@
 5888              	@ main.c:2633: 		RX1276_CS1 = 1;
 5889 007a 564A     		ldr	r2, .L441+24	@ tmp218,
 5890 007c 0121     		movs	r1, #1	@ tmp219,
 5891              	@ main.c:2643: 				RX1276_CS1 = 0;
 5892 007e 9346     		mov	fp, r2	@ tmp226, tmp218
 5893              	@ main.c:2639: 			if( STCLK_MS*2000 < (trg2 - SysTick->VAL)){
 5894 0080 DFF844A1 		ldr	r10, .L441+12	@ tmp221,
 5895 0084 564B     		ldr	r3, .L441+36	@ tmp223,
 5896              	@ main.c:2633: 		RX1276_CS1 = 1;
 5897 0086 1160     		str	r1, [r2]	@ tmp219, MEM[(volatile long unsigned int *)1109459344B]
 5898              	.L436:
 5899              	@ main.c:2639: 			if( STCLK_MS*2000 < (trg2 - SysTick->VAL)){
 5900 0088 D9F80020 		ldr	r2, [r9]	@ trg2.172_15, trg2
 5901 008c DAF80810 		ldr	r1, [r10, #8]	@ _16, MEM[(struct SysTick_Type *)3758153744B].VAL
 5902 0090 521A     		subs	r2, r2, r1	@ tmp222, trg2.172_15, _16
 5903 0092 9A42     		cmp	r2, r3	@ tmp222, tmp223
 5904 0094 F8D9     		bls	.L436	@,
 5905              	@ main.c:2643: 				RX1276_CS1 = 0;
 5906 0096 0022     		movs	r2, #0	@ tmp227,
 5907              	@ main.c:2640: 				trg2 = SysTick->VAL;
 5908 0098 DAF80810 		ldr	r1, [r10, #8]	@ _18, MEM[(struct SysTick_Type *)3758153744B].VAL
 5909 009c 0393     		str	r3, [sp, #12]	@ tmp223, %sfp
 5910 009e C9F80010 		str	r1, [r9]	@ _18, trg2
 5911              	@ main.c:2645: 				spi1_rw(0xF4 & 0x7f); 	// Select Control register 
 5912 00a2 7420     		movs	r0, #116	@,
 5913              	@ main.c:2643: 				RX1276_CS1 = 0;
 5914 00a4 CBF80020 		str	r2, [fp]	@ tmp227, MEM[(volatile long unsigned int *)1109459344B]
 5915              	@ main.c:2645: 				spi1_rw(0xF4 & 0x7f); 	// Select Control register 
 5916 00a8 FFF7FEFF 		bl	spi1_rw	@
 5917              	@ main.c:2646: 				spi1_rw(0x27); 					// Write  Control register 
 5918 00ac 2720     		movs	r0, #39	@,
 5919 00ae FFF7FEFF 		bl	spi1_rw	@
 5920              	@ main.c:2648: 				spi1_rw(0xF4);
 5921 00b2 F420     		movs	r0, #244	@,
 5922 00b4 FFF7FEFF 		bl	spi1_rw	@
 5923              	@ main.c:2649: 				ctrl_meas = spi1_rw(0xff);
 5924 00b8 FF20     		movs	r0, #255	@,
 5925 00ba FFF7FEFF 		bl	spi1_rw	@
 5926 00be 0190     		str	r0, [sp, #4]	@, %sfp
 5927              	@ main.c:2651: 				spi1_rw(0x88);
 5928 00c0 8820     		movs	r0, #136	@,
ARM GAS  /tmp/ccrMssCc.s 			page 105


 5929 00c2 FFF7FEFF 		bl	spi1_rw	@
 5930              	@ main.c:2652: 				v0 = spi1_rw(0xff);
 5931 00c6 FF20     		movs	r0, #255	@,
 5932 00c8 FFF7FEFF 		bl	spi1_rw	@
 5933 00cc 0546     		mov	r5, r0	@ tmp229,
 5934              	@ main.c:2653: 				v1 = spi1_rw(0xff);
 5935 00ce FF20     		movs	r0, #255	@,
 5936 00d0 FFF7FEFF 		bl	spi1_rw	@
 5937              	@ main.c:2654: 				dig_T1 = (u16)(((u16)(v1<<8)) | v0);
 5938 00d4 EDB2     		uxtb	r5, r5	@ _20, tmp229
 5939 00d6 45EA0025 		orr	r5, r5, r0, lsl #8	@ tmp235, _20,,
 5940              	@ main.c:2656: 				spi1_rw(0x8A);
 5941 00da 8A20     		movs	r0, #138	@,
 5942 00dc FFF7FEFF 		bl	spi1_rw	@
 5943              	@ main.c:2657: 				v0 = spi1_rw(0xff);
 5944 00e0 FF20     		movs	r0, #255	@,
 5945 00e2 FFF7FEFF 		bl	spi1_rw	@
 5946 00e6 0646     		mov	r6, r0	@ tmp236,
 5947              	@ main.c:2658: 				v1 = spi1_rw(0xff);
 5948 00e8 FF20     		movs	r0, #255	@,
 5949 00ea FFF7FEFF 		bl	spi1_rw	@
 5950              	@ main.c:2659: 				dig_T2 = (s16)((v1<<8) | v0);
 5951 00ee F6B2     		uxtb	r6, r6	@ _24, tmp236
 5952 00f0 C0B2     		uxtb	r0, r0	@ _25,
 5953 00f2 46EA0026 		orr	r6, r6, r0, lsl #8	@ tmp243, _24, _25,
 5954              	@ main.c:2661: 				spi1_rw(0x8C);
 5955 00f6 8C20     		movs	r0, #140	@,
 5956 00f8 FFF7FEFF 		bl	spi1_rw	@
 5957              	@ main.c:2662: 				v0 = spi1_rw(0xff);
 5958 00fc FF20     		movs	r0, #255	@,
 5959 00fe FFF7FEFF 		bl	spi1_rw	@
 5960 0102 0446     		mov	r4, r0	@ tmp244,
 5961              	@ main.c:2663: 				v1 = spi1_rw(0xff);
 5962 0104 FF20     		movs	r0, #255	@,
 5963 0106 FFF7FEFF 		bl	spi1_rw	@
 5964              	@ main.c:2664: 				dig_T3 = (s16)((v1<<8) | v0);
 5965 010a E4B2     		uxtb	r4, r4	@ _30, tmp244
 5966 010c C0B2     		uxtb	r0, r0	@ _31,
 5967 010e 44EA0024 		orr	r4, r4, r0, lsl #8	@ tmp251, _30, _31,
 5968              	@ main.c:2666: 				spi1_rw(0xFA);
 5969 0112 FA20     		movs	r0, #250	@,
 5970 0114 FFF7FEFF 		bl	spi1_rw	@
 5971              	@ main.c:2667: 				value[0] = spi1_rw(0xff);
 5972 0118 FF20     		movs	r0, #255	@,
 5973 011a FFF7FEFF 		bl	spi1_rw	@
 5974 011e 0746     		mov	r7, r0	@ tmp252,
 5975              	@ main.c:2668: 				value[1] = spi1_rw(0xff);
 5976 0120 FF20     		movs	r0, #255	@,
 5977 0122 FFF7FEFF 		bl	spi1_rw	@
 5978 0126 0290     		str	r0, [sp, #8]	@ tmp253, %sfp
 5979              	@ main.c:2669: 				value[2] = spi1_rw(0xff);
 5980 0128 FF20     		movs	r0, #255	@,
 5981 012a FFF7FEFF 		bl	spi1_rw	@
 5982              	@ main.c:2675: 				RX1276_CS1 = 1;
 5983 012e 0121     		movs	r1, #1	@ tmp256,
 5984              	@ main.c:2669: 				value[2] = spi1_rw(0xff);
 5985 0130 8046     		mov	r8, r0	@ tmp254,
ARM GAS  /tmp/ccrMssCc.s 			page 106


 5986              	@ main.c:2675: 				RX1276_CS1 = 1;
 5987 0132 CBF80010 		str	r1, [fp]	@ tmp256, MEM[(volatile long unsigned int *)1109459344B]
 5988              	@ main.c:2677: 				UaPutK("\r\n BMP280T1 = 0x");	
 5989 0136 2B48     		ldr	r0, .L441+40	@,
 5990 0138 FFF7FEFF 		bl	UaPutK	@
 5991              	@ main.c:2654: 				dig_T1 = (u16)(((u16)(v1<<8)) | v0);
 5992 013c ADB2     		uxth	r5, r5	@ dig_T1, tmp235
 5993              	@ main.c:2678: 				hex2uart(ctrl_meas,2);
 5994 013e 9DF80400 		ldrb	r0, [sp, #4]	@ zero_extendqisi2	@, %sfp
 5995 0142 0221     		movs	r1, #2	@,
 5996 0144 FFF7FEFF 		bl	hex2uart	@
 5997              	@ main.c:2659: 				dig_T2 = (s16)((v1<<8) | v0);
 5998 0148 36B2     		sxth	r6, r6	@ dig_T2, tmp243
 5999              	@ main.c:2680: 				hex2uart(dig_T1,4);
 6000 014a 2846     		mov	r0, r5	@, dig_T1
 6001 014c 0421     		movs	r1, #4	@,
 6002 014e FFF7FEFF 		bl	hex2uart	@
 6003              	@ main.c:2664: 				dig_T3 = (s16)((v1<<8) | v0);
 6004 0152 24B2     		sxth	r4, r4	@ dig_T3, tmp251
 6005              	@ main.c:2681: 				hex2uart(dig_T2,4);
 6006 0154 3046     		mov	r0, r6	@, dig_T2
 6007 0156 0421     		movs	r1, #4	@,
 6008 0158 FFF7FEFF 		bl	hex2uart	@
 6009              	@ main.c:2682: 				hex2uart(dig_T3,4);
 6010 015c 0421     		movs	r1, #4	@,
 6011 015e 2046     		mov	r0, r4	@, dig_T3
 6012 0160 FFF7FEFF 		bl	hex2uart	@
 6013              	@ main.c:2689: 				adc = ( (u32)((u16)((value[0]) << 8) | value[1] ) << 4) | ( (value[2]) >> 4);
 6014 0164 029A     		ldr	r2, [sp, #8]	@ tmp253, %sfp
 6015 0166 3F02     		lsls	r7, r7, #8	@ tmp259, tmp252,
 6016 0168 BFB2     		uxth	r7, r7	@ tmp260, tmp259
 6017 016a D2B2     		uxtb	r2, r2	@ _37, tmp253
 6018 016c 3A43     		orrs	r2, r2, r7	@, tmp262, _37, tmp260
 6019 016e C8F30317 		ubfx	r7, r8, #4, #4	@ tmp266, tmp254,,
 6020 0172 47EA0217 		orr	r7, r7, r2, lsl #4	@ adc, tmp266, tmp262,
 6021              	@ main.c:2700: 				UaPutK(" T=");	
 6022 0176 1C48     		ldr	r0, .L441+44	@,
 6023 0178 FFF7FEFF 		bl	UaPutK	@
 6024              	@ main.c:2701: 				sint2uart(adc);
 6025 017c 3846     		mov	r0, r7	@, adc
 6026 017e FFF7FEFF 		bl	sint2uart	@
 6027              	@ main.c:2693:         var2 = (((((adc>>4) - ((s32)dig_T1)) * ((adc>>4) - ((s32)dig_T1))) >> 12)
 6028 0182 C5EB1718 		rsb	r8, r5, r7, lsr #4	@ _61, dig_T1, adc,
 6029              	@ main.c:2702: 				UaPutK(" ");	
 6030 0186 1948     		ldr	r0, .L441+48	@,
 6031 0188 FFF7FEFF 		bl	UaPutK	@
 6032              	@ main.c:2693:         var2 = (((((adc>>4) - ((s32)dig_T1)) * ((adc>>4) - ((s32)dig_T1))) >> 12)
 6033 018c 08FB08F0 		mul	r0, r8, r8	@ tmp275, _61, _61
 6034              	@ main.c:2692: 				var1 = ((((adc>>3) - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 6035 0190 6D00     		lsls	r5, r5, #1	@ tmp271, dig_T1,
 6036              	@ main.c:2693:         var2 = (((((adc>>4) - ((s32)dig_T1)) * ((adc>>4) - ((s32)dig_T1))) >> 12)
 6037 0192 000B     		lsrs	r0, r0, #12	@ tmp276, tmp275,
 6038              	@ main.c:2692: 				var1 = ((((adc>>3) - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
 6039 0194 C5EBD705 		rsb	r5, r5, r7, lsr #3	@ tmp272, tmp271, adc,
 6040              	@ main.c:2694: 				* ((s32)dig_T3))>>14;
 6041 0198 04FB00F0 		mul	r0, r4, r0	@ tmp277, dig_T3, tmp276
 6042              	@ main.c:2692: 				var1 = ((((adc>>3) - ((s32)dig_T1<<1))) * ((s32)dig_T2)) >> 11;
ARM GAS  /tmp/ccrMssCc.s 			page 107


 6043 019c 06FB05F5 		mul	r5, r6, r5	@ tmp273, dig_T2, tmp272
 6044              	@ main.c:2693:         var2 = (((((adc>>4) - ((s32)dig_T1)) * ((adc>>4) - ((s32)dig_T1))) >> 12)
 6045 01a0 800B     		lsrs	r0, r0, #14	@ var2, tmp277,
 6046              	@ main.c:2697:         tFine = var1 + var2;
 6047 01a2 00EBD520 		add	r0, r0, r5, lsr #11	@ tFine, var2, tmp273,
 6048              	@ main.c:2698: 				T     = (tFine * 5 + 128) >> 8;
 6049 01a6 00EB8000 		add	r0, r0, r0, lsl #2	@ tmp282, tFine, tFine,
 6050 01aa 8030     		adds	r0, r0, #128	@ tmp283, tmp282,
 6051              	@ main.c:2703: 				num2uart(T,5,3);
 6052 01ac 000A     		lsrs	r0, r0, #8	@, tmp283,
 6053 01ae 0322     		movs	r2, #3	@,
 6054 01b0 0521     		movs	r1, #5	@,
 6055 01b2 FFF7FEFF 		bl	num2uart	@
 6056 01b6 039B     		ldr	r3, [sp, #12]	@ tmp223, %sfp
 6057 01b8 66E7     		b	.L436	@
 6058              	.L442:
 6059 01ba 00BF     		.align	2
 6060              	.L441:
 6061 01bc 00080140 		.word	1073809408
 6062 01c0 00100240 		.word	1073876992
 6063 01c4 00300140 		.word	1073819648
 6064 01c8 10E000E0 		.word	-536813552
 6065 01cc 00000000 		.word	trg0
 6066 01d0 00000000 		.word	trg1
 6067 01d4 90012142 		.word	1109459344
 6068 01d8 00000000 		.word	delay_us
 6069 01dc 8F5F0100 		.word	89999
 6070 01e0 80A81201 		.word	18000000
 6071 01e4 00000000 		.word	.LC75
 6072 01e8 24000000 		.word	.LC72
 6073 01ec 24010000 		.word	.LC36
 6074 01f0 00000000 		.word	trg2
 6075              		.size	BMP280_spi, .-BMP280_spi
 6076              		.section	.text.fun_tool,"ax",%progbits
 6077              		.align	1
 6078              		.p2align 2,,3
 6079              		.global	fun_tool
 6080              		.syntax unified
 6081              		.thumb
 6082              		.thumb_func
 6083              		.fpu softvfp
 6084              		.type	fun_tool, %function
 6085              	fun_tool:
 6086              		@ args = 0, pretend = 0, frame = 528
 6087              		@ frame_needed = 0, uses_anonymous_args = 0
 6088 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 6089              	@ main.c:2720: 	switch(znak){
 6090 0004 6338     		subs	r0, r0, #99	@ tmp279, znak,
 6091              	@ main.c:2711: void fun_tool(u08 znak,T_SD1 * sda){
 6092 0006 ADF5057D 		sub	sp, sp, #532	@,,
 6093              	@ main.c:2720: 	switch(znak){
 6094 000a 1428     		cmp	r0, #20	@ tmp279,
 6095 000c 00F28880 		bhi	.L444	@
 6096 0010 DFE810F0 		tbh	[pc, r0, lsl #1]	@ tmp279
 6097              	.L446:
 6098 0014 B200     		.2byte	(.L445-.L446)/2
 6099 0016 8600     		.2byte	(.L444-.L446)/2
ARM GAS  /tmp/ccrMssCc.s 			page 108


 6100 0018 8600     		.2byte	(.L444-.L446)/2
 6101 001a 8600     		.2byte	(.L444-.L446)/2
 6102 001c 8600     		.2byte	(.L444-.L446)/2
 6103 001e 8600     		.2byte	(.L444-.L446)/2
 6104 0020 8600     		.2byte	(.L444-.L446)/2
 6105 0022 8600     		.2byte	(.L444-.L446)/2
 6106 0024 8600     		.2byte	(.L444-.L446)/2
 6107 0026 8600     		.2byte	(.L444-.L446)/2
 6108 0028 BF00     		.2byte	(.L447-.L446)/2
 6109 002a 8600     		.2byte	(.L444-.L446)/2
 6110 002c 1500     		.2byte	(.L448-.L446)/2
 6111 002e 8600     		.2byte	(.L444-.L446)/2
 6112 0030 8600     		.2byte	(.L444-.L446)/2
 6113 0032 FF00     		.2byte	(.L449-.L446)/2
 6114 0034 8600     		.2byte	(.L444-.L446)/2
 6115 0036 8600     		.2byte	(.L444-.L446)/2
 6116 0038 5401     		.2byte	(.L450-.L446)/2
 6117 003a 8600     		.2byte	(.L444-.L446)/2
 6118 003c 8D00     		.2byte	(.L451-.L446)/2
 6119              		.p2align 1
 6120              	.L448:
 6121              	@ main.c:2832: 		UaPutK("Read sector");
 6122 003e B648     		ldr	r0, .L483	@,
 6123 0040 FFF7FEFF 		bl	UaPutK	@
 6124              	@ main.c:2833: 		UaPutK("\r\n sectorNumber = ");
 6125 0044 B548     		ldr	r0, .L483+4	@,
 6126 0046 FFF7FEFF 		bl	UaPutK	@
 6127              	@ main.c:2836: 		strBlock=UART_getNum();
 6128 004a FFF7FEFF 		bl	UART_getNum	@
 6129              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6130 004e B44C     		ldr	r4, .L483+8	@ tmp341,
 6131 0050 B44D     		ldr	r5, .L483+12	@ tmp342,
 6132 0052 A368     		ldr	r3, [r4, #8]	@ _169, MEM[(struct SysTick_Type *)3758153744B].VAL
 6133              	@ main.c:2839: 		sd_status=mci_read_sect (strBlock,buffer,1);
 6134 0054 0122     		movs	r2, #1	@,
 6135 0056 04A9     		add	r1, sp, #16	@ tmp393,,
 6136              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6137 0058 2B60     		str	r3, [r5]	@ _169, Timt
 6138              	@ main.c:2836: 		strBlock=UART_getNum();
 6139 005a 0746     		mov	r7, r0	@ strBlock,
 6140              	@ main.c:2839: 		sd_status=mci_read_sect (strBlock,buffer,1);
 6141 005c FFF7FEFF 		bl	mmc_read_sect	@
 6142              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 6143 0060 2A68     		ldr	r2, [r5]	@ Timt.84_166, Timt
 6144 0062 A368     		ldr	r3, [r4, #8]	@ _167, MEM[(struct SysTick_Type *)3758153744B].VAL
 6145 0064 D31A     		subs	r3, r2, r3	@ _168, Timt.84_166, _167
 6146 0066 0193     		str	r3, [sp, #4]	@ _168, %sfp
 6147 0068 0393     		str	r3, [sp, #12]	@ _168, MEM[(volatile u32 *)&tim]
 6148              	@ main.c:2842: 		if(sd_status){
 6149 006a 0028     		cmp	r0, #0	@
 6150 006c 00F04F81 		beq	.L462	@
 6151              	@ main.c:2843: 			UaPutS("\r\n ");
 6152 0070 AD48     		ldr	r0, .L483+16	@,
 6153 0072 FFF7FEFF 		bl	UaPutS	@
 6154              	@ main.c:2845: 			hex2uart(strBlock, 8);
 6155 0076 0821     		movs	r1, #8	@,
 6156 0078 3846     		mov	r0, r7	@, strBlock
ARM GAS  /tmp/ccrMssCc.s 			page 109


 6157 007a FFF7FEFF 		bl	hex2uart	@
 6158 007e 0024     		movs	r4, #0	@ ivtmp.562,
 6159              	.L463:
 6160              	@ main.c:2847: 				hex2uart(k, 2);
 6161 0080 2046     		mov	r0, r4	@, ivtmp.562
 6162 0082 0221     		movs	r1, #2	@,
 6163 0084 0134     		adds	r4, r4, #1	@ ivtmp.562, ivtmp.562,
 6164 0086 FFF7FEFF 		bl	hex2uart	@
 6165              	@ main.c:2846: 			for(u08 k=0;k<16;k++){
 6166 008a 102C     		cmp	r4, #16	@ ivtmp.562,
 6167 008c F8D1     		bne	.L463	@,
 6168              	@ main.c:2850: 			UaPutS("\r\n\n ");
 6169 008e A748     		ldr	r0, .L483+20	@,
 6170 0090 FFF7FEFF 		bl	UaPutS	@
 6171              	@ main.c:2852: 				hex2uart(strBlock*512 + i, 8);
 6172 0094 04AE     		add	r6, sp, #16	@ tmp396,,
 6173              	@ main.c:2856: 				UaPutS("  ");
 6174 0096 DFF8DC92 		ldr	r9, .L483+92	@ tmp378,
 6175              	@ main.c:2861: 				UaPutS("\r\n ");
 6176 009a DFF88C82 		ldr	r8, .L483+16	@ tmp379,
 6177 009e 0DF5047A 		add	r10, sp, #528	@ _54,,
 6178 00a2 C6EB4727 		rsb	r7, r6, r7, lsl #9	@ tmp371, tmp397, strBlock,
 6179 00a6 08AD     		add	r5, sp, #32	@ ivtmp.560,,
 6180              	.L468:
 6181              	@ main.c:2852: 				hex2uart(strBlock*512 + i, 8);
 6182 00a8 0821     		movs	r1, #8	@,
 6183 00aa B819     		adds	r0, r7, r6	@, tmp371, ivtmp.561
 6184 00ac FFF7FEFF 		bl	hex2uart	@
 6185 00b0 3446     		mov	r4, r6	@ ivtmp.552, ivtmp.561
 6186              	.L464:
 6187              	@ main.c:2854: 					hex2uart(buffer[k+i], 2);
 6188 00b2 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2	@, MEM[base: _181, offset: 0B]
 6189 00b6 0221     		movs	r1, #2	@,
 6190 00b8 FFF7FEFF 		bl	hex2uart	@
 6191              	@ main.c:2853: 				for(u08 k=0;k<16;k++){
 6192 00bc A542     		cmp	r5, r4	@ ivtmp.560, ivtmp.552
 6193 00be F8D1     		bne	.L464	@,
 6194              	@ main.c:2856: 				UaPutS("  ");
 6195 00c0 4846     		mov	r0, r9	@, tmp378
 6196 00c2 FFF7FEFF 		bl	UaPutS	@
 6197 00c6 B346     		mov	fp, r6	@ ivtmp.543, ivtmp.561
 6198              	.L467:
 6199              	@ main.c:2858: 					if ( buffer[k+i]<0x20 || buffer[k+i]>127 ) UaPutC('.');
 6200 00c8 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2	@ _39, MEM[base: _195, offset: 0B]
 6201 00cc A0F12002 		sub	r2, r0, #32	@ tmp355, _39,
 6202 00d0 5F2A     		cmp	r2, #95	@ tmp355,
 6203 00d2 88BF     		it	hi
 6204 00d4 2E20     		movhi	r0, #46	@,
 6205              	@ main.c:2859: 					else UaPutC(buffer[k+i]);
 6206 00d6 FFF7FEFF 		bl	UaPutC	@
 6207              	@ main.c:2857: 				for(u08 k=0;k<16;k++){
 6208 00da 5C45     		cmp	r4, fp	@ ivtmp.552, ivtmp.543
 6209 00dc F4D1     		bne	.L467	@,
 6210 00de 1036     		adds	r6, r6, #16	@ ivtmp.561, ivtmp.561,
 6211              	@ main.c:2861: 				UaPutS("\r\n ");
 6212 00e0 4046     		mov	r0, r8	@, tmp379
 6213 00e2 FFF7FEFF 		bl	UaPutS	@
ARM GAS  /tmp/ccrMssCc.s 			page 110


 6214              	@ main.c:2851: 			for(u32 i=0;i<512;i+=16){
 6215 00e6 B245     		cmp	r10, r6	@ _54, ivtmp.561
 6216 00e8 05F11005 		add	r5, r5, #16	@ ivtmp.560, ivtmp.560,
 6217 00ec DCD1     		bne	.L468	@,
 6218              	@ main.c:2863: 			UaPutK(" t_rsdio = ");	uint2uart(tim/TIM_US);
 6219 00ee 9048     		ldr	r0, .L483+24	@,
 6220 00f0 FFF7FEFF 		bl	UaPutK	@
 6221 00f4 019B     		ldr	r3, [sp, #4]	@ _168, %sfp
 6222 00f6 8F48     		ldr	r0, .L483+28	@ tmp360,
 6223 00f8 A0FB0330 		umull	r3, r0, r0, r3	@ tmp390, tmp359, tmp360, _168
 6224 00fc 4008     		lsrs	r0, r0, #1	@, tmp359,
 6225 00fe FFF7FEFF 		bl	uint2uart	@
 6226              	@ main.c:2865: 			crc16_spi2( (u16*) buffer,256, &crc16 );
 6227 0102 4FF48071 		mov	r1, #256	@,
 6228 0106 04A8     		add	r0, sp, #16	@ tmp400,,
 6229 0108 0DF10A02 		add	r2, sp, #10	@ tmp401,,
 6230              	.L481:
 6231 010c FFF7FEFF 		bl	crc16_spi2	@
 6232              	@ main.c:2867: 			UaPutK(" crc = ");	hex2uart(crc16,4);
 6233 0110 8948     		ldr	r0, .L483+32	@,
 6234 0112 FFF7FEFF 		bl	UaPutK	@
 6235 0116 BDF80A00 		ldrh	r0, [sp, #10]	@, crc16
 6236 011a 0421     		movs	r1, #4	@,
 6237 011c FFF7FEFF 		bl	hex2uart	@
 6238              	.L444:
 6239              	@ main.c:2876: 	UaPutS("\r\n ");
 6240 0120 8148     		ldr	r0, .L483+16	@,
 6241 0122 FFF7FEFF 		bl	UaPutS	@
 6242              	@ main.c:2877: }
 6243 0126 0DF5057D 		add	sp, sp, #532	@,,
 6244              		@ sp needed	@
 6245 012a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6246              	.L451:
 6247              	@ main.c:2771: 		UaPutK("\r\n Flash memory Page = ");
 6248 012e 8348     		ldr	r0, .L483+36	@,
 6249 0130 FFF7FEFF 		bl	UaPutK	@
 6250              	@ main.c:2772: 		strBlock = UART_getNum();
 6251 0134 FFF7FEFF 		bl	UART_getNum	@
 6252              	@ main.c:2773: 		strBlock = strBlock > 254 ? 254 : strBlock;
 6253 0138 FE28     		cmp	r0, #254	@,
 6254 013a 28BF     		it	cs
 6255 013c FE20     		movcs	r0, #254	@ strBlock,
 6256              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6257 013e 784D     		ldr	r5, .L483+8	@ tmp297,
 6258 0140 784C     		ldr	r4, .L483+12	@ tmp298,
 6259 0142 AB68     		ldr	r3, [r5, #8]	@ _161, MEM[(struct SysTick_Type *)3758153744B].VAL
 6260              	@ main.c:2774: 		strBlock = (u32)(0x800*strBlock + 0x08000000);
 6261 0144 00F58030 		add	r0, r0, #65536	@ _17, strBlock,
 6262              	@ main.c:2777: 		EraseFlashPage(strBlock);
 6263 0148 C002     		lsls	r0, r0, #11	@, _17,
 6264              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6265 014a 2360     		str	r3, [r4]	@ _161, Timt
 6266              	@ main.c:2777: 		EraseFlashPage(strBlock);
 6267 014c FFF7FEFF 		bl	EraseFlashPage	@
 6268              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 6269 0150 2468     		ldr	r4, [r4]	@ Timt.84_158, Timt
 6270 0152 AB68     		ldr	r3, [r5, #8]	@ _159, MEM[(struct SysTick_Type *)3758153744B].VAL
ARM GAS  /tmp/ccrMssCc.s 			page 111


 6271              	@ main.c:2779: 		UaPutS("\r\n Kasowanie pamieci FLASH = "); sint2uart(tim/TIM_US);
 6272 0154 7A48     		ldr	r0, .L483+40	@,
 6273              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 6274 0156 E41A     		subs	r4, r4, r3	@ _160, Timt.84_158, _159
 6275 0158 0394     		str	r4, [sp, #12]	@ _160, MEM[(volatile u32 *)&tim]
 6276              	@ main.c:2779: 		UaPutS("\r\n Kasowanie pamieci FLASH = "); sint2uart(tim/TIM_US);
 6277 015a FFF7FEFF 		bl	UaPutS	@
 6278 015e 7548     		ldr	r0, .L483+28	@ tmp307,
 6279 0160 A0FB0430 		umull	r3, r0, r0, r4	@ tmp388, tmp306, tmp307, _160
 6280 0164 4008     		lsrs	r0, r0, #1	@, tmp306,
 6281 0166 FFF7FEFF 		bl	sint2uart	@
 6282              	@ main.c:2876: 	UaPutS("\r\n ");
 6283 016a 6F48     		ldr	r0, .L483+16	@,
 6284 016c FFF7FEFF 		bl	UaPutS	@
 6285              	@ main.c:2877: }
 6286 0170 0DF5057D 		add	sp, sp, #532	@,,
 6287              		@ sp needed	@
 6288 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6289              	.L445:
 6290              	@ main.c:2826: 		TFT_Clear(BLACK);
 6291 0178 0020     		movs	r0, #0	@,
 6292 017a FFF7FEFF 		bl	TFT_Clear	@
 6293              	@ main.c:2828: 		UaPutS("\r\n Clear !");
 6294 017e 7148     		ldr	r0, .L483+44	@,
 6295 0180 FFF7FEFF 		bl	UaPutS	@
 6296              	@ main.c:2876: 	UaPutS("\r\n ");
 6297 0184 6848     		ldr	r0, .L483+16	@,
 6298 0186 FFF7FEFF 		bl	UaPutS	@
 6299              	@ main.c:2877: }
 6300 018a 0DF5057D 		add	sp, sp, #532	@,,
 6301              		@ sp needed	@
 6302 018e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6303              	.L447:
 6304              	@ main.c:2812: 		UaPutS("\r\n Read Start !");
 6305 0192 6D48     		ldr	r0, .L483+48	@,
 6306 0194 FFF7FEFF 		bl	UaPutS	@
 6307 0198 0025     		movs	r5, #0	@ ivtmp.533,
 6308 019a DFF88891 		ldr	r9, .L483+12	@ tmp370,
 6309              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6310 019e 604E     		ldr	r6, .L483+8	@ tmp325,
 6311              	@ main.c:2817: 			tim = tim/TIM_US;
 6312 01a0 644F     		ldr	r7, .L483+28	@ tmp332,
 6313              	@ main.c:2820: 			if(tim>1000 || tim<700){ UaPutK("\r\n"); int2uart(n,7,0); int2uart(tim,6,3); }
 6314 01a2 DFF8D481 		ldr	r8, .L483+96	@ tmp374,
 6315 01a6 05E0     		b	.L469	@
 6316              	.L458:
 6317 01a8 BAF5967F 		cmp	r10, #300	@ _56,
 6318 01ac 18D8     		bhi	.L461	@,
 6319              	@ main.c:2813: 		for(u32 n=0;n<125;n++){
 6320 01ae 7C2D     		cmp	r5, #124	@ ivtmp.533,
 6321 01b0 25D0     		beq	.L482	@,
 6322              	.L459:
 6323 01b2 0135     		adds	r5, r5, #1	@ ivtmp.533, ivtmp.533,
 6324              	.L469:
 6325              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 6326 01b4 B368     		ldr	r3, [r6, #8]	@ _165, MEM[(struct SysTick_Type *)3758153744B].VAL
 6327 01b6 C9F80030 		str	r3, [r9]	@ _165, Timt
ARM GAS  /tmp/ccrMssCc.s 			page 112


 6328              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 6329 01ba D9F80030 		ldr	r3, [r9]	@ Timt.84_162, Timt
 6330 01be B268     		ldr	r2, [r6, #8]	@ _163, MEM[(struct SysTick_Type *)3758153744B].VAL
 6331 01c0 9B1A     		subs	r3, r3, r2	@ _164, Timt.84_162, _163
 6332              	@ main.c:2817: 			tim = tim/TIM_US;
 6333 01c2 A7FB0324 		umull	r2, r4, r7, r3	@ tmp389, tmp331, tmp332, _164
 6334 01c6 6408     		lsrs	r4, r4, #1	@ _24, tmp331,
 6335              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 6336 01c8 0393     		str	r3, [sp, #12]	@ _164, MEM[(volatile u32 *)&tim]
 6337 01ca A4F52F7A 		sub	r10, r4, #700	@ _56, _24,
 6338              	@ main.c:2817: 			tim = tim/TIM_US;
 6339 01ce 0394     		str	r4, [sp, #12]	@ _24, tim
 6340              	@ main.c:2819: 			if(n%1000==0) UaPutK(".");
 6341 01d0 002D     		cmp	r5, #0	@ ivtmp.533
 6342 01d2 E9D1     		bne	.L458	@
 6343              	@ main.c:2819: 			if(n%1000==0) UaPutK(".");
 6344 01d4 5D48     		ldr	r0, .L483+52	@,
 6345 01d6 FFF7FEFF 		bl	UaPutK	@
 6346              	@ main.c:2820: 			if(tim>1000 || tim<700){ UaPutK("\r\n"); int2uart(n,7,0); int2uart(tim,6,3); }
 6347 01da BAF5967F 		cmp	r10, #300	@ _56,
 6348 01de E8D9     		bls	.L459	@,
 6349              	.L461:
 6350              	@ main.c:2820: 			if(tim>1000 || tim<700){ UaPutK("\r\n"); int2uart(n,7,0); int2uart(tim,6,3); }
 6351 01e0 4046     		mov	r0, r8	@, tmp374
 6352 01e2 FFF7FEFF 		bl	UaPutK	@
 6353 01e6 0022     		movs	r2, #0	@,
 6354 01e8 0721     		movs	r1, #7	@,
 6355 01ea 2846     		mov	r0, r5	@, ivtmp.533
 6356 01ec FFF7FEFF 		bl	int2uart	@
 6357 01f0 2046     		mov	r0, r4	@, _24
 6358 01f2 0322     		movs	r2, #3	@,
 6359 01f4 0621     		movs	r1, #6	@,
 6360 01f6 FFF7FEFF 		bl	int2uart	@
 6361              	@ main.c:2813: 		for(u32 n=0;n<125;n++){
 6362 01fa 7C2D     		cmp	r5, #124	@ ivtmp.533,
 6363 01fc D9D1     		bne	.L459	@,
 6364              	.L482:
 6365              	@ main.c:2822: 		UaPutS("\r\n Read Done !");
 6366 01fe 5448     		ldr	r0, .L483+56	@,
 6367 0200 FFF7FEFF 		bl	UaPutS	@
 6368              	@ main.c:2876: 	UaPutS("\r\n ");
 6369 0204 4848     		ldr	r0, .L483+16	@,
 6370 0206 FFF7FEFF 		bl	UaPutS	@
 6371              	@ main.c:2877: }
 6372 020a 0DF5057D 		add	sp, sp, #532	@,,
 6373              		@ sp needed	@
 6374 020e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6375              	.L449:
 6376              	@ main.c:2723: 		UaPutK("\r\n FLASH memory Read = ");
 6377 0212 5048     		ldr	r0, .L483+60	@,
 6378 0214 FFF7FEFF 		bl	UaPutK	@
 6379              	@ main.c:2724: 		UaPutK("\r\n FLASH memory Read = ");
 6380 0218 4E48     		ldr	r0, .L483+60	@,
 6381 021a FFF7FEFF 		bl	UaPutK	@
 6382              	@ main.c:2726: 		strBlock = UART_getNum();
 6383 021e FFF7FEFF 		bl	UART_getNum	@
 6384              	@ main.c:2729: 		strBlock = strBlock > 254 ? 254 : strBlock;
ARM GAS  /tmp/ccrMssCc.s 			page 113


 6385 0222 FE28     		cmp	r0, #254	@ tmp391,
 6386 0224 28BF     		it	cs
 6387 0226 FE20     		movcs	r0, #254	@ tmp391,
 6388 0228 0446     		mov	r4, r0	@ strBlock, tmp391
 6389              	@ main.c:2730: 		UaPutK("\r\n Flash memory Page ="); sint2uart(strBlock);
 6390 022a 4B48     		ldr	r0, .L483+64	@,
 6391 022c FFF7FEFF 		bl	UaPutK	@
 6392 0230 2046     		mov	r0, r4	@, strBlock
 6393              	@ main.c:2731: 		strBlock = 0x800*strBlock + 0x08000000;
 6394 0232 04F58034 		add	r4, r4, #65536	@ _2, strBlock,
 6395              	@ main.c:2730: 		UaPutK("\r\n Flash memory Page ="); sint2uart(strBlock);
 6396 0236 FFF7FEFF 		bl	sint2uart	@
 6397              	@ main.c:2731: 		strBlock = 0x800*strBlock + 0x08000000;
 6398 023a E402     		lsls	r4, r4, #11	@ ivtmp.588, _2,
 6399              	@ main.c:2739: 			UaPutS("\r\n ");
 6400 023c 3A48     		ldr	r0, .L483+16	@,
 6401 023e FFF7FEFF 		bl	UaPutS	@
 6402              	@ main.c:2741: 			hex2uart(strBlock, 8);
 6403 0242 2046     		mov	r0, r4	@, ivtmp.588
 6404 0244 0821     		movs	r1, #8	@,
 6405 0246 FFF7FEFF 		bl	hex2uart	@
 6406              	@ main.c:2736: 		p_buf = (u08 *) strBlock;
 6407 024a A346     		mov	fp, r4	@ p_buf, ivtmp.588
 6408              	@ main.c:2741: 			hex2uart(strBlock, 8);
 6409 024c 0025     		movs	r5, #0	@ ivtmp.590,
 6410              	.L452:
 6411              	@ main.c:2743: 				hex2uart(k, 2);
 6412 024e 2846     		mov	r0, r5	@, ivtmp.590
 6413 0250 0221     		movs	r1, #2	@,
 6414 0252 0135     		adds	r5, r5, #1	@ ivtmp.590, ivtmp.590,
 6415 0254 FFF7FEFF 		bl	hex2uart	@
 6416              	@ main.c:2742: 			for(u08 k=0;k<16;k++){
 6417 0258 102D     		cmp	r5, #16	@ ivtmp.590,
 6418 025a F8D1     		bne	.L452	@,
 6419              	@ main.c:2746: 			UaPutS("\r\n\n ");
 6420 025c 3348     		ldr	r0, .L483+20	@,
 6421 025e 04F12007 		add	r7, r4, #32	@ ivtmp.588, ivtmp.588,
 6422 0262 FFF7FEFF 		bl	UaPutS	@
 6423 0266 3E46     		mov	r6, r7	@ ivtmp.589, ivtmp.588
 6424              	@ main.c:2753: 				UaPutS("  ");
 6425 0268 DFF808A1 		ldr	r10, .L483+92	@ tmp384,
 6426              	@ main.c:2758: 				UaPutS("\r\n ");
 6427 026c DFF8B890 		ldr	r9, .L483+16	@ tmp385,
 6428 0270 04F50068 		add	r8, r4, #2048	@ _241, ivtmp.588,
 6429              	.L457:
 6430              	@ main.c:2749: 				hex2uart(strBlock + i, 8);	// memory
 6431 0274 0821     		movs	r1, #8	@,
 6432 0276 2046     		mov	r0, r4	@, ivtmp.588
 6433 0278 FFF7FEFF 		bl	hex2uart	@
 6434 027c 2546     		mov	r5, r4	@ ivtmp.581, ivtmp.588
 6435              	.L453:
 6436              	@ main.c:2751: 					hex2uart(p_buf[k+i], 2);
 6437 027e 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2	@, *_7
 6438 0282 0221     		movs	r1, #2	@,
 6439 0284 FFF7FEFF 		bl	hex2uart	@
 6440              	@ main.c:2750: 				for(u08 k=0;k<32;k++){
 6441 0288 B542     		cmp	r5, r6	@ ivtmp.581, ivtmp.589
ARM GAS  /tmp/ccrMssCc.s 			page 114


 6442 028a F8D1     		bne	.L453	@,
 6443              	@ main.c:2753: 				UaPutS("  ");
 6444 028c 5046     		mov	r0, r10	@, tmp384
 6445 028e FFF7FEFF 		bl	UaPutS	@
 6446              	.L456:
 6447              	@ main.c:2755: 					if ( p_buf[k+i]<0x20 || p_buf[k+i]>127 ) UaPutC('.');
 6448 0292 2078     		ldrb	r0, [r4]	@ zero_extendqisi2	@ _13, *_12
 6449 0294 0134     		adds	r4, r4, #1	@ ivtmp.574, ivtmp.574,
 6450 0296 A0F12003 		sub	r3, r0, #32	@ tmp288, _13,
 6451 029a 5F2B     		cmp	r3, #95	@ tmp288,
 6452 029c 88BF     		it	hi
 6453 029e 2E20     		movhi	r0, #46	@,
 6454              	@ main.c:2756: 					else UaPutC(p_buf[k+i]);
 6455 02a0 FFF7FEFF 		bl	UaPutC	@
 6456              	@ main.c:2754: 				for(u08 k=0;k<32;k++){
 6457 02a4 AC42     		cmp	r4, r5	@ ivtmp.574, ivtmp.581
 6458 02a6 F4D1     		bne	.L456	@,
 6459              	@ main.c:2758: 				UaPutS("\r\n ");
 6460 02a8 4846     		mov	r0, r9	@, tmp385
 6461 02aa FFF7FEFF 		bl	UaPutS	@
 6462              	@ main.c:2747: 			for(u32 i=0;i<2048;i+=32){
 6463 02ae 4745     		cmp	r7, r8	@ ivtmp.588, _241
 6464 02b0 06F12006 		add	r6, r6, #32	@ ivtmp.589, ivtmp.589,
 6465 02b4 3C46     		mov	r4, r7	@ ivtmp.588, ivtmp.588
 6466 02b6 24D0     		beq	.L478	@,
 6467 02b8 2037     		adds	r7, r7, #32	@ ivtmp.588, ivtmp.588,
 6468 02ba DBE7     		b	.L457	@
 6469              	.L450:
 6470              	@ main.c:2790: 		UaPutK("\r\n Godzina = ");
 6471 02bc 2748     		ldr	r0, .L483+68	@,
 6472 02be FFF7FEFF 		bl	UaPutK	@
 6473              	@ main.c:2791: 		datetime.hor = UART_getNum();
 6474 02c2 FFF7FEFF 		bl	UART_getNum	@
 6475 02c6 264C     		ldr	r4, .L483+72	@ tmp309,
 6476 02c8 A070     		strb	r0, [r4, #2]	@, datetime.hor
 6477              	@ main.c:2792: 		UaPutK("\r\n Minut   = ");
 6478 02ca 2648     		ldr	r0, .L483+76	@,
 6479 02cc FFF7FEFF 		bl	UaPutK	@
 6480              	@ main.c:2793: 		datetime.min = UART_getNum();
 6481 02d0 FFF7FEFF 		bl	UART_getNum	@
 6482 02d4 6070     		strb	r0, [r4, #1]	@, datetime.min
 6483              	@ main.c:2794: 		UaPutK("\r\n Sekunda = ");
 6484 02d6 2448     		ldr	r0, .L483+80	@,
 6485 02d8 FFF7FEFF 		bl	UaPutK	@
 6486              	@ main.c:2795: 		datetime.sec = UART_getNum();
 6487 02dc FFF7FEFF 		bl	UART_getNum	@
 6488              	@ main.c:2799: 		datetime.mdy=18;		// 1..31	dzien miesiaca
 6489 02e0 0B23     		movs	r3, #11	@ tmp321,
 6490              	@ main.c:2797: 		datetime.yer=2016;	// 1970..2106
 6491 02e2 4FF4FC61 		mov	r1, #2016	@ tmp317,
 6492              	@ main.c:2802: 		datetime.sec=30;		// 0..59	sekunda
 6493 02e6 214A     		ldr	r2, .L483+84	@ tmp319,
 6494              	@ main.c:2803: 		rtc_SetTime(&datetime );
 6495 02e8 2046     		mov	r0, r4	@, tmp309
 6496              	@ main.c:2802: 		datetime.sec=30;		// 0..59	sekunda
 6497 02ea 2260     		str	r2, [r4]	@ tmp319, MEM[(unsigned char *)&datetime]
 6498              	@ main.c:2799: 		datetime.mdy=18;		// 1..31	dzien miesiaca
ARM GAS  /tmp/ccrMssCc.s 			page 115


 6499 02ec 2371     		strb	r3, [r4, #4]	@ tmp321, MEM[(unsigned char *)&datetime + 4B]
 6500              	@ main.c:2797: 		datetime.yer=2016;	// 1970..2106
 6501 02ee E180     		strh	r1, [r4, #6]	@ movhi	@ tmp317, datetime.yer
 6502              	@ main.c:2803: 		rtc_SetTime(&datetime );
 6503 02f0 FFF7FEFF 		bl	rtc_SetTime	@
 6504              	@ main.c:2876: 	UaPutS("\r\n ");
 6505 02f4 0C48     		ldr	r0, .L483+16	@,
 6506 02f6 FFF7FEFF 		bl	UaPutS	@
 6507              	@ main.c:2877: }
 6508 02fa 0DF5057D 		add	sp, sp, #532	@,,
 6509              		@ sp needed	@
 6510 02fe BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6511              	.L478:
 6512              	@ main.c:2763: 			crc16_spi2((u16*)p_buf,2048, &crc16 );
 6513 0302 5846     		mov	r0, fp	@, p_buf
 6514 0304 0DF10A02 		add	r2, sp, #10	@ tmp392,,
 6515 0308 4FF40061 		mov	r1, #2048	@,
 6516 030c FEE6     		b	.L481	@
 6517              	.L462:
 6518              	@ main.c:2870: 		} else UaPutK("\r\n Read Error !!!");
 6519 030e 1848     		ldr	r0, .L483+88	@,
 6520 0310 FFF7FEFF 		bl	UaPutK	@
 6521 0314 04E7     		b	.L444	@
 6522              	.L484:
 6523 0316 00BF     		.align	2
 6524              	.L483:
 6525 0318 DC000000 		.word	.LC90
 6526 031c E8000000 		.word	.LC91
 6527 0320 10E000E0 		.word	-536813552
 6528 0324 00000000 		.word	Timt
 6529 0328 30000000 		.word	.LC78
 6530 032c 34000000 		.word	.LC79
 6531 0330 FC000000 		.word	.LC92
 6532 0334 398EE338 		.word	954437177
 6533 0338 40000000 		.word	.LC81
 6534 033c 48000000 		.word	.LC82
 6535 0340 60000000 		.word	.LC83
 6536 0344 D0000000 		.word	.LC89
 6537 0348 B0000000 		.word	.LC87
 6538 034c 0C000000 		.word	.LC18
 6539 0350 C0000000 		.word	.LC88
 6540 0354 00000000 		.word	.LC76
 6541 0358 18000000 		.word	.LC77
 6542 035c 80000000 		.word	.LC84
 6543 0360 00000000 		.word	.LANCHOR28
 6544 0364 90000000 		.word	.LC85
 6545 0368 A0000000 		.word	.LC86
 6546 036c 1E320A12 		.word	302658078
 6547 0370 08010000 		.word	.LC93
 6548 0374 3C000000 		.word	.LC80
 6549 0378 04000000 		.word	.LC13
 6550              		.size	fun_tool, .-fun_tool
 6551              		.section	.text.qtouch_mesaure,"ax",%progbits
 6552              		.align	1
 6553              		.p2align 2,,3
 6554              		.global	qtouch_mesaure
 6555              		.syntax unified
ARM GAS  /tmp/ccrMssCc.s 			page 116


 6556              		.thumb
 6557              		.thumb_func
 6558              		.fpu softvfp
 6559              		.type	qtouch_mesaure, %function
 6560              	qtouch_mesaure:
 6561              		@ args = 0, pretend = 0, frame = 0
 6562              		@ frame_needed = 0, uses_anonymous_args = 0
 6563              		@ link register save eliminated.
 6564              	@ main.c:3221: 		PE2_o = 0;
 6565 0000 0021     		movs	r1, #0	@ tmp118,
 6566 0002 0E4B     		ldr	r3, .L494	@ tmp117,
 6567              	@ main.c:3222: 		while(PE4_i == 1);
 6568 0004 0E4A     		ldr	r2, .L494+4	@ tmp119,
 6569              	@ main.c:3221: 		PE2_o = 0;
 6570 0006 1960     		str	r1, [r3]	@ tmp118, MEM[(volatile long unsigned int *)1109590408B]
 6571              	.L486:
 6572              	@ main.c:3222: 		while(PE4_i == 1);
 6573 0008 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109590288B]
 6574 000a 012B     		cmp	r3, #1	@ _1,
 6575 000c FCD0     		beq	.L486	@,
 6576              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 6577 000e 0D4B     		ldr	r3, .L494+8	@ tmp120,
 6578 0010 0D49     		ldr	r1, .L494+12	@ tmp131,
 6579              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 6580 0012 1846     		mov	r0, r3	@ tmp123, tmp120
 6581              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 6582 0014 9B68     		ldr	r3, [r3, #8]	@ _10, MEM[(struct SysTick_Type *)3758153744B].VAL
 6583 0016 0B60     		str	r3, [r1]	@ _10, delay_us
 6584              	.L487:
 6585              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 6586 0018 0B68     		ldr	r3, [r1]	@ delay_us.85_11, delay_us
 6587 001a 8268     		ldr	r2, [r0, #8]	@ _12, MEM[(struct SysTick_Type *)3758153744B].VAL
 6588 001c 9B1A     		subs	r3, r3, r2	@ tmp124, delay_us.85_11, _12
 6589 001e 112B     		cmp	r3, #17	@ tmp124,
 6590 0020 FAD9     		bls	.L487	@,
 6591              	@ main.c:3224: 		PE2_o = 1;
 6592 0022 0121     		movs	r1, #1	@ tmp126,
 6593              	@ main.c:3220: 		u32 i=0;
 6594 0024 0020     		movs	r0, #0	@ <retval>,
 6595              	@ main.c:3224: 		PE2_o = 1;
 6596 0026 054B     		ldr	r3, .L494	@ tmp125,
 6597              	@ main.c:3225: 		do{i++;} while (PE4_i == 0);
 6598 0028 054A     		ldr	r2, .L494+4	@ tmp127,
 6599              	@ main.c:3224: 		PE2_o = 1;
 6600 002a 1960     		str	r1, [r3]	@ tmp126, MEM[(volatile long unsigned int *)1109590408B]
 6601              	.L488:
 6602              	@ main.c:3225: 		do{i++;} while (PE4_i == 0);
 6603 002c 1368     		ldr	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109590288B]
 6604 002e 0130     		adds	r0, r0, #1	@ <retval>, <retval>,
 6605 0030 002B     		cmp	r3, #0	@ _2
 6606 0032 FBD0     		beq	.L488	@
 6607              	@ main.c:3226: 		PE2_o = 0;
 6608 0034 0022     		movs	r2, #0	@ tmp129,
 6609 0036 014B     		ldr	r3, .L494	@ tmp128,
 6610 0038 1A60     		str	r2, [r3]	@ tmp129, MEM[(volatile long unsigned int *)1109590408B]
 6611              	@ main.c:3228: 	}
 6612 003a 7047     		bx	lr	@
ARM GAS  /tmp/ccrMssCc.s 			page 117


 6613              	.L495:
 6614              		.align	2
 6615              	.L494:
 6616 003c 88012342 		.word	1109590408
 6617 0040 10012342 		.word	1109590288
 6618 0044 10E000E0 		.word	-536813552
 6619 0048 00000000 		.word	delay_us
 6620              		.size	qtouch_mesaure, .-qtouch_mesaure
 6621              		.section	.text.qtouch,"ax",%progbits
 6622              		.align	1
 6623              		.p2align 2,,3
 6624              		.global	qtouch
 6625              		.syntax unified
 6626              		.thumb
 6627              		.thumb_func
 6628              		.fpu softvfp
 6629              		.type	qtouch, %function
 6630              	qtouch:
 6631              		@ args = 0, pretend = 0, frame = 0
 6632              		@ frame_needed = 0, uses_anonymous_args = 0
 6633              	@ main.c:3231: 		GPIOE->CRL = (GPIOE->CRL & 0xfff0f0ff) | 0x00040300;	
 6634 0000 114A     		ldr	r2, .L501	@ tmp119,
 6635              	@ main.c:3229: void qtouch(void)					{
 6636 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 6637              	@ main.c:3231: 		GPIOE->CRL = (GPIOE->CRL & 0xfff0f0ff) | 0x00040300;	
 6638 0006 1368     		ldr	r3, [r2]	@ _1, MEM[(struct GPIO_TypeDef *)1073813504B].CRL
 6639 0008 104D     		ldr	r5, .L501+4	@ tmp131,
 6640 000a 23F47023 		bic	r3, r3, #983040	@ tmp120, _1,
 6641 000e 23F47063 		bic	r3, r3, #3840	@ tmp120, tmp120,
 6642 0012 43F48023 		orr	r3, r3, #262144	@ _3, tmp120,
 6643 0016 43F44073 		orr	r3, r3, #768	@ _3, _3,
 6644              	@ main.c:3233: 			if(STCLK_MS*500 < (trg0 - SysTick->VAL) ){
 6645 001a 0D4C     		ldr	r4, .L501+8	@ tmp125,
 6646 001c 0D4E     		ldr	r6, .L501+12	@ tmp127,
 6647              	@ main.c:3236: 				UaPutS("\r\n QT =");		sint2uart(qt);
 6648 001e DFF83880 		ldr	r8, .L501+16	@ tmp132,
 6649              	@ main.c:3231: 		GPIOE->CRL = (GPIOE->CRL & 0xfff0f0ff) | 0x00040300;	
 6650 0022 1360     		str	r3, [r2]	@ _3, MEM[(struct GPIO_TypeDef *)1073813504B].CRL
 6651              	.L497:
 6652              	@ main.c:3233: 			if(STCLK_MS*500 < (trg0 - SysTick->VAL) ){
 6653 0024 2B68     		ldr	r3, [r5]	@ trg0.208_4, trg0
 6654 0026 A268     		ldr	r2, [r4, #8]	@ _5, MEM[(struct SysTick_Type *)3758153744B].VAL
 6655 0028 9B1A     		subs	r3, r3, r2	@ tmp126, trg0.208_4, _5
 6656 002a B342     		cmp	r3, r6	@ tmp126, tmp127
 6657 002c FAD9     		bls	.L497	@,
 6658              	@ main.c:3234: 				trg0 = SysTick->VAL;
 6659 002e A368     		ldr	r3, [r4, #8]	@ _7, MEM[(struct SysTick_Type *)3758153744B].VAL
 6660 0030 2B60     		str	r3, [r5]	@ _7, trg0
 6661              	@ main.c:3235: 				qt = qtouch_mesaure();
 6662 0032 FFF7FEFF 		bl	qtouch_mesaure	@
 6663 0036 0746     		mov	r7, r0	@ qt,
 6664              	@ main.c:3236: 				UaPutS("\r\n QT =");		sint2uart(qt);
 6665 0038 4046     		mov	r0, r8	@, tmp132
 6666 003a FFF7FEFF 		bl	UaPutS	@
 6667 003e 3846     		mov	r0, r7	@, qt
 6668 0040 FFF7FEFF 		bl	sint2uart	@
 6669 0044 EEE7     		b	.L497	@
ARM GAS  /tmp/ccrMssCc.s 			page 118


 6670              	.L502:
 6671 0046 00BF     		.align	2
 6672              	.L501:
 6673 0048 00180140 		.word	1073813504
 6674 004c 00000000 		.word	trg0
 6675 0050 10E000E0 		.word	-536813552
 6676 0054 20AA4400 		.word	4500000
 6677 0058 00000000 		.word	.LC94
 6678              		.size	qtouch, .-qtouch
 6679              		.section	.text.DHT_Tool,"ax",%progbits
 6680              		.align	1
 6681              		.p2align 2,,3
 6682              		.global	DHT_Tool
 6683              		.syntax unified
 6684              		.thumb
 6685              		.thumb_func
 6686              		.fpu softvfp
 6687              		.type	DHT_Tool, %function
 6688              	DHT_Tool:
 6689              		@ args = 0, pretend = 0, frame = 0
 6690              		@ frame_needed = 0, uses_anonymous_args = 0
 6691              		@ link register save eliminated.
 6692              	@ main.c:3430: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6693 0000 0A49     		ldr	r1, .L504	@ tmp116,
 6694              	@ main.c:3431: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6695 0002 0B4A     		ldr	r2, .L504+4	@ tmp121,
 6696              	@ main.c:3430: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6697 0004 4B68     		ldr	r3, [r1, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 6698              	@ main.c:3434: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 6699 0006 0B48     		ldr	r0, .L504+8	@ tmp124,
 6700              	@ main.c:3430: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6701 0008 23F0F023 		bic	r3, r3, #-268374016	@ tmp117, _1,
 6702 000c 23F47023 		bic	r3, r3, #983040	@ tmp117, tmp117,
 6703 0010 43F01023 		orr	r3, r3, #268439552	@ _3, tmp117,
 6704 0014 43F48033 		orr	r3, r3, #65536	@ _3, _3,
 6705 0018 4B60     		str	r3, [r1, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 6706              	@ main.c:3431: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6707 001a 1368     		ldr	r3, [r2]	@ _4, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 6708              	@ main.c:3434: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 6709 001c 0649     		ldr	r1, .L504+12	@ tmp125,
 6710              	@ main.c:3431: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6711 001e 23F47F23 		bic	r3, r3, #1044480	@ tmp122, _4,
 6712 0022 43F48833 		orr	r3, r3, #69632	@ _6, tmp122,
 6713 0026 1360     		str	r3, [r2]	@ _6, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 6714              	@ main.c:3434: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 6715 0028 0160     		str	r1, [r0]	@ tmp125, oled_hw.mosi
 6716              	@ main.c:3436: }
 6717 002a 7047     		bx	lr	@
 6718              	.L505:
 6719              		.align	2
 6720              	.L504:
 6721 002c 00080140 		.word	1073809408
 6722 0030 000C0140 		.word	1073810432
 6723 0034 00000000 		.word	oled_hw
 6724 0038 8C812142 		.word	1109492108
 6725              		.size	DHT_Tool, .-DHT_Tool
 6726              		.section	.text.SPI_Tool_Menu,"ax",%progbits
ARM GAS  /tmp/ccrMssCc.s 			page 119


 6727              		.align	1
 6728              		.p2align 2,,3
 6729              		.global	SPI_Tool_Menu
 6730              		.syntax unified
 6731              		.thumb
 6732              		.thumb_func
 6733              		.fpu softvfp
 6734              		.type	SPI_Tool_Menu, %function
 6735              	SPI_Tool_Menu:
 6736              		@ args = 0, pretend = 0, frame = 0
 6737              		@ frame_needed = 0, uses_anonymous_args = 0
 6738 0000 08B5     		push	{r3, lr}	@
 6739              	@ main.c:3438: 	UaPutK("\n\r\n======= STM32F1 SPI TOOL =========================\r\n");
 6740 0002 0848     		ldr	r0, .L508	@,
 6741 0004 FFF7FEFF 		bl	UaPutK	@
 6742              	@ main.c:3439: 	UaPutK(" i - Init      r - Read  sector  e -                \r\n");
 6743 0008 0748     		ldr	r0, .L508+4	@,
 6744 000a FFF7FEFF 		bl	UaPutK	@
 6745              	@ main.c:3440: 	UaPutK(" d - Delete    f - Write sector  s -                \r\n");
 6746 000e 0748     		ldr	r0, .L508+8	@,
 6747 0010 FFF7FEFF 		bl	UaPutK	@
 6748              	@ main.c:3441: 	UaPutK(" m - Modf      c - Copy  sector  n -               \r\n");
 6749 0014 0648     		ldr	r0, .L508+12	@,
 6750 0016 FFF7FEFF 		bl	UaPutK	@
 6751              	@ main.c:3443: }
 6752 001a BDE80840 		pop	{r3, lr}	@
 6753              	@ main.c:3442: 	UaPutK("==================================================\r\n > ");
 6754 001e 0548     		ldr	r0, .L508+16	@,
 6755 0020 FFF7FEBF 		b	UaPutK	@
 6756              	.L509:
 6757              		.align	2
 6758              	.L508:
 6759 0024 00000000 		.word	.LC95
 6760 0028 38000000 		.word	.LC96
 6761 002c 70000000 		.word	.LC97
 6762 0030 A8000000 		.word	.LC98
 6763 0034 94000000 		.word	.LC45
 6764              		.size	SPI_Tool_Menu, .-SPI_Tool_Menu
 6765              		.section	.text.SPI_Tool,"ax",%progbits
 6766              		.align	1
 6767              		.p2align 2,,3
 6768              		.global	SPI_Tool
 6769              		.syntax unified
 6770              		.thumb
 6771              		.thumb_func
 6772              		.fpu softvfp
 6773              		.type	SPI_Tool, %function
 6774              	SPI_Tool:
 6775              		@ args = 0, pretend = 0, frame = 16
 6776              		@ frame_needed = 0, uses_anonymous_args = 0
 6777              	@ main.c:3451: 	LED=1;
 6778 0000 0122     		movs	r2, #1	@ tmp125,
 6779 0002 444B     		ldr	r3, .L523	@ tmp124,
 6780              	@ main.c:3453: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6781 0004 4449     		ldr	r1, .L523+4	@ tmp126,
 6782              	@ main.c:3444: void SPI_Tool(void)				{
 6783 0006 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
ARM GAS  /tmp/ccrMssCc.s 			page 120


 6784              	@ main.c:3451: 	LED=1;
 6785 000a 1A60     		str	r2, [r3]	@ tmp125, MEM[(volatile long unsigned int *)1109524916B]
 6786              	@ main.c:3453: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6787 000c 4B68     		ldr	r3, [r1, #4]	@ _1, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 6788              	@ main.c:3454: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6789 000e 434A     		ldr	r2, .L523+8	@ tmp131,
 6790              	@ main.c:3453: 		GPIOA->CRH = (GPIOA->CRH & 0x0ff00fff) | 0x10011000;
 6791 0010 23F0F023 		bic	r3, r3, #-268374016	@ tmp127, _1,
 6792 0014 23F47023 		bic	r3, r3, #983040	@ tmp127, tmp127,
 6793 0018 43F01023 		orr	r3, r3, #268439552	@ _3, tmp127,
 6794 001c 43F48033 		orr	r3, r3, #65536	@ _3, _3,
 6795 0020 4B60     		str	r3, [r1, #4]	@ _3, MEM[(struct GPIO_TypeDef *)1073809408B].CRH
 6796              	@ main.c:3454: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6797 0022 1368     		ldr	r3, [r2]	@ _4, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 6798              	@ main.c:3456: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 6799 0024 3E48     		ldr	r0, .L523+12	@ tmp134,
 6800              	@ main.c:3454: 		GPIOB->CRL = (GPIOB->CRL & 0xfff00fff) | 0x00011000;
 6801 0026 23F47F23 		bic	r3, r3, #1044480	@ tmp132, _4,
 6802 002a 43F48833 		orr	r3, r3, #69632	@ _6, tmp132,
 6803 002e 1360     		str	r3, [r2]	@ _6, MEM[(struct GPIO_TypeDef *)1073810432B].CRL
 6804              	@ main.c:3456: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 6805 0030 3C4E     		ldr	r6, .L523+16	@ tmp135,
 6806              	@ main.c:3457: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 6807 0032 3D49     		ldr	r1, .L523+20	@ tmp137,
 6808              	@ main.c:3458: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 6809 0034 3D4D     		ldr	r5, .L523+24	@ tmp139,
 6810              	@ main.c:3459: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
 6811 0036 3E4A     		ldr	r2, .L523+28	@ tmp141,
 6812              	@ main.c:3460: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 6813 0038 3E4C     		ldr	r4, .L523+32	@ tmp143,
 6814              	@ main.c:3444: void SPI_Tool(void)				{
 6815 003a 84B0     		sub	sp, sp, #16	@,,
 6816              	@ main.c:3456: 		oled_hw.sck  = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,4);
 6817 003c 4660     		str	r6, [r0, #4]	@ tmp135, oled_hw.sck
 6818              	@ main.c:3464: 	int2str(12345678 ,tbuf,8,0);		
 6819 003e 0023     		movs	r3, #0	@,
 6820              	@ main.c:3457: 		oled_hw.mosi = (u32*) m_BITBAND_PERIPH(&GPIOB->ODR,3);
 6821 0040 0160     		str	r1, [r0]	@ tmp137, oled_hw.mosi
 6822              	@ main.c:3458: 		oled_hw.dc   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,12);
 6823 0042 8560     		str	r5, [r0, #8]	@ tmp139, oled_hw.dc
 6824              	@ main.c:3464: 	int2str(12345678 ,tbuf,8,0);		
 6825 0044 01A9     		add	r1, sp, #4	@ tmp175,,
 6826              	@ main.c:3459: 		oled_hw.cs   = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,11);
 6827 0046 C260     		str	r2, [r0, #12]	@ tmp141, oled_hw.cs
 6828              	@ main.c:3460: 		oled_hw.rst  = (u32*) m_BITBAND_PERIPH(&GPIOA->ODR,15);
 6829 0048 0461     		str	r4, [r0, #16]	@ tmp143, oled_hw.rst
 6830              	@ main.c:3464: 	int2str(12345678 ,tbuf,8,0);		
 6831 004a 0822     		movs	r2, #8	@,
 6832 004c 3A48     		ldr	r0, .L523+36	@,
 6833 004e FFF7FEFF 		bl	int2str	@
 6834              	@ main.c:3465: 	oled_num24(0, 4,tbuf);
 6835 0052 01AA     		add	r2, sp, #4	@ tmp176,,
 6836 0054 0421     		movs	r1, #4	@,
 6837 0056 0020     		movs	r0, #0	@,
 6838 0058 FFF7FEFF 		bl	oled_num24	@
 6839              	@ main.c:3466: 	oled_num24(0, 0,tbuf);
 6840 005c 0021     		movs	r1, #0	@,
ARM GAS  /tmp/ccrMssCc.s 			page 121


 6841 005e 01AA     		add	r2, sp, #4	@ tmp177,,
 6842 0060 0846     		mov	r0, r1	@,
 6843 0062 FFF7FEFF 		bl	oled_num24	@
 6844              	@ main.c:3467: 	oled_refresh_gram();	
 6845 0066 FFF7FEFF 		bl	oled_refresh_gram	@
 6846              	@ main.c:3470: 	SPI2_init();
 6847 006a FFF7FEFF 		bl	SPI2_init	@
 6848 006e 334D     		ldr	r5, .L523+40	@ tmp171,
 6849              	@ main.c:3483: 		UaPutK("\r\n ");
 6850 0070 334C     		ldr	r4, .L523+44	@ tmp172,
 6851              	@ main.c:3489: 			UaPutK("\r\nInit spi    = "); uint2uart(1);
 6852 0072 344F     		ldr	r7, .L523+48	@ tmp173,
 6853              	@ main.c:3494: 			SPI2_CS = 0; 
 6854 0074 2036     		adds	r6, r6, #32	@ tmp174, tmp174,
 6855              	.L511:
 6856              	@ main.c:3477: 		SPI_Tool_Menu();
 6857 0076 FFF7FEFF 		bl	SPI_Tool_Menu	@
 6858              	@ main.c:3478: 		while(!p_Fifo1->rct);
 6859 007a 2A68     		ldr	r2, [r5]	@ p_Fifo1.210_7, p_Fifo1
 6860              	.L512:
 6861              	@ main.c:3478: 		while(!p_Fifo1->rct);
 6862 007c 9388     		ldrh	r3, [r2, #4]	@, p_Fifo1.210_7->rct
 6863 007e 9BB2     		uxth	r3, r3	@ _8, p_Fifo1.210_7->rct
 6864 0080 002B     		cmp	r3, #0	@ _8
 6865 0082 FBD0     		beq	.L512	@
 6866              	@ main.c:3481: 		UART_getChar((char*)&switcH);
 6867 0084 0DF10300 		add	r0, sp, #3	@ tmp178,,
 6868 0088 FFF7FEFF 		bl	UART_getChar	@
 6869              	@ main.c:3483: 		UaPutK("\r\n ");
 6870 008c 2046     		mov	r0, r4	@, tmp172
 6871 008e FFF7FEFF 		bl	UaPutK	@
 6872              	@ main.c:3484: 		switch (switcH)	{
 6873 0092 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2	@ switcH, switcH
 6874 0096 692B     		cmp	r3, #105	@ switcH,
 6875 0098 07D0     		beq	.L514	@,
 6876 009a 722B     		cmp	r3, #114	@ switcH,
 6877 009c 21D0     		beq	.L515	@,
 6878 009e 632B     		cmp	r3, #99	@ switcH,
 6879 00a0 0CD0     		beq	.L522	@,
 6880              	@ main.c:3512: 			UaPutK("Nieznana Komenda");
 6881 00a2 2948     		ldr	r0, .L523+52	@,
 6882 00a4 FFF7FEFF 		bl	UaPutK	@
 6883              	@ main.c:3513: 			break;
 6884 00a8 E5E7     		b	.L511	@
 6885              	.L514:
 6886              	@ main.c:3488: 			SPI2_init();
 6887 00aa FFF7FEFF 		bl	SPI2_init	@
 6888              	@ main.c:3489: 			UaPutK("\r\nInit spi    = "); uint2uart(1);
 6889 00ae 3846     		mov	r0, r7	@, tmp173
 6890 00b0 FFF7FEFF 		bl	UaPutK	@
 6891 00b4 0120     		movs	r0, #1	@,
 6892 00b6 FFF7FEFF 		bl	uint2uart	@
 6893              	@ main.c:3491: 			break;
 6894 00ba DCE7     		b	.L511	@
 6895              	.L522:
 6896              	@ main.c:3503: 			UaPutK("Copy memory");
 6897 00bc 2348     		ldr	r0, .L523+56	@,
ARM GAS  /tmp/ccrMssCc.s 			page 122


 6898 00be FFF7FEFF 		bl	UaPutK	@
 6899              	@ main.c:3504: 			UaPutK("\r\n Src Mem adr = 0x");	reg=UART_getHex();
 6900 00c2 2348     		ldr	r0, .L523+60	@,
 6901 00c4 FFF7FEFF 		bl	UaPutK	@
 6902 00c8 FFF7FEFF 		bl	UART_getHex	@
 6903              	@ main.c:3505: 			UaPutK("\r\n How many byte = ");	reg=UART_getNum();
 6904 00cc 2148     		ldr	r0, .L523+64	@,
 6905 00ce FFF7FEFF 		bl	UaPutK	@
 6906 00d2 FFF7FEFF 		bl	UART_getNum	@
 6907              	@ main.c:3506: 			UaPutK("\r\n Dst mem adr = 0x");	reg=UART_getHex();
 6908 00d6 2048     		ldr	r0, .L523+68	@,
 6909 00d8 FFF7FEFF 		bl	UaPutK	@
 6910 00dc FFF7FEFF 		bl	UART_getHex	@
 6911              	@ main.c:3509: 			break;
 6912 00e0 C9E7     		b	.L511	@
 6913              	.L515:
 6914              	@ main.c:3494: 			SPI2_CS = 0; 
 6915 00e2 4FF00008 		mov	r8, #0	@ tmp156,
 6916              	@ main.c:3495: 			UaPutK("\r\n Reg = ");	reg=UART_getNum();
 6917 00e6 1D48     		ldr	r0, .L523+72	@,
 6918              	@ main.c:3494: 			SPI2_CS = 0; 
 6919 00e8 C6F80080 		str	r8, [r6]	@ tmp156, MEM[(volatile long unsigned int *)1109492144B]
 6920              	@ main.c:3495: 			UaPutK("\r\n Reg = ");	reg=UART_getNum();
 6921 00ec FFF7FEFF 		bl	UaPutK	@
 6922 00f0 FFF7FEFF 		bl	UART_getNum	@
 6923              	@ main.c:3496: 			spi2_rw(reg);						// Read status register
 6924 00f4 C0B2     		uxtb	r0, r0	@,
 6925 00f6 FFF7FEFF 		bl	spi2_rw	@
 6926              	@ main.c:3497: 			UaPutK("\r\n Reg = ");	hex2uart(spi2_rw(0x00),2);
 6927 00fa 1848     		ldr	r0, .L523+72	@,
 6928 00fc FFF7FEFF 		bl	UaPutK	@
 6929 0100 4046     		mov	r0, r8	@, tmp156
 6930 0102 FFF7FEFF 		bl	spi2_rw	@
 6931 0106 0221     		movs	r1, #2	@,
 6932 0108 FFF7FEFF 		bl	hex2uart	@
 6933              	@ main.c:3498: 			SPI2_CS = 1;			
 6934 010c 0123     		movs	r3, #1	@ tmp164,
 6935 010e 3360     		str	r3, [r6]	@ tmp164, MEM[(volatile long unsigned int *)1109492144B]
 6936              	@ main.c:3500: 			break;
 6937 0110 B1E7     		b	.L511	@
 6938              	.L524:
 6939 0112 00BF     		.align	2
 6940              	.L523:
 6941 0114 B4012242 		.word	1109524916
 6942 0118 00080140 		.word	1073809408
 6943 011c 000C0140 		.word	1073810432
 6944 0120 00000000 		.word	oled_hw
 6945 0124 90812142 		.word	1109492112
 6946 0128 8C812142 		.word	1109492108
 6947 012c B0012142 		.word	1109459376
 6948 0130 AC012142 		.word	1109459372
 6949 0134 BC012142 		.word	1109459388
 6950 0138 4E61BC00 		.word	12345678
 6951 013c 00000000 		.word	p_Fifo1
 6952 0140 30000000 		.word	.LC78
 6953 0144 00000000 		.word	.LC99
 6954 0148 68000000 		.word	.LC105
ARM GAS  /tmp/ccrMssCc.s 			page 123


 6955 014c 20000000 		.word	.LC101
 6956 0150 2C000000 		.word	.LC102
 6957 0154 40000000 		.word	.LC103
 6958 0158 54000000 		.word	.LC104
 6959 015c 14000000 		.word	.LC100
 6960              		.size	SPI_Tool, .-SPI_Tool
 6961              		.section	.text.Menu1,"ax",%progbits
 6962              		.align	1
 6963              		.p2align 2,,3
 6964              		.global	Menu1
 6965              		.syntax unified
 6966              		.thumb
 6967              		.thumb_func
 6968              		.fpu softvfp
 6969              		.type	Menu1, %function
 6970              	Menu1:
 6971              		@ args = 0, pretend = 0, frame = 0
 6972              		@ frame_needed = 0, uses_anonymous_args = 0
 6973 0000 08B5     		push	{r3, lr}	@
 6974              	@ main.c:3963: 	UaPutK("\n\r\n======= STM32F4 SD/MMC Card ======================\r\n");
 6975 0002 0848     		ldr	r0, .L527	@,
 6976 0004 FFF7FEFF 		bl	UaPutK	@
 6977              	@ main.c:3964: 	UaPutK(" i - Init      r - Read  sector  e - Erase sector   \r\n");
 6978 0008 0748     		ldr	r0, .L527+4	@,
 6979 000a FFF7FEFF 		bl	UaPutK	@
 6980              	@ main.c:3965: 	UaPutK(" d - Delete    f - Write sector  s - Statistic Card \r\n");
 6981 000e 0748     		ldr	r0, .L527+8	@,
 6982 0010 FFF7FEFF 		bl	UaPutK	@
 6983              	@ main.c:3966: 	UaPutK(" m - Modf mem  c - Copy  sector  n - Next Cluster  \r\n");
 6984 0014 0648     		ldr	r0, .L527+12	@,
 6985 0016 FFF7FEFF 		bl	UaPutK	@
 6986              	@ main.c:3968: }
 6987 001a BDE80840 		pop	{r3, lr}	@
 6988              	@ main.c:3967: 	UaPutK("==================================================\r\n > ");
 6989 001e 0548     		ldr	r0, .L527+16	@,
 6990 0020 FFF7FEBF 		b	UaPutK	@
 6991              	.L528:
 6992              		.align	2
 6993              	.L527:
 6994 0024 00000000 		.word	.LC106
 6995 0028 38000000 		.word	.LC107
 6996 002c 70000000 		.word	.LC108
 6997 0030 A8000000 		.word	.LC109
 6998 0034 94000000 		.word	.LC45
 6999              		.size	Menu1, .-Menu1
 7000              		.section	.text.MemCard_Menu,"ax",%progbits
 7001              		.align	1
 7002              		.p2align 2,,3
 7003              		.global	MemCard_Menu
 7004              		.syntax unified
 7005              		.thumb
 7006              		.thumb_func
 7007              		.fpu softvfp
 7008              		.type	MemCard_Menu, %function
 7009              	MemCard_Menu:
 7010              		@ args = 0, pretend = 0, frame = 40
 7011              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrMssCc.s 			page 124


 7012              	@ main.c:3973: 	u16 crc=1,x=0,y1=0,y2=0;
 7013 0000 0123     		movs	r3, #1	@ tmp371,
 7014              	@ main.c:3969: void MemCard_Menu(void)		{
 7015 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 7016 0006 8DB0     		sub	sp, sp, #52	@,,
 7017              	@ main.c:3973: 	u16 crc=1,x=0,y1=0,y2=0;
 7018 0008 ADF81E30 		strh	r3, [sp, #30]	@ movhi	@ tmp371, crc
 7019              	@ main.c:3975: 	TFT_Init();
 7020 000c FFF7FEFF 		bl	TFT_Init	@
 7021              	@ main.c:3976: 	TFT_Clear(BLACK);
 7022 0010 0020     		movs	r0, #0	@,
 7023 0012 FFF7FEFF 		bl	TFT_Clear	@
 7024              	@ main.c:3985: 	crc16_spi2_init();
 7025 0016 FFF7FEFF 		bl	crc16_spi2_init	@
 7026              	@ main.c:3987: 	if(dinit){
 7027 001a A94B     		ldr	r3, .L643	@ tmp701,
 7028 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ dinit, dinit
 7029 001e 002B     		cmp	r3, #0	@ dinit
 7030 0020 00F01084 		beq	.L530	@
 7031              	@ main.c:3988: 		UaPutK("\r\nSD Card Init = "); sint2uart(CardType);
 7032 0024 A74B     		ldr	r3, .L643+4	@ tmp612,
 7033 0026 A848     		ldr	r0, .L643+8	@,
 7034 0028 1C46     		mov	r4, r3	@ tmp612, tmp612
 7035 002a 0393     		str	r3, [sp, #12]	@ tmp612, %sfp
 7036 002c FFF7FEFF 		bl	UaPutK	@
 7037 0030 2078     		ldrb	r0, [r4]	@ zero_extendqisi2	@, CardType
 7038 0032 FFF7FEFF 		bl	sint2uart	@
 7039              	.L531:
 7040              	@ main.c:3973: 	u16 crc=1,x=0,y1=0,y2=0;
 7041 0036 0023     		movs	r3, #0	@ y1,
 7042 0038 6FF4FF70 		mvn	r0, #510	@,
 7043              	@ main.c:3991: 	p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='i';
 7044 003c 0122     		movs	r2, #1	@ tmp380,
 7045 003e 6921     		movs	r1, #105	@ tmp383,
 7046              	@ main.c:3973: 	u16 crc=1,x=0,y1=0,y2=0;
 7047 0040 0493     		str	r3, [sp, #16]	@ y1, %sfp
 7048              	@ main.c:3991: 	p_Fifo1->rct=1;	p_Fifo1->rwi=1;	p_Fifo1->rbuf[0]='i';
 7049 0042 A24B     		ldr	r3, .L643+12	@ tmp708,
 7050 0044 DFF8D492 		ldr	r9, .L643+92	@ _443,
 7051 0048 1B68     		ldr	r3, [r3]	@ p_Fifo1.214_4, p_Fifo1
 7052 004a 4844     		add	r0, r9, r0	@ ivtmp.661, _443,
 7053 004c 9A80     		strh	r2, [r3, #4]	@ movhi	@ tmp380, p_Fifo1.214_4->rct
 7054 004e 0590     		str	r0, [sp, #20]	@ ivtmp.661, %sfp
 7055 0050 5A80     		strh	r2, [r3, #2]	@ movhi	@ tmp380, p_Fifo1.214_4->rwi
 7056 0052 9971     		strb	r1, [r3, #6]	@ tmp383, p_Fifo1.214_4->rbuf
 7057              	.L532:
 7058              	@ main.c:3994: 		Menu1();
 7059 0054 FFF7FEFF 		bl	Menu1	@
 7060              	@ main.c:3995: 		while(!p_Fifo1->rct);
 7061 0058 9C4B     		ldr	r3, .L643+12	@ tmp711,
 7062 005a 1A68     		ldr	r2, [r3]	@ p_Fifo1.217_7, p_Fifo1
 7063              	.L533:
 7064              	@ main.c:3995: 		while(!p_Fifo1->rct);
 7065 005c 9388     		ldrh	r3, [r2, #4]	@, p_Fifo1.217_7->rct
 7066 005e 9BB2     		uxth	r3, r3	@ _8, p_Fifo1.217_7->rct
 7067 0060 002B     		cmp	r3, #0	@ _8
 7068 0062 FBD0     		beq	.L533	@
ARM GAS  /tmp/ccrMssCc.s 			page 125


 7069              	@ main.c:3998: 		UART_getChar((char*)&switcH);
 7070 0064 0DF11D00 		add	r0, sp, #29	@ tmp712,,
 7071 0068 FFF7FEFF 		bl	UART_getChar	@
 7072              	@ main.c:4000: 		UaPutK("\r\n ");
 7073 006c 9848     		ldr	r0, .L643+16	@,
 7074 006e FFF7FEFF 		bl	UaPutK	@
 7075              	@ main.c:4001: 		switch (switcH)	{
 7076 0072 9DF81D30 		ldrb	r3, [sp, #29]	@ zero_extendqisi2	@ switcH, switcH
 7077 0076 523B     		subs	r3, r3, #82	@ tmp391, switcH,
 7078 0078 262B     		cmp	r3, #38	@ tmp391,
 7079 007a 00F27B82 		bhi	.L534	@
 7080 007e DFE813F0 		tbh	[pc, r3, lsl #1]	@ tmp391
 7081              	.L536:
 7082 0082 4202     		.2byte	(.L535-.L536)/2
 7083 0084 7902     		.2byte	(.L534-.L536)/2
 7084 0086 7902     		.2byte	(.L534-.L536)/2
 7085 0088 7902     		.2byte	(.L534-.L536)/2
 7086 008a 7902     		.2byte	(.L534-.L536)/2
 7087 008c 7902     		.2byte	(.L534-.L536)/2
 7088 008e 7902     		.2byte	(.L534-.L536)/2
 7089 0090 7902     		.2byte	(.L534-.L536)/2
 7090 0092 7902     		.2byte	(.L534-.L536)/2
 7091 0094 7902     		.2byte	(.L534-.L536)/2
 7092 0096 7902     		.2byte	(.L534-.L536)/2
 7093 0098 7902     		.2byte	(.L534-.L536)/2
 7094 009a 7902     		.2byte	(.L534-.L536)/2
 7095 009c 7902     		.2byte	(.L534-.L536)/2
 7096 009e 7902     		.2byte	(.L534-.L536)/2
 7097 00a0 7902     		.2byte	(.L534-.L536)/2
 7098 00a2 7902     		.2byte	(.L534-.L536)/2
 7099 00a4 CB01     		.2byte	(.L537-.L536)/2
 7100 00a6 7902     		.2byte	(.L534-.L536)/2
 7101 00a8 7902     		.2byte	(.L534-.L536)/2
 7102 00aa 7901     		.2byte	(.L538-.L536)/2
 7103 00ac 7902     		.2byte	(.L534-.L536)/2
 7104 00ae 7902     		.2byte	(.L534-.L536)/2
 7105 00b0 5101     		.2byte	(.L539-.L536)/2
 7106 00b2 7902     		.2byte	(.L534-.L536)/2
 7107 00b4 7902     		.2byte	(.L534-.L536)/2
 7108 00b6 7902     		.2byte	(.L534-.L536)/2
 7109 00b8 4B02     		.2byte	(.L540-.L536)/2
 7110 00ba 7902     		.2byte	(.L534-.L536)/2
 7111 00bc 7902     		.2byte	(.L534-.L536)/2
 7112 00be 7902     		.2byte	(.L534-.L536)/2
 7113 00c0 D800     		.2byte	(.L541-.L536)/2
 7114 00c2 7000     		.2byte	(.L542-.L536)/2
 7115 00c4 6400     		.2byte	(.L543-.L536)/2
 7116 00c6 9100     		.2byte	(.L544-.L536)/2
 7117 00c8 2B00     		.2byte	(.L545-.L536)/2
 7118 00ca 7902     		.2byte	(.L534-.L536)/2
 7119 00cc 7902     		.2byte	(.L534-.L536)/2
 7120 00ce 2700     		.2byte	(.L546-.L536)/2
 7121              		.p2align 1
 7122              	.L546:
 7123              	@ main.c:4312: 			UaPutK("Testing ...");
 7124 00d0 8048     		ldr	r0, .L643+20	@,
 7125 00d2 FFF7FEFF 		bl	UaPutK	@
ARM GAS  /tmp/ccrMssCc.s 			page 126


 7126              	@ main.c:4314: 			break;
 7127 00d6 BDE7     		b	.L532	@
 7128              	.L545:
 7129              	@ main.c:4210: 			UaPutK("View last sector");
 7130 00d8 7F48     		ldr	r0, .L643+24	@,
 7131 00da FFF7FEFF 		bl	UaPutK	@
 7132              	@ main.c:4211: 			UaPutK("\r\n First Sector = 0x");
 7133 00de 7F48     		ldr	r0, .L643+28	@,
 7134 00e0 FFF7FEFF 		bl	UaPutK	@
 7135              	@ main.c:4212: 			strBlock=UART_getHex();
 7136 00e4 FFF7FEFF 		bl	UART_getHex	@
 7137 00e8 0546     		mov	r5, r0	@ strBlock,
 7138              	@ main.c:4213: 			UaPutK("\r\n Searching ");
 7139 00ea 7D48     		ldr	r0, .L643+32	@,
 7140 00ec FFF7FEFF 		bl	UaPutK	@
 7141              	@ main.c:4222: 				if( mci_read_sect (strBlock++,buffer,1) ) {
 7142 00f0 7C4E     		ldr	r6, .L643+36	@ tmp637,
 7143 00f2 05E0     		b	.L575	@
 7144              	.L574:
 7145              	@ main.c:4232: 			while(crc != 0x822d );
 7146 00f4 48F22D23 		movw	r3, #33325	@ tmp561,
 7147 00f8 BDF81E20 		ldrh	r2, [sp, #30]	@ crc, crc
 7148 00fc 9A42     		cmp	r2, r3	@ crc, tmp561
 7149 00fe 16D0     		beq	.L573	@,
 7150              	.L575:
 7151              	@ main.c:4222: 				if( mci_read_sect (strBlock++,buffer,1) ) {
 7152 0100 0122     		movs	r2, #1	@,
 7153 0102 3146     		mov	r1, r6	@, tmp637
 7154 0104 2846     		mov	r0, r5	@, strBlock
 7155 0106 AC18     		adds	r4, r5, r2	@ strBlock, strBlock,
 7156 0108 FFF7FEFF 		bl	mmc_read_sect	@
 7157              	@ main.c:4229: 					if(!(strBlock%1024)) UaPutC('.');
 7158 010c C4F30903 		ubfx	r3, r4, #0, #10	@ tmp558, strBlock,,
 7159              	@ main.c:4222: 				if( mci_read_sect (strBlock++,buffer,1) ) {
 7160 0110 0028     		cmp	r0, #0	@
 7161 0112 40F06182 		bne	.L636	@
 7162 0116 2546     		mov	r5, r4	@ strBlock, strBlock
 7163              	@ main.c:4229: 					if(!(strBlock%1024)) UaPutC('.');
 7164 0118 002B     		cmp	r3, #0	@ tmp558
 7165 011a EBD1     		bne	.L574	@
 7166              	@ main.c:4229: 					if(!(strBlock%1024)) UaPutC('.');
 7167 011c 2E20     		movs	r0, #46	@,
 7168 011e FFF7FEFF 		bl	UaPutC	@
 7169              	@ main.c:4232: 			while(crc != 0x822d );
 7170 0122 48F22D23 		movw	r3, #33325	@ tmp561,
 7171 0126 BDF81E20 		ldrh	r2, [sp, #30]	@ crc, crc
 7172 012a 9A42     		cmp	r2, r3	@ crc, tmp561
 7173 012c E8D1     		bne	.L575	@,
 7174              	.L573:
 7175              	@ main.c:4262: 			UaPutK("\r\n Find Sector = 0x");	hex2uart(strBlock, 8);
 7176 012e 6E48     		ldr	r0, .L643+40	@,
 7177 0130 FFF7FEFF 		bl	UaPutK	@
 7178 0134 2046     		mov	r0, r4	@, strBlock
 7179 0136 0821     		movs	r1, #8	@,
 7180 0138 FFF7FEFF 		bl	hex2uart	@
 7181              	@ main.c:4263: 			UaPutK("\r\n     lenBlock= ");		sint2uart(lenBlock);
 7182 013c 6B48     		ldr	r0, .L643+44	@,
ARM GAS  /tmp/ccrMssCc.s 			page 127


 7183 013e FFF7FEFF 		bl	UaPutK	@
 7184 0142 0120     		movs	r0, #1	@,
 7185 0144 FFF7FEFF 		bl	sint2uart	@
 7186              	@ main.c:4264: 			break;
 7187 0148 84E7     		b	.L532	@
 7188              	.L543:
 7189              	@ main.c:4023: 			UaPutK("Statistic Card  ");
 7190 014a 6948     		ldr	r0, .L643+48	@,
 7191 014c FFF7FEFF 		bl	UaPutK	@
 7192              	@ main.c:4024: 			if(dinit){
 7193 0150 5B4B     		ldr	r3, .L643	@ tmp715,
 7194 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ dinit, dinit
 7195 0154 002B     		cmp	r3, #0	@ dinit
 7196 0156 40F0EC80 		bne	.L635	@
 7197              	@ main.c:4035: 			}else UaPutK("\r\nSD Card Not Init");
 7198 015a 6648     		ldr	r0, .L643+52	@,
 7199 015c FFF7FEFF 		bl	UaPutK	@
 7200 0160 78E7     		b	.L532	@
 7201              	.L542:
 7202              	@ main.c:4122: 			UaPutK("Read sector");
 7203 0162 6548     		ldr	r0, .L643+56	@,
 7204 0164 FFF7FEFF 		bl	UaPutK	@
 7205              	@ main.c:4123: 			UaPutK("\r\n sectorNumber = 0x");
 7206 0168 6448     		ldr	r0, .L643+60	@,
 7207 016a FFF7FEFF 		bl	UaPutK	@
 7208              	@ main.c:4125: 			strBlock=UART_getHex();
 7209 016e FFF7FEFF 		bl	UART_getHex	@
 7210              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7211 0172 634C     		ldr	r4, .L643+64	@ tmp475,
 7212 0174 634D     		ldr	r5, .L643+68	@ tmp727,
 7213 0176 A368     		ldr	r3, [r4, #8]	@ _373, MEM[(struct SysTick_Type *)3758153744B].VAL
 7214              	@ main.c:4128: 			d=mci_read_sect (strBlock,buffer,1);
 7215 0178 0122     		movs	r2, #1	@,
 7216 017a 5A49     		ldr	r1, .L643+36	@,
 7217              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7218 017c 2B60     		str	r3, [r5]	@ _373, Timt
 7219              	@ main.c:4125: 			strBlock=UART_getHex();
 7220 017e 0746     		mov	r7, r0	@ strBlock,
 7221              	@ main.c:4128: 			d=mci_read_sect (strBlock,buffer,1);
 7222 0180 FFF7FEFF 		bl	mmc_read_sect	@
 7223              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7224 0184 2A68     		ldr	r2, [r5]	@ Timt.84_370, Timt
 7225 0186 A368     		ldr	r3, [r4, #8]	@ _371, MEM[(struct SysTick_Type *)3758153744B].VAL
 7226              	@ main.c:4130: 			if(d){
 7227 0188 0446     		mov	r4, r0	@ tmp478,
 7228              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7229 018a D31A     		subs	r3, r2, r3	@ _372, Timt.84_370, _371
 7230 018c 0293     		str	r3, [sp, #8]	@ _372, %sfp
 7231 018e 0893     		str	r3, [sp, #32]	@ _372, MEM[(volatile u32 *)&tim]
 7232              	@ main.c:4130: 			if(d){
 7233 0190 0028     		cmp	r0, #0	@ tmp478
 7234 0192 40F07382 		bne	.L637	@
 7235              	@ main.c:4157: 				UaPutK("\r\n Read Error = ");
 7236 0196 5C48     		ldr	r0, .L643+72	@,
 7237 0198 FFF7FEFF 		bl	UaPutK	@
 7238              	@ main.c:4158: 				uint2uart(d);
 7239 019c 2046     		mov	r0, r4	@, tmp478
ARM GAS  /tmp/ccrMssCc.s 			page 128


 7240 019e FFF7FEFF 		bl	uint2uart	@
 7241 01a2 57E7     		b	.L532	@
 7242              	.L544:
 7243              	@ main.c:4267: 			UaPutK("Read sector");
 7244 01a4 5448     		ldr	r0, .L643+56	@,
 7245 01a6 FFF7FEFF 		bl	UaPutK	@
 7246              	@ main.c:4268: 			UaPutK("\r\n sectorNumber = 0x");
 7247 01aa 5448     		ldr	r0, .L643+60	@,
 7248 01ac FFF7FEFF 		bl	UaPutK	@
 7249              	@ main.c:4270: 			strBlock=UART_getHex();
 7250 01b0 FFF7FEFF 		bl	UART_getHex	@
 7251 01b4 0446     		mov	r4, r0	@ strBlock,
 7252              	@ main.c:4271: 			UaPutK("\r\n sectorNumber = 0x");		hex2uart(strBlock, 8);
 7253 01b6 5148     		ldr	r0, .L643+60	@,
 7254 01b8 FFF7FEFF 		bl	UaPutK	@
 7255 01bc 2046     		mov	r0, r4	@, strBlock
 7256 01be 0821     		movs	r1, #8	@,
 7257 01c0 FFF7FEFF 		bl	hex2uart	@
 7258              	@ main.c:4272: 			while(strBlock <  31116288 ){
 7259 01c4 514B     		ldr	r3, .L643+76	@ tmp748,
 7260 01c6 9C42     		cmp	r4, r3	@ strBlock, tmp748
 7261 01c8 26D8     		bhi	.L577	@,
 7262              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7263 01ca 4D4E     		ldr	r6, .L643+64	@ tmp570,
 7264              	@ main.c:4275: 				if( mci_read_sect (strBlock,buffer,1*16)) {
 7265 01cc 454D     		ldr	r5, .L643+36	@ tmp634,
 7266              	.L576:
 7267              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7268 01ce B368     		ldr	r3, [r6, #8]	@ _382, MEM[(struct SysTick_Type *)3758153744B].VAL
 7269 01d0 4C4F     		ldr	r7, .L643+68	@ tmp749,
 7270              	@ main.c:4275: 				if( mci_read_sect (strBlock,buffer,1*16)) {
 7271 01d2 1022     		movs	r2, #16	@,
 7272 01d4 2946     		mov	r1, r5	@, tmp634
 7273 01d6 2046     		mov	r0, r4	@, strBlock
 7274              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7275 01d8 3B60     		str	r3, [r7]	@ _382, Timt
 7276              	@ main.c:4275: 				if( mci_read_sect (strBlock,buffer,1*16)) {
 7277 01da FFF7FEFF 		bl	mmc_read_sect	@
 7278 01de 0028     		cmp	r0, #0	@
 7279 01e0 00F0CC81 		beq	.L578	@
 7280              	@ main.c:4276: 					crc16_spi2((u16*)buffer,256*16, &crc );
 7281 01e4 0DF11E02 		add	r2, sp, #30	@ tmp750,,
 7282 01e8 4FF48051 		mov	r1, #4096	@,
 7283 01ec 2846     		mov	r0, r5	@, tmp634
 7284 01ee FFF7FEFF 		bl	crc16_spi2	@
 7285              	@ main.c:4277: 					if( crc ) {
 7286 01f2 BDF81E30 		ldrh	r3, [sp, #30]	@ crc, crc
 7287 01f6 002B     		cmp	r3, #0	@ crc
 7288 01f8 40F0E181 		bne	.L638	@
 7289              	.L579:
 7290              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7291 01fc 414B     		ldr	r3, .L643+68	@ tmp751,
 7292              	@ main.c:4283: 				if(p_Fifo1->rct) break;
 7293 01fe 334A     		ldr	r2, .L643+12	@ tmp752,
 7294              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7295 0200 1B68     		ldr	r3, [r3]	@ Timt.84_383, Timt
 7296 0202 B168     		ldr	r1, [r6, #8]	@ _384, MEM[(struct SysTick_Type *)3758153744B].VAL
ARM GAS  /tmp/ccrMssCc.s 			page 129


 7297              	@ main.c:4283: 				if(p_Fifo1->rct) break;
 7298 0204 1268     		ldr	r2, [r2]	@ p_Fifo1.243_87, p_Fifo1
 7299              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7300 0206 5B1A     		subs	r3, r3, r1	@ _385, Timt.84_383, _384
 7301 0208 0893     		str	r3, [sp, #32]	@ _385, MEM[(volatile u32 *)&tim]
 7302              	@ main.c:4283: 				if(p_Fifo1->rct) break;
 7303 020a 9388     		ldrh	r3, [r2, #4]	@, p_Fifo1.243_87->rct
 7304              	@ main.c:4280: 					strBlock+=1*16;
 7305 020c 1034     		adds	r4, r4, #16	@ strBlock, strBlock,
 7306              	@ main.c:4283: 				if(p_Fifo1->rct) break;
 7307 020e 9BB2     		uxth	r3, r3	@ _88, p_Fifo1.243_87->rct
 7308 0210 13B9     		cbnz	r3, .L577	@ _88,
 7309              	@ main.c:4272: 			while(strBlock <  31116288 ){
 7310 0212 3E4B     		ldr	r3, .L643+76	@ tmp754,
 7311 0214 9C42     		cmp	r4, r3	@ strBlock, tmp754
 7312 0216 DAD9     		bls	.L576	@,
 7313              	.L577:
 7314              	@ main.c:4286: 			UaPutK("\r\n Block = ");	hex2uart(strBlock,8); hex2uart(crc,4);
 7315 0218 3D48     		ldr	r0, .L643+80	@,
 7316 021a FFF7FEFF 		bl	UaPutK	@
 7317 021e 2046     		mov	r0, r4	@, strBlock
 7318 0220 0821     		movs	r1, #8	@,
 7319 0222 FFF7FEFF 		bl	hex2uart	@
 7320 0226 0421     		movs	r1, #4	@,
 7321 0228 BDF81E00 		ldrh	r0, [sp, #30]	@, crc
 7322 022c FFF7FEFF 		bl	hex2uart	@
 7323              	@ main.c:4287: 			break;
 7324 0230 10E7     		b	.L532	@
 7325              	.L541:
 7326              	@ main.c:4293: 				UaPutK("\r\n SD_Status \r\n ");
 7327 0232 3848     		ldr	r0, .L643+84	@,
 7328 0234 FFF7FEFF 		bl	UaPutK	@
 7329              	@ main.c:4294: 				hex2uart(0,4);
 7330 0238 0421     		movs	r1, #4	@,
 7331 023a 0020     		movs	r0, #0	@,
 7332 023c FFF7FEFF 		bl	hex2uart	@
 7333 0240 0024     		movs	r4, #0	@ ivtmp.662,
 7334              	.L583:
 7335              	@ main.c:4295: 				for(u08 k=0;k<8;k++){ hex2uart(k, 2);	}
 7336 0242 2046     		mov	r0, r4	@, ivtmp.662
 7337 0244 0221     		movs	r1, #2	@,
 7338 0246 0134     		adds	r4, r4, #1	@ ivtmp.662, ivtmp.662,
 7339 0248 FFF7FEFF 		bl	hex2uart	@
 7340 024c 082C     		cmp	r4, #8	@ ivtmp.662,
 7341 024e F8D1     		bne	.L583	@,
 7342              	@ main.c:4296: 				UaPutK("\r\n\n ");
 7343 0250 3148     		ldr	r0, .L643+88	@,
 7344 0252 FFF7FEFF 		bl	UaPutK	@
 7345 0256 4FF00008 		mov	r8, #0	@ ivtmp.659,
 7346 025a 224F     		ldr	r7, .L643+36	@ ivtmp.661,
 7347              	@ main.c:4302: 					UaPutS("  ");
 7348 025c DFF8C0B0 		ldr	fp, .L643+96	@ tmp625,
 7349              	@ main.c:4307: 					UaPutS("\r\n ");
 7350 0260 DFF86CA0 		ldr	r10, .L643+16	@ tmp626,
 7351 0264 07F10806 		add	r6, r7, #8	@ ivtmp.660, ivtmp.661,
 7352              	.L588:
 7353              	@ main.c:4298: 					unt2uart(i*8,4);	UaPutC(' ');
ARM GAS  /tmp/ccrMssCc.s 			page 130


 7354 0268 0421     		movs	r1, #4	@,
 7355 026a 4046     		mov	r0, r8	@, ivtmp.659
 7356 026c FFF7FEFF 		bl	unt2uart	@
 7357 0270 2020     		movs	r0, #32	@,
 7358 0272 FFF7FEFF 		bl	UaPutC	@
 7359 0276 3C46     		mov	r4, r7	@ ivtmp.652, ivtmp.661
 7360              	.L584:
 7361              	@ main.c:4300: 						hex2uart(buffer[k+i], 2);
 7362 0278 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2	@, MEM[base: _425, offset: 0B]
 7363 027c 0221     		movs	r1, #2	@,
 7364 027e FFF7FEFF 		bl	hex2uart	@
 7365              	@ main.c:4299: 					for(u08 k=0;k<8;k++){
 7366 0282 A642     		cmp	r6, r4	@ ivtmp.660, ivtmp.652
 7367 0284 F8D1     		bne	.L584	@,
 7368              	@ main.c:4302: 					UaPutS("  ");
 7369 0286 5846     		mov	r0, fp	@, tmp625
 7370 0288 FFF7FEFF 		bl	UaPutS	@
 7371 028c 3D46     		mov	r5, r7	@ ivtmp.643, ivtmp.661
 7372              	.L587:
 7373              	@ main.c:4304: 						if ( buffer[k+i]<0x20 || buffer[k+i]>127 ) UaPutC('.');
 7374 028e 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2	@ _99, MEM[base: _423, offset: 0B]
 7375 0292 A0F12003 		sub	r3, r0, #32	@ tmp595, _99,
 7376 0296 5F2B     		cmp	r3, #95	@ tmp595,
 7377 0298 88BF     		it	hi
 7378 029a 2E20     		movhi	r0, #46	@,
 7379              	@ main.c:4305: 						else UaPutC(buffer[k+i]);
 7380 029c FFF7FEFF 		bl	UaPutC	@
 7381              	@ main.c:4303: 					for(u08 k=0;k<8;k++){
 7382 02a0 A542     		cmp	r5, r4	@ ivtmp.643, ivtmp.652
 7383 02a2 F4D1     		bne	.L587	@,
 7384 02a4 08F14008 		add	r8, r8, #64	@ ivtmp.659, ivtmp.659,
 7385              	@ main.c:4307: 					UaPutS("\r\n ");
 7386 02a8 5046     		mov	r0, r10	@, tmp626
 7387 02aa FFF7FEFF 		bl	UaPutS	@
 7388              	@ main.c:4297: 				for(u32 i=0;i<64;i+=8){
 7389 02ae B8F5007F 		cmp	r8, #512	@ ivtmp.659,
 7390 02b2 06F10806 		add	r6, r6, #8	@ ivtmp.660, ivtmp.660,
 7391 02b6 07F10807 		add	r7, r7, #8	@ ivtmp.661, ivtmp.661,
 7392 02ba D5D1     		bne	.L588	@,
 7393 02bc CAE6     		b	.L532	@
 7394              	.L644:
 7395 02be 00BF     		.align	2
 7396              	.L643:
 7397 02c0 00000000 		.word	.LANCHOR29
 7398 02c4 00000000 		.word	CardType
 7399 02c8 00000000 		.word	.LC110
 7400 02cc 00000000 		.word	p_Fifo1
 7401 02d0 30000000 		.word	.LC78
 7402 02d4 14030000 		.word	.LC154
 7403 02d8 68020000 		.word	.LC145
 7404 02dc 7C020000 		.word	.LC146
 7405 02e0 94020000 		.word	.LC147
 7406 02e4 00000000 		.word	buffer.8844
 7407 02e8 BC020000 		.word	.LC149
 7408 02ec D0020000 		.word	.LC150
 7409 02f0 8C000000 		.word	.LC116
 7410 02f4 A0000000 		.word	.LC117
ARM GAS  /tmp/ccrMssCc.s 			page 131


 7411 02f8 DC000000 		.word	.LC90
 7412 02fc DC010000 		.word	.LC136
 7413 0300 10E000E0 		.word	-536813552
 7414 0304 00000000 		.word	Timt
 7415 0308 00020000 		.word	.LC138
 7416 030c FFCBDA01 		.word	31116287
 7417 0310 E4020000 		.word	.LC151
 7418 0314 00030000 		.word	.LC153
 7419 0318 34000000 		.word	.LC79
 7420 031c FF010000 		.word	buffer.8844+511
 7421 0320 3C000000 		.word	.LC80
 7422              	.L539:
 7423              	@ main.c:4005: 			dinit=mci_init();
 7424 0324 FFF7FEFF 		bl	mmc_init	@
 7425 0328 AF4B     		ldr	r3, .L645	@ tmp713,
 7426 032a 1870     		strb	r0, [r3]	@ tmp392, dinit
 7427              	@ main.c:4006: 			if(dinit){
 7428 032c 0028     		cmp	r0, #0	@ tmp392
 7429 032e 00F0EF80 		beq	.L565	@
 7430              	.L635:
 7431              	@ main.c:4029: 				if(	mci_read_config (&mmcfg)){
 7432 0332 09A8     		add	r0, sp, #36	@ tmp716,,
 7433 0334 FFF7FEFF 		bl	mmc_read_config	@
 7434 0338 0028     		cmp	r0, #0	@
 7435 033a 3FF48BAE 		beq	.L532	@
 7436              	@ main.c:4030: 					UaPutK("\r\nSD Card ser_num    = "); uint2uart(mmcfg.sernum);
 7437 033e AB48     		ldr	r0, .L645+4	@,
 7438 0340 FFF7FEFF 		bl	UaPutK	@
 7439 0344 0998     		ldr	r0, [sp, #36]	@, mmcfg.sernum
 7440 0346 FFF7FEFF 		bl	uint2uart	@
 7441              	@ main.c:4031: 					UaPutK("\r\nSD Card block_num  = "); uint2uart(mmcfg.blocknr);
 7442 034a A948     		ldr	r0, .L645+8	@,
 7443 034c FFF7FEFF 		bl	UaPutK	@
 7444 0350 0A98     		ldr	r0, [sp, #40]	@, mmcfg.blocknr
 7445 0352 FFF7FEFF 		bl	uint2uart	@
 7446              	@ main.c:4032: 					UaPutK("\r\nSD Card read_blen  = "); uint2uart(mmcfg.read_blen);
 7447 0356 A748     		ldr	r0, .L645+12	@,
 7448 0358 FFF7FEFF 		bl	UaPutK	@
 7449 035c BDF82C00 		ldrh	r0, [sp, #44]	@, mmcfg.read_blen
 7450 0360 FFF7FEFF 		bl	uint2uart	@
 7451              	@ main.c:4033: 					UaPutK("\r\nSD Card write_blen = "); uint2uart(mmcfg.write_blen);
 7452 0364 A448     		ldr	r0, .L645+16	@,
 7453 0366 FFF7FEFF 		bl	UaPutK	@
 7454 036a BDF82E00 		ldrh	r0, [sp, #46]	@, mmcfg.write_blen
 7455 036e FFF7FEFF 		bl	uint2uart	@
 7456 0372 6FE6     		b	.L532	@
 7457              	.L538:
 7458              	@ main.c:4039: 			UaPutK("Fill sector");
 7459 0374 A148     		ldr	r0, .L645+20	@,
 7460 0376 FFF7FEFF 		bl	UaPutK	@
 7461              	@ main.c:4040: 			UaPutK("\r\n Start Block  = 0x");		strBlock=UART_getHex();
 7462 037a A148     		ldr	r0, .L645+24	@,
 7463 037c FFF7FEFF 		bl	UaPutK	@
 7464 0380 FFF7FEFF 		bl	UART_getHex	@
 7465 0384 0446     		mov	r4, r0	@ strBlock,
 7466              	@ main.c:4042: 			UaPutK("\r\n End   Blocks = 0x");		dstBlock=UART_getHex();
 7467 0386 9F48     		ldr	r0, .L645+28	@,
ARM GAS  /tmp/ccrMssCc.s 			page 132


 7468 0388 FFF7FEFF 		bl	UaPutK	@
 7469 038c FFF7FEFF 		bl	UART_getHex	@
 7470              	@ main.c:4043: 			dstBlock = dstBlock > strBlock ? dstBlock - strBlock + 1 : 1;
 7471 0390 8442     		cmp	r4, r0	@ strBlock, dstBlock
 7472 0392 80F02581 		bcs	.L589	@,
 7473              	@ main.c:4043: 			dstBlock = dstBlock > strBlock ? dstBlock - strBlock + 1 : 1;
 7474 0396 0130     		adds	r0, r0, #1	@ tmp423, dstBlock,
 7475 0398 051B     		subs	r5, r0, r4	@ iftmp.221_131, tmp423, strBlock
 7476 039a 05F1FF3B 		add	fp, r5, #-1	@ prephitmp_139, iftmp.221_131,
 7477              	.L550:
 7478              	@ main.c:4045: 			UaPutK("\r\n Num Blocks   = ");				uint2uart(dstBlock);
 7479 039e 9A48     		ldr	r0, .L645+32	@,
 7480 03a0 FFF7FEFF 		bl	UaPutK	@
 7481 03a4 2846     		mov	r0, r5	@, iftmp.221_131
 7482 03a6 FFF7FEFF 		bl	uint2uart	@
 7483              	@ main.c:4046: 			UaPutK("\r\n Data to fill = 0x");
 7484 03aa 9848     		ldr	r0, .L645+36	@,
 7485 03ac FFF7FEFF 		bl	UaPutK	@
 7486              	@ main.c:4047: 			znak=UART_getHex();
 7487 03b0 FFF7FEFF 		bl	UART_getHex	@
 7488 03b4 964B     		ldr	r3, .L645+40	@ ivtmp.633,
 7489 03b6 C0B2     		uxtb	r0, r0	@ znak,
 7490              	.L551:
 7491              	@ main.c:4049: 				buffer[i] = znak;
 7492 03b8 03F8010F 		strb	r0, [r3, #1]!	@ znak, MEM[base: _101, offset: 0B]
 7493              	@ main.c:4048: 			for(u32 i=0;i<512;i++){
 7494 03bc 4B45     		cmp	r3, r9	@ ivtmp.633, _443
 7495 03be FBD1     		bne	.L551	@,
 7496              	@ main.c:4051: 			while(dstBlock--){
 7497 03c0 002D     		cmp	r5, #0	@ iftmp.221_131
 7498 03c2 3FF447AE 		beq	.L532	@
 7499 03c6 651C     		adds	r5, r4, #1	@ strBlock, strBlock,
 7500              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7501 03c8 924F     		ldr	r7, .L645+44	@ tmp429,
 7502              	@ main.c:4054: 				d = mci_write_sect(strBlock, buffer, 1);
 7503 03ca DFF88482 		ldr	r8, .L645+104	@ tmp620,
 7504              	@ main.c:4062: 						UaPutS("\r\n Fill OK ");
 7505 03ce DFF8A8A2 		ldr	r10, .L645+144	@ tmp621,
 7506 03d2 AB44     		add	fp, fp, r5	@ _134, strBlock
 7507 03d4 07E0     		b	.L554	@
 7508              	.L552:
 7509              	@ main.c:4060: 					if(!(strBlock%1024)){
 7510 03d6 002A     		cmp	r2, #0	@ tmp434
 7511 03d8 00F0DB80 		beq	.L639	@
 7512              	.L553:
 7513              	@ main.c:4051: 			while(dstBlock--){
 7514 03dc AB45     		cmp	fp, r5	@ _134, strBlock
 7515              	@ main.c:4068: 				strBlock++;
 7516 03de 2C46     		mov	r4, r5	@ strBlock, strBlock
 7517              	@ main.c:4051: 			while(dstBlock--){
 7518 03e0 3FF438AE 		beq	.L532	@,
 7519 03e4 0135     		adds	r5, r5, #1	@ strBlock, strBlock,
 7520              	.L554:
 7521              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7522 03e6 BB68     		ldr	r3, [r7, #8]	@ _366, MEM[(struct SysTick_Type *)3758153744B].VAL
 7523 03e8 8B4E     		ldr	r6, .L645+48	@ tmp717,
 7524              	@ main.c:4054: 				d = mci_write_sect(strBlock, buffer, 1);
ARM GAS  /tmp/ccrMssCc.s 			page 133


 7525 03ea 0122     		movs	r2, #1	@,
 7526 03ec 4146     		mov	r1, r8	@, tmp620
 7527 03ee 2046     		mov	r0, r4	@, strBlock
 7528              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7529 03f0 3360     		str	r3, [r6]	@ _366, Timt
 7530              	@ main.c:4054: 				d = mci_write_sect(strBlock, buffer, 1);
 7531 03f2 FFF7FEFF 		bl	mmc_write_sect	@
 7532              	@ main.c:4060: 					if(!(strBlock%1024)){
 7533 03f6 C4F30902 		ubfx	r2, r4, #0, #10	@ tmp434, strBlock,,
 7534              	@ main.c:4055: 				if(d==0) {
 7535 03fa 0646     		mov	r6, r0	@ tmp432,
 7536 03fc 0028     		cmp	r0, #0	@ tmp432
 7537 03fe EAD1     		bne	.L552	@
 7538              	@ main.c:4056: 					UaPutS("\r\n Fill error = 0x");
 7539 0400 8648     		ldr	r0, .L645+52	@,
 7540 0402 FFF7FEFF 		bl	UaPutS	@
 7541              	@ main.c:4057: 					hex2uart(strBlock,8); hex2uart(d,2);
 7542 0406 2046     		mov	r0, r4	@, strBlock
 7543 0408 0821     		movs	r1, #8	@,
 7544 040a FFF7FEFF 		bl	hex2uart	@
 7545 040e 3046     		mov	r0, r6	@, tmp432
 7546 0410 0221     		movs	r1, #2	@,
 7547 0412 FFF7FEFF 		bl	hex2uart	@
 7548 0416 E1E7     		b	.L553	@
 7549              	.L537:
 7550              	@ main.c:4091: 			UaPutK("Copy memory");
 7551 0418 8148     		ldr	r0, .L645+56	@,
 7552 041a FFF7FEFF 		bl	UaPutK	@
 7553              	@ main.c:4092: 			UaPutK("\r\n Src Mem adr = 0x");	strBlock=UART_getHex();
 7554 041e 8148     		ldr	r0, .L645+60	@,
 7555 0420 FFF7FEFF 		bl	UaPutK	@
 7556 0424 FFF7FEFF 		bl	UART_getHex	@
 7557 0428 0446     		mov	r4, r0	@ strBlock,
 7558              	@ main.c:4093: 			UaPutK("\r\n How many byte = ");	lenBlock=UART_getNum();
 7559 042a 7F48     		ldr	r0, .L645+64	@,
 7560 042c FFF7FEFF 		bl	UaPutK	@
 7561 0430 FFF7FEFF 		bl	UART_getNum	@
 7562 0434 8246     		mov	r10, r0	@ _38,
 7563              	@ main.c:4094: 			UaPutK("\r\n Dst mem adr = 0x");	dstBlock=UART_getHex();
 7564 0436 7D48     		ldr	r0, .L645+68	@,
 7565 0438 FFF7FEFF 		bl	UaPutK	@
 7566 043c FFF7FEFF 		bl	UART_getHex	@
 7567              	@ main.c:4097: 			for(u32 bl=(dstBlock/512);bl <= ((dstBlock+lenBlock-1)/512); bl++){
 7568 0440 8244     		add	r10, r10, r0	@ _130, dstBlock
 7569 0442 0AF1FF37 		add	r7, r10, #-1	@ tmp460, _130,
 7570 0446 7F0A     		lsrs	r7, r7, #9	@ _129, tmp460,
 7571 0448 4FEA502B 		lsr	fp, r0, #9	@ bl, dstBlock,
 7572 044c 5F45     		cmp	r7, fp	@ _129, bl
 7573              	@ main.c:4096: 			u32 dbl = dstBlock%512, sBlk=strBlock/512, sMem=strBlock%512;
 7574 044e 4FEA5426 		lsr	r6, r4, #9	@ sBlk, strBlock,
 7575 0452 C0F30805 		ubfx	r5, r0, #0, #9	@ dbl, dstBlock,,
 7576 0456 C4F30804 		ubfx	r4, r4, #0, #9	@ sMem, strBlock,,
 7577              	@ main.c:4097: 			for(u32 bl=(dstBlock/512);bl <= ((dstBlock+lenBlock-1)/512); bl++){
 7578 045a FFF4FBAD 		bcc	.L532	@,
 7579              	@ main.c:4107: 					if (bl == ((dstBlock+lenBlock)/512))	hex2uart((dstBlock+lenBlock)%512, 3);		//L
 7580 045e 4FEA5A23 		lsr	r3, r10, #9	@ _43, _130,
 7581 0462 0293     		str	r3, [sp, #8]	@ _43, %sfp
ARM GAS  /tmp/ccrMssCc.s 			page 134


 7582 0464 5346     		mov	r3, r10	@ _130, _130
 7583              	@ main.c:4098: 				if (mci_read_sect(bl,buffer,1)){
 7584 0466 DFF8E881 		ldr	r8, .L645+104	@ tmp617,
 7585              	@ main.c:4107: 					if (bl == ((dstBlock+lenBlock)/512))	hex2uart((dstBlock+lenBlock)%512, 3);		//L
 7586 046a DA46     		mov	r10, fp	@ bl, bl
 7587 046c 9B46     		mov	fp, r3	@ _130, _130
 7588 046e 04E0     		b	.L557	@
 7589              	.L555:
 7590              	@ main.c:4097: 			for(u32 bl=(dstBlock/512);bl <= ((dstBlock+lenBlock-1)/512); bl++){
 7591 0470 0AF1010A 		add	r10, r10, #1	@ bl, bl,
 7592 0474 5745     		cmp	r7, r10	@ _129, bl
 7593 0476 FFF4EDAD 		bcc	.L532	@,
 7594              	.L557:
 7595              	@ main.c:4098: 				if (mci_read_sect(bl,buffer,1)){
 7596 047a 0122     		movs	r2, #1	@,
 7597 047c 4146     		mov	r1, r8	@, tmp617
 7598 047e 5046     		mov	r0, r10	@, bl
 7599 0480 FFF7FEFF 		bl	mmc_read_sect	@
 7600 0484 0028     		cmp	r0, #0	@
 7601 0486 F3D0     		beq	.L555	@
 7602              	@ main.c:4099: 					UaPutK("\r\n ReadB 0x");							hex2uart(sBlk++,3);
 7603 0488 6948     		ldr	r0, .L645+72	@,
 7604 048a FFF7FEFF 		bl	UaPutK	@
 7605 048e 0321     		movs	r1, #3	@,
 7606 0490 3046     		mov	r0, r6	@, sBlk
 7607 0492 FFF7FEFF 		bl	hex2uart	@
 7608 0496 0136     		adds	r6, r6, #1	@ sBlk, sBlk,
 7609              	@ main.c:4100: 					UaPutC(',');													hex2uart(sBlk, 	3);
 7610 0498 2C20     		movs	r0, #44	@,
 7611 049a FFF7FEFF 		bl	UaPutC	@
 7612 049e 0321     		movs	r1, #3	@,
 7613 04a0 3046     		mov	r0, r6	@, sBlk
 7614 04a2 FFF7FEFF 		bl	hex2uart	@
 7615              	@ main.c:4101: 					UaPutK("  From 0x");							    hex2uart(sMem, 	3);
 7616 04a6 6348     		ldr	r0, .L645+76	@,
 7617 04a8 FFF7FEFF 		bl	UaPutK	@
 7618 04ac 0321     		movs	r1, #3	@,
 7619 04ae 2046     		mov	r0, r4	@, sMem
 7620 04b0 FFF7FEFF 		bl	hex2uart	@
 7621 04b4 04F50074 		add	r4, r4, #512	@ _445, sMem,
 7622              	@ main.c:4103: 					UaPutK("->0x");											  hex2uart(sMem + (0x200-dbl), 3);
 7623 04b8 5F48     		ldr	r0, .L645+80	@,
 7624 04ba FFF7FEFF 		bl	UaPutK	@
 7625              	@ main.c:4102: 					sMem = sMem + (0x200-dbl);
 7626 04be 641B     		subs	r4, r4, r5	@ sMem, _445, dbl
 7627              	@ main.c:4103: 					UaPutK("->0x");											  hex2uart(sMem + (0x200-dbl), 3);
 7628 04c0 C5F50070 		rsb	r0, r5, #512	@ tmp466, dbl,
 7629 04c4 0321     		movs	r1, #3	@,
 7630 04c6 2044     		add	r0, r0, r4	@, sMem
 7631 04c8 FFF7FEFF 		bl	hex2uart	@
 7632              	@ main.c:4104: 					UaPutK("  WriteB 0x");								hex2uart(bl, 		3);
 7633 04cc 5B48     		ldr	r0, .L645+84	@,
 7634 04ce FFF7FEFF 		bl	UaPutK	@
 7635 04d2 0321     		movs	r1, #3	@,
 7636 04d4 5046     		mov	r0, r10	@, bl
 7637 04d6 FFF7FEFF 		bl	hex2uart	@
 7638              	@ main.c:4105: 					UaPutK("  0x");					  						hex2uart(dbl, 	3);
ARM GAS  /tmp/ccrMssCc.s 			page 135


 7639 04da 5948     		ldr	r0, .L645+88	@,
 7640 04dc FFF7FEFF 		bl	UaPutK	@
 7641 04e0 2846     		mov	r0, r5	@, dbl
 7642 04e2 0321     		movs	r1, #3	@,
 7643 04e4 FFF7FEFF 		bl	hex2uart	@
 7644              	@ main.c:4106: 					UaPutK("->0x");
 7645 04e8 5348     		ldr	r0, .L645+80	@,
 7646 04ea FFF7FEFF 		bl	UaPutK	@
 7647              	@ main.c:4107: 					if (bl == ((dstBlock+lenBlock)/512))	hex2uart((dstBlock+lenBlock)%512, 3);		//L
 7648 04ee 029B     		ldr	r3, [sp, #8]	@ _43, %sfp
 7649 04f0 0321     		movs	r1, #3	@,
 7650 04f2 5345     		cmp	r3, r10	@ _43, bl
 7651 04f4 0CBF     		ite	eq
 7652 04f6 CBF30800 		ubfxeq	r0, fp, #0, #9	@, _130,,
 7653              	@ main.c:4108: 					else																	hex2uart(0x200, 3);
 7654 04fa 4FF40070 		movne	r0, #512	@,
 7655 04fe FFF7FEFF 		bl	hex2uart	@
 7656              	@ main.c:4109: 					dbl = 0;
 7657 0502 0025     		movs	r5, #0	@ dbl,
 7658 0504 B4E7     		b	.L555	@
 7659              	.L535:
 7660              	@ main.c:4163: 			if(CardType){
 7661 0506 039B     		ldr	r3, [sp, #12]	@ tmp612, %sfp
 7662 0508 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ CardType, CardType
 7663 050a 002B     		cmp	r3, #0	@ CardType
 7664 050c 40F02081 		bne	.L640	@
 7665              	.L565:
 7666              	@ main.c:4206: 			} else UaPutK("\r\nSD Card Init ERROR ");
 7667 0510 4C48     		ldr	r0, .L645+92	@,
 7668 0512 FFF7FEFF 		bl	UaPutK	@
 7669 0516 9DE5     		b	.L532	@
 7670              	.L540:
 7671              	@ main.c:4074: 			UaPutS("Modify memory");
 7672 0518 4B48     		ldr	r0, .L645+96	@,
 7673 051a FFF7FEFF 		bl	UaPutS	@
 7674              	@ main.c:4075: 			UaPutS("\r\n Memory Addr = 0x");
 7675 051e 4B48     		ldr	r0, .L645+100	@,
 7676 0520 FFF7FEFF 		bl	UaPutS	@
 7677              	@ main.c:4077: 			strBlock=UART_getHex();
 7678 0524 FFF7FEFF 		bl	UART_getHex	@
 7679              	@ main.c:4079: 			if (mci_read_sect	(strBlock/512, buffer, 1)){
 7680 0528 450A     		lsrs	r5, r0, #9	@ _31, strBlock,
 7681              	@ main.c:4077: 			strBlock=UART_getHex();
 7682 052a 0446     		mov	r4, r0	@ strBlock,
 7683              	@ main.c:4079: 			if (mci_read_sect	(strBlock/512, buffer, 1)){
 7684 052c 0122     		movs	r2, #1	@,
 7685 052e 2846     		mov	r0, r5	@, _31
 7686 0530 4749     		ldr	r1, .L645+104	@,
 7687 0532 FFF7FEFF 		bl	mmc_read_sect	@
 7688 0536 0028     		cmp	r0, #0	@
 7689 0538 3FF48CAD 		beq	.L532	@
 7690              	@ main.c:4080: 				UaPutS("\r\n Memory Data = 0x");
 7691 053c 4548     		ldr	r0, .L645+108	@,
 7692 053e FFF7FEFF 		bl	UaPutS	@
 7693              	@ main.c:4081: 				hex2uart(buffer[strBlock%512], 2);
 7694 0542 059E     		ldr	r6, [sp, #20]	@ ivtmp.661, %sfp
 7695 0544 C4F30804 		ubfx	r4, r4, #0, #9	@ _33, strBlock,,
ARM GAS  /tmp/ccrMssCc.s 			page 136


 7696 0548 0221     		movs	r1, #2	@,
 7697 054a 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2	@, buffer
 7698 054c FFF7FEFF 		bl	hex2uart	@
 7699              	@ main.c:4082: 				UaPutS("\r\n New Data    = 0x");
 7700 0550 4148     		ldr	r0, .L645+112	@,
 7701 0552 FFF7FEFF 		bl	UaPutS	@
 7702              	@ main.c:4083: 				StrBlock=UART_getHex();
 7703 0556 FFF7FEFF 		bl	UART_getHex	@
 7704              	@ main.c:4086: 				if (mci_write_sect		(strBlock/512, buffer,1))  UaPutS("\r\n Modify OK");
 7705 055a 0122     		movs	r2, #1	@,
 7706              	@ main.c:4084: 				buffer[strBlock%512] = StrBlock;
 7707 055c 3055     		strb	r0, [r6, r4]	@, buffer
 7708              	@ main.c:4086: 				if (mci_write_sect		(strBlock/512, buffer,1))  UaPutS("\r\n Modify OK");
 7709 055e 3C49     		ldr	r1, .L645+104	@,
 7710 0560 2846     		mov	r0, r5	@, _31
 7711 0562 FFF7FEFF 		bl	mmc_write_sect	@
 7712 0566 0028     		cmp	r0, #0	@
 7713 0568 3FF474AD 		beq	.L532	@
 7714              	@ main.c:4086: 				if (mci_write_sect		(strBlock/512, buffer,1))  UaPutS("\r\n Modify OK");
 7715 056c 3B48     		ldr	r0, .L645+116	@,
 7716 056e FFF7FEFF 		bl	UaPutS	@
 7717 0572 6FE5     		b	.L532	@
 7718              	.L534:
 7719              	@ main.c:4317: 			UaPutK("Unkr_dma_buf Command !");
 7720 0574 3A48     		ldr	r0, .L645+120	@,
 7721 0576 FFF7FEFF 		bl	UaPutK	@
 7722              	@ main.c:4318: 			break;
 7723 057a 6BE5     		b	.L532	@
 7724              	.L578:
 7725              	@ main.c:4282: 				} else UaPutK("\r\n Read Error ");
 7726 057c 3948     		ldr	r0, .L645+124	@,
 7727 057e FFF7FEFF 		bl	UaPutK	@
 7728              	@ main.c:4283: 				if(p_Fifo1->rct) break;
 7729 0582 394B     		ldr	r3, .L645+128	@ tmp753,
 7730 0584 1B68     		ldr	r3, [r3]	@ p_Fifo1.243_492, p_Fifo1
 7731 0586 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.243_492->rct
 7732 0588 9BB2     		uxth	r3, r3	@ _493, p_Fifo1.243_492->rct
 7733 058a 002B     		cmp	r3, #0	@ _493
 7734 058c 3FF41FAE 		beq	.L576	@
 7735 0590 42E6     		b	.L577	@
 7736              	.L639:
 7737              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7738 0592 214B     		ldr	r3, .L645+48	@ tmp718,
 7739              	@ main.c:4062: 						UaPutS("\r\n Fill OK ");
 7740 0594 5046     		mov	r0, r10	@, tmp621
 7741              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7742 0596 1E68     		ldr	r6, [r3]	@ Timt.84_367, Timt
 7743 0598 BB68     		ldr	r3, [r7, #8]	@ _368, MEM[(struct SysTick_Type *)3758153744B].VAL
 7744 059a 0292     		str	r2, [sp, #8]	@ tmp434, %sfp
 7745 059c F61A     		subs	r6, r6, r3	@ _369, Timt.84_367, _368
 7746 059e 0896     		str	r6, [sp, #32]	@ _369, MEM[(volatile u32 *)&tim]
 7747              	@ main.c:4062: 						UaPutS("\r\n Fill OK ");
 7748 05a0 FFF7FEFF 		bl	UaPutS	@
 7749              	@ main.c:4063: 						hex2uart(strBlock,  8);
 7750 05a4 2046     		mov	r0, r4	@, strBlock
 7751 05a6 0821     		movs	r1, #8	@,
 7752 05a8 FFF7FEFF 		bl	hex2uart	@
ARM GAS  /tmp/ccrMssCc.s 			page 137


 7753              	@ main.c:4064: 						UaPutS(" Time[us] = " );
 7754 05ac 2F48     		ldr	r0, .L645+132	@,
 7755 05ae FFF7FEFF 		bl	UaPutS	@
 7756              	@ main.c:4065: 						num2uart(tim, 8,0);
 7757 05b2 029A     		ldr	r2, [sp, #8]	@ tmp434, %sfp
 7758 05b4 3046     		mov	r0, r6	@, _369
 7759 05b6 0821     		movs	r1, #8	@,
 7760 05b8 FFF7FEFF 		bl	num2uart	@
 7761 05bc 0EE7     		b	.L553	@
 7762              	.L638:
 7763              	@ main.c:4278: 						UaPutK("\r\n Block = ");	hex2uart(strBlock,8); hex2uart(crc,4);
 7764 05be 2C48     		ldr	r0, .L645+136	@,
 7765 05c0 FFF7FEFF 		bl	UaPutK	@
 7766 05c4 2046     		mov	r0, r4	@, strBlock
 7767 05c6 0821     		movs	r1, #8	@,
 7768 05c8 FFF7FEFF 		bl	hex2uart	@
 7769 05cc 0421     		movs	r1, #4	@,
 7770 05ce BDF81E00 		ldrh	r0, [sp, #30]	@, crc
 7771 05d2 FFF7FEFF 		bl	hex2uart	@
 7772 05d6 11E6     		b	.L579	@
 7773              	.L636:
 7774              	@ main.c:4223: 					UaPutK("\r\n Exit Read Error !!!");
 7775 05d8 2648     		ldr	r0, .L645+140	@,
 7776 05da FFF7FEFF 		bl	UaPutK	@
 7777              	@ main.c:4224: 					break;
 7778 05de A6E5     		b	.L573	@
 7779              	.L589:
 7780 05e0 4FF0000B 		mov	fp, #0	@ prephitmp_139,
 7781              	@ main.c:4043: 			dstBlock = dstBlock > strBlock ? dstBlock - strBlock + 1 : 1;
 7782 05e4 0125     		movs	r5, #1	@ iftmp.221_131,
 7783 05e6 DAE6     		b	.L550	@
 7784              	.L646:
 7785              		.align	2
 7786              	.L645:
 7787 05e8 00000000 		.word	.LANCHOR29
 7788 05ec 2C000000 		.word	.LC112
 7789 05f0 44000000 		.word	.LC113
 7790 05f4 5C000000 		.word	.LC114
 7791 05f8 74000000 		.word	.LC115
 7792 05fc B4000000 		.word	.LC118
 7793 0600 C0000000 		.word	.LC119
 7794 0604 D8000000 		.word	.LC120
 7795 0608 F0000000 		.word	.LC121
 7796 060c 04010000 		.word	.LC122
 7797 0610 FFFFFFFF 		.word	buffer.8844-1
 7798 0614 10E000E0 		.word	-536813552
 7799 0618 00000000 		.word	Timt
 7800 061c 1C010000 		.word	.LC123
 7801 0620 20000000 		.word	.LC101
 7802 0624 2C000000 		.word	.LC102
 7803 0628 40000000 		.word	.LC103
 7804 062c 54000000 		.word	.LC104
 7805 0630 A8010000 		.word	.LC131
 7806 0634 B4010000 		.word	.LC132
 7807 0638 C0010000 		.word	.LC133
 7808 063c C8010000 		.word	.LC134
 7809 0640 D4010000 		.word	.LC135
ARM GAS  /tmp/ccrMssCc.s 			page 138


 7810 0644 14000000 		.word	.LC111
 7811 0648 4C010000 		.word	.LC126
 7812 064c 5C010000 		.word	.LC127
 7813 0650 00000000 		.word	buffer.8844
 7814 0654 70010000 		.word	.LC128
 7815 0658 84010000 		.word	.LC129
 7816 065c 98010000 		.word	.LC130
 7817 0660 20030000 		.word	.LC155
 7818 0664 F0020000 		.word	.LC152
 7819 0668 00000000 		.word	p_Fifo1
 7820 066c 3C010000 		.word	.LC125
 7821 0670 E4020000 		.word	.LC151
 7822 0674 A4020000 		.word	.LC148
 7823 0678 30010000 		.word	.LC124
 7824              	.L637:
 7825              	@ main.c:4131: 				UaPutS("\r\n ");
 7826 067c 7548     		ldr	r0, .L647	@,
 7827 067e FFF7FEFF 		bl	UaPutS	@
 7828              	@ main.c:4132: 				hex2uart(strBlock, 8);
 7829 0682 0821     		movs	r1, #8	@,
 7830 0684 3846     		mov	r0, r7	@, strBlock
 7831 0686 FFF7FEFF 		bl	hex2uart	@
 7832 068a 0024     		movs	r4, #0	@ ivtmp.695,
 7833              	.L559:
 7834              	@ main.c:4134: 					hex2uart(k, 2);
 7835 068c 2046     		mov	r0, r4	@, ivtmp.695
 7836 068e 0221     		movs	r1, #2	@,
 7837 0690 0134     		adds	r4, r4, #1	@ ivtmp.695, ivtmp.695,
 7838 0692 FFF7FEFF 		bl	hex2uart	@
 7839              	@ main.c:4133: 				for(u08 k=0;k<16;k++){
 7840 0696 102C     		cmp	r4, #16	@ ivtmp.695,
 7841 0698 F8D1     		bne	.L559	@,
 7842 069a 6F4D     		ldr	r5, .L647+4	@ _474,
 7843              	@ main.c:4136: 				UaPutS("\r\n\n ");
 7844 069c 6F48     		ldr	r0, .L647+8	@,
 7845              	@ main.c:4142: 					UaPutS("  ");
 7846 069e DFF80CA2 		ldr	r10, .L647+88	@ tmp631,
 7847              	@ main.c:4147: 					UaPutS("\r\n ");
 7848 06a2 DFF8B081 		ldr	r8, .L647	@ tmp632,
 7849              	@ main.c:4136: 				UaPutS("\r\n\n ");
 7850 06a6 FFF7FEFF 		bl	UaPutS	@
 7851              	@ main.c:4138: 					hex2uart(strBlock*512 + i, 8);
 7852 06aa 2E46     		mov	r6, r5	@ ivtmp.694, ivtmp.661
 7853 06ac 0595     		str	r5, [sp, #20]	@ ivtmp.661, %sfp
 7854 06ae C5EB4727 		rsb	r7, r5, r7, lsl #9	@ tmp603, ivtmp.661, strBlock,
 7855 06b2 1035     		adds	r5, r5, #16	@ ivtmp.693, _474,
 7856              	.L564:
 7857 06b4 0821     		movs	r1, #8	@,
 7858 06b6 B819     		adds	r0, r7, r6	@, tmp603, ivtmp.694
 7859 06b8 FFF7FEFF 		bl	hex2uart	@
 7860 06bc 3446     		mov	r4, r6	@ ivtmp.685, ivtmp.694
 7861              	.L560:
 7862              	@ main.c:4140: 						hex2uart(buffer[k+i], 2);
 7863 06be 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2	@, MEM[base: _428, offset: 0B]
 7864 06c2 0221     		movs	r1, #2	@,
 7865 06c4 FFF7FEFF 		bl	hex2uart	@
 7866              	@ main.c:4139: 					for(u08 k=0;k<16;k++){
ARM GAS  /tmp/ccrMssCc.s 			page 139


 7867 06c8 AC42     		cmp	r4, r5	@ ivtmp.685, ivtmp.693
 7868 06ca F8D1     		bne	.L560	@,
 7869              	@ main.c:4142: 					UaPutS("  ");
 7870 06cc 5046     		mov	r0, r10	@, tmp631
 7871 06ce FFF7FEFF 		bl	UaPutS	@
 7872 06d2 B346     		mov	fp, r6	@ ivtmp.676, ivtmp.694
 7873              	.L563:
 7874              	@ main.c:4144: 						if ( buffer[k+i]<0x20 || buffer[k+i]>126 ) UaPutC('.');
 7875 06d4 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2	@ _58, MEM[base: _413, offset: 0B]
 7876 06d8 A0F12003 		sub	r3, r0, #32	@ tmp487, _58,
 7877 06dc 5E2B     		cmp	r3, #94	@ tmp487,
 7878 06de 88BF     		it	hi
 7879 06e0 2E20     		movhi	r0, #46	@,
 7880              	@ main.c:4145: 						else UaPutC(buffer[k+i]);
 7881 06e2 FFF7FEFF 		bl	UaPutC	@
 7882              	@ main.c:4143: 					for(u08 k=0;k<16;k++){
 7883 06e6 A345     		cmp	fp, r4	@ ivtmp.676, ivtmp.685
 7884 06e8 F4D1     		bne	.L563	@,
 7885              	@ main.c:4147: 					UaPutS("\r\n ");
 7886 06ea 4046     		mov	r0, r8	@, tmp632
 7887 06ec FFF7FEFF 		bl	UaPutS	@
 7888              	@ main.c:4137: 				for(u32 i=0;i<512;i+=16){
 7889 06f0 5B4B     		ldr	r3, .L647+12	@ tmp733,
 7890 06f2 1036     		adds	r6, r6, #16	@ ivtmp.694, ivtmp.694,
 7891 06f4 9E42     		cmp	r6, r3	@ ivtmp.694, tmp733
 7892 06f6 05F11005 		add	r5, r5, #16	@ ivtmp.693, ivtmp.693,
 7893 06fa DBD1     		bne	.L564	@,
 7894              	@ main.c:4149: 				UaPutK(" t_rsdio = ");	uint2uart(tim/TIM_US);
 7895 06fc 5948     		ldr	r0, .L647+16	@,
 7896 06fe FFF7FEFF 		bl	UaPutK	@
 7897 0702 594E     		ldr	r6, .L647+20	@ tmp735,
 7898 0704 029B     		ldr	r3, [sp, #8]	@ _372, %sfp
 7899              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7900 0706 594D     		ldr	r5, .L647+24	@ tmp493,
 7901              	@ main.c:4149: 				UaPutK(" t_rsdio = ");	uint2uart(tim/TIM_US);
 7902 0708 A6FB0330 		umull	r3, r0, r6, r3	@ tmp697, tmp491, tmp735, _372
 7903 070c 4008     		lsrs	r0, r0, #1	@, tmp491,
 7904 070e FFF7FEFF 		bl	uint2uart	@
 7905              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7906 0712 574C     		ldr	r4, .L647+28	@ tmp738,
 7907 0714 AB68     		ldr	r3, [r5, #8]	@ _377, MEM[(struct SysTick_Type *)3758153744B].VAL
 7908              	@ main.c:4151: 				crc16_spi2( (u16*) buffer,256, &crc );
 7909 0716 0DF11E02 		add	r2, sp, #30	@ tmp737,,
 7910 071a 4FF48071 		mov	r1, #256	@,
 7911 071e 4E48     		ldr	r0, .L647+4	@,
 7912              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 7913 0720 2360     		str	r3, [r4]	@ _377, Timt
 7914              	@ main.c:4151: 				crc16_spi2( (u16*) buffer,256, &crc );
 7915 0722 FFF7FEFF 		bl	crc16_spi2	@
 7916              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7917 0726 2468     		ldr	r4, [r4]	@ Timt.84_374, Timt
 7918 0728 AB68     		ldr	r3, [r5, #8]	@ _375, MEM[(struct SysTick_Type *)3758153744B].VAL
 7919              	@ main.c:4154: 				UaPutK(" crc = ");	hex2uart(crc,4);
 7920 072a 5248     		ldr	r0, .L647+32	@,
 7921              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7922 072c E41A     		subs	r4, r4, r3	@ _376, Timt.84_374, _375
 7923 072e 0894     		str	r4, [sp, #32]	@ _376, MEM[(volatile u32 *)&tim]
ARM GAS  /tmp/ccrMssCc.s 			page 140


 7924              	@ main.c:4154: 				UaPutK(" crc = ");	hex2uart(crc,4);
 7925 0730 FFF7FEFF 		bl	UaPutK	@
 7926 0734 0421     		movs	r1, #4	@,
 7927 0736 BDF81E00 		ldrh	r0, [sp, #30]	@, crc
 7928 073a FFF7FEFF 		bl	hex2uart	@
 7929              	@ main.c:4155: 				UaPutK(" t_crc = ");	uint2uart(tim/TIM_US);
 7930 073e 4E48     		ldr	r0, .L647+36	@,
 7931 0740 FFF7FEFF 		bl	UaPutK	@
 7932 0744 A6FB0430 		umull	r3, r0, r6, r4	@ tmp698, tmp503, tmp740, _376
 7933 0748 4008     		lsrs	r0, r0, #1	@, tmp503,
 7934 074a FFF7FEFF 		bl	uint2uart	@
 7935 074e 81E4     		b	.L532	@
 7936              	.L640:
 7937              	@ main.c:4171: 				x=0;
 7938 0750 0024     		movs	r4, #0	@ x,
 7939              	@ main.c:4164: 				UaPutK("Read multi sector");
 7940 0752 4A48     		ldr	r0, .L647+40	@,
 7941 0754 FFF7FEFF 		bl	UaPutK	@
 7942              	@ main.c:4170: 				UaPutK("\r\n Num Sectors  = ");			uint2uart(dstBlock);
 7943 0758 4948     		ldr	r0, .L647+44	@,
 7944 075a FFF7FEFF 		bl	UaPutK	@
 7945 075e 4948     		ldr	r0, .L647+48	@,
 7946 0760 FFF7FEFF 		bl	uint2uart	@
 7947              	@ main.c:4172: 				TFT_Clear(BLACK);
 7948 0764 2046     		mov	r0, r4	@, x
 7949 0766 FFF7FEFF 		bl	TFT_Clear	@
 7950              	@ main.c:4167: 				strBlock = 0;
 7951 076a 2646     		mov	r6, r4	@ strBlock, x
 7952              	@ main.c:4175: 					d = mci_read_sect (strBlock,buffer,1);
 7953 076c 3A4F     		ldr	r7, .L647+4	@ tmp614,
 7954 076e DDF81080 		ldr	r8, [sp, #16]	@ y1, %sfp
 7955 0772 1BE0     		b	.L571	@
 7956              	.L642:
 7957              	@ main.c:4194: 								TFT_dy( x, y1, y2, YELLOW, 0);
 7958 0774 0020     		movs	r0, #0	@ tmp529,
 7959 0776 4FF6E073 		movw	r3, #65504	@,
 7960 077a 0090     		str	r0, [sp]	@ tmp529,
 7961 077c 2046     		mov	r0, r4	@, x
 7962 077e FFF7FEFF 		bl	TFT_dy	@
 7963              	.L570:
 7964              	@ main.c:4200: 							x = (x+1)%(wXmax-wXmin);
 7965 0782 414B     		ldr	r3, .L647+52	@ tmp746,
 7966 0784 0134     		adds	r4, r4, #1	@ tmp530, x,
 7967 0786 A3FB0423 		umull	r2, r3, r3, r4	@ tmp700, tmp531, tmp746, tmp530
 7968 078a 5B09     		lsrs	r3, r3, #5	@ _76, tmp531,
 7969 078c 03EBC302 		add	r2, r3, r3, lsl #3	@ tmp535, _76, _76,
 7970 0790 C3EB4213 		rsb	r3, r3, r2, lsl #5	@ tmp537, _76, tmp535,
 7971 0794 E31A     		subs	r3, r4, r3	@ _76, tmp530, tmp537
 7972 0796 9CB2     		uxth	r4, r3	@ x, _76
 7973              	.L567:
 7974              	@ main.c:4204: 					if(p_Fifo1->rct) break;
 7975 0798 3C4B     		ldr	r3, .L647+56	@ tmp747,
 7976              	@ main.c:4173: 				while(dstBlock--){
 7977 079a 3A4A     		ldr	r2, .L647+48	@ tmp550,
 7978              	@ main.c:4204: 					if(p_Fifo1->rct) break;
 7979 079c 1B68     		ldr	r3, [r3]	@ p_Fifo1.237_77, p_Fifo1
 7980              	@ main.c:4203: 					strBlock++;
ARM GAS  /tmp/ccrMssCc.s 			page 141


 7981 079e 0136     		adds	r6, r6, #1	@ strBlock, strBlock,
 7982              	@ main.c:4204: 					if(p_Fifo1->rct) break;
 7983 07a0 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.237_77->rct
 7984 07a2 9BB2     		uxth	r3, r3	@ _78, p_Fifo1.237_77->rct
 7985 07a4 002B     		cmp	r3, #0	@ _78
 7986 07a6 3BD1     		bne	.L631	@
 7987              	@ main.c:4173: 				while(dstBlock--){
 7988 07a8 9642     		cmp	r6, r2	@ strBlock, tmp550
 7989 07aa 39D0     		beq	.L631	@,
 7990              	.L571:
 7991              	@ main.c:4175: 					d = mci_read_sect (strBlock,buffer,1);
 7992 07ac 0122     		movs	r2, #1	@,
 7993 07ae 3946     		mov	r1, r7	@, tmp614
 7994 07b0 3046     		mov	r0, r6	@, strBlock
 7995 07b2 FFF7FEFF 		bl	mmc_read_sect	@
 7996              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 7997 07b6 2D4A     		ldr	r2, .L647+24	@ tmp516,
 7998              	@ main.c:4184: 							if(!(strBlock%4096)){
 7999 07b8 C6F30B03 		ubfx	r3, r6, #0, #12	@ tmp517, strBlock,,
 8000              	@ main.c:4176: 					if(!d) {
 8001 07bc 0028     		cmp	r0, #0	@ tmp512
 8002 07be 32D0     		beq	.L641	@
 8003              	@ main.c:4182: 						if(!(strBlock%256)){
 8004 07c0 16F0FF0F 		tst	r6, #255	@ strBlock
 8005 07c4 E8D1     		bne	.L567	@,
 8006              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 8007 07c6 2A49     		ldr	r1, .L647+28	@ tmp743,
 8008 07c8 0D68     		ldr	r5, [r1]	@ Timt.84_378, Timt
 8009 07ca 9268     		ldr	r2, [r2, #8]	@ _379, MEM[(struct SysTick_Type *)3758153744B].VAL
 8010 07cc AD1A     		subs	r5, r5, r2	@ _380, Timt.84_378, _379
 8011 07ce 0895     		str	r5, [sp, #32]	@ _380, MEM[(volatile u32 *)&tim]
 8012              	@ main.c:4184: 							if(!(strBlock%4096)){
 8013 07d0 93B9     		cbnz	r3, .L568	@ tmp517,
 8014              	@ main.c:4185: 								UaPutS("\r\n Read OK ");
 8015 07d2 2F48     		ldr	r0, .L647+60	@,
 8016 07d4 FFF7FEFF 		bl	UaPutS	@
 8017              	@ main.c:4186: 								hex2uart(strBlock,  8);
 8018 07d8 0821     		movs	r1, #8	@,
 8019 07da 3046     		mov	r0, r6	@, strBlock
 8020 07dc FFF7FEFF 		bl	hex2uart	@
 8021              	@ main.c:4187: 								UaPutS(" y2 = " );
 8022 07e0 2C48     		ldr	r0, .L647+64	@,
 8023 07e2 FFF7FEFF 		bl	UaPutS	@
 8024              	@ main.c:4188: 								uint2uart(y1); UaPutS("\t" ); uint2uart(y2);
 8025 07e6 4046     		mov	r0, r8	@, y1
 8026 07e8 FFF7FEFF 		bl	uint2uart	@
 8027 07ec 2A48     		ldr	r0, .L647+68	@,
 8028 07ee FFF7FEFF 		bl	UaPutS	@
 8029 07f2 4046     		mov	r0, r8	@, y1
 8030 07f4 FFF7FEFF 		bl	uint2uart	@
 8031              	.L568:
 8032              	@ main.c:4192: 							y2 = tim/(3*TIM_MS);
 8033 07f8 284A     		ldr	r2, .L647+72	@ tmp744,
 8034 07fa EB08     		lsrs	r3, r5, #3	@ tmp524, _380,
 8035 07fc A2FB0323 		umull	r2, r3, r2, r3	@ tmp699, tmp525, tmp744, tmp524
 8036              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8037 0800 1A4A     		ldr	r2, .L647+24	@ tmp522,
ARM GAS  /tmp/ccrMssCc.s 			page 142


 8038              	@ main.c:4192: 							y2 = tim/(3*TIM_MS);
 8039 0802 5B0A     		lsrs	r3, r3, #9	@ _71, tmp525,
 8040              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8041 0804 9068     		ldr	r0, [r2, #8]	@ _381, MEM[(struct SysTick_Type *)3758153744B].VAL
 8042              	@ main.c:4194: 								TFT_dy( x, y1, y2, YELLOW, 0);
 8043 0806 5FFA88F1 		uxtb	r1, r8	@, y1
 8044 080a DAB2     		uxtb	r2, r3	@, _71
 8045              	@ main.c:4192: 							y2 = tim/(3*TIM_MS);
 8046 080c 1FFA83F8 		uxth	r8, r3	@ y2, _71
 8047              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8048 0810 174B     		ldr	r3, .L647+28	@ tmp745,
 8049 0812 1860     		str	r0, [r3]	@ _381, Timt
 8050              	@ main.c:4193: 							if(x){
 8051 0814 002C     		cmp	r4, #0	@ x
 8052 0816 ADD1     		bne	.L642	@
 8053              	@ main.c:4197: 								TFT_Clear(BLACK);
 8054 0818 2046     		mov	r0, r4	@, x
 8055 081a FFF7FEFF 		bl	TFT_Clear	@
 8056 081e B0E7     		b	.L570	@
 8057              	.L631:
 8058 0820 CDF81080 		str	r8, [sp, #16]	@ y1, %sfp
 8059 0824 16E4     		b	.L532	@
 8060              	.L641:
 8061 0826 0546     		mov	r5, r0	@ tmp512, tmp512
 8062              	@ main.c:4177: 						UaPutS("\r\n Read error = 0x");
 8063 0828 1D48     		ldr	r0, .L647+76	@,
 8064 082a CDF81080 		str	r8, [sp, #16]	@ y1, %sfp
 8065 082e FFF7FEFF 		bl	UaPutS	@
 8066              	@ main.c:4178: 						hex2uart(strBlock,8); hex2uart(d,2);
 8067 0832 3046     		mov	r0, r6	@, strBlock
 8068 0834 0821     		movs	r1, #8	@,
 8069 0836 FFF7FEFF 		bl	hex2uart	@
 8070 083a 2846     		mov	r0, r5	@, tmp512
 8071 083c 0221     		movs	r1, #2	@,
 8072 083e FFF7FEFF 		bl	hex2uart	@
 8073              	@ main.c:4179: 						break;
 8074 0842 07E4     		b	.L532	@
 8075              	.L530:
 8076              	@ main.c:3989: 	} else UaPutK("\r\nSD Card Init ERROR ");
 8077 0844 1748     		ldr	r0, .L647+80	@,
 8078 0846 FFF7FEFF 		bl	UaPutK	@
 8079 084a 174B     		ldr	r3, .L647+84	@ tmp612,
 8080 084c 0393     		str	r3, [sp, #12]	@ tmp612, %sfp
 8081 084e FFF7F2BB 		b	.L531	@
 8082              	.L648:
 8083 0852 00BF     		.align	2
 8084              	.L647:
 8085 0854 30000000 		.word	.LC78
 8086 0858 00000000 		.word	buffer.8844
 8087 085c 34000000 		.word	.LC79
 8088 0860 00020000 		.word	buffer.8844+512
 8089 0864 FC000000 		.word	.LC92
 8090 0868 398EE338 		.word	954437177
 8091 086c 10E000E0 		.word	-536813552
 8092 0870 00000000 		.word	Timt
 8093 0874 40000000 		.word	.LC81
 8094 0878 F4010000 		.word	.LC137
ARM GAS  /tmp/ccrMssCc.s 			page 143


 8095 087c 14020000 		.word	.LC139
 8096 0880 28020000 		.word	.LC140
 8097 0884 41420F00 		.word	1000001
 8098 0888 5B268B1C 		.word	478881371
 8099 088c 00000000 		.word	p_Fifo1
 8100 0890 50020000 		.word	.LC142
 8101 0894 5C020000 		.word	.LC143
 8102 0898 64020000 		.word	.LC144
 8103 089c CF0DD626 		.word	651562447
 8104 08a0 3C020000 		.word	.LC141
 8105 08a4 14000000 		.word	.LC111
 8106 08a8 00000000 		.word	CardType
 8107 08ac 3C000000 		.word	.LC80
 8108              		.size	MemCard_Menu, .-MemCard_Menu
 8109              		.section	.text.CopyClock,"ax",%progbits
 8110              		.align	1
 8111              		.p2align 2,,3
 8112              		.global	CopyClock
 8113              		.syntax unified
 8114              		.thumb
 8115              		.thumb_func
 8116              		.fpu softvfp
 8117              		.type	CopyClock, %function
 8118              	CopyClock:
 8119              		@ args = 0, pretend = 0, frame = 8
 8120              		@ frame_needed = 0, uses_anonymous_args = 0
 8121 0000 30B5     		push	{r4, r5, lr}	@
 8122 0002 0D46     		mov	r5, r1	@ lrtc, lrtc
 8123 0004 83B0     		sub	sp, sp, #12	@,,
 8124              	@ main.c:5058: void CopyClock(char *dczas, T_RTC *lrtc)	{
 8125 0006 0446     		mov	r4, r0	@ dczas, dczas
 8126              	@ main.c:5064: 		dczas += 0;	memcpy(dczas,unt2str(lrtc->yer,tbuf,4) ,4);
 8127 0008 6946     		mov	r1, sp	@,
 8128 000a E888     		ldrh	r0, [r5, #6]	@, lrtc_21(D)->yer
 8129 000c 0422     		movs	r2, #4	@,
 8130 000e FFF7FEFF 		bl	unt2str	@
 8131 0012 0368     		ldr	r3, [r0]	@ unaligned	@ tmp138, MEM[(char * {ref-all})_3]
 8132              	@ main.c:5065: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8133 0014 6946     		mov	r1, sp	@,
 8134              	@ main.c:5064: 		dczas += 0;	memcpy(dczas,unt2str(lrtc->yer,tbuf,4) ,4);
 8135 0016 2360     		str	r3, [r4]	@ unaligned	@ tmp138, MEM[(char * {ref-all})dczas_19(D)]
 8136              	@ main.c:5065: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8137 0018 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2	@, lrtc_21(D)->mon
 8138 001a 0222     		movs	r2, #2	@,
 8139 001c FFF7FEFF 		bl	unt2str	@
 8140 0020 0388     		ldrh	r3, [r0]	@ unaligned	@ _26, MEM[(char * {ref-all})_6]
 8141              	@ main.c:5066: 		dczas += 3; memcpy(dczas,unt2str(lrtc->mdy,tbuf,2) ,2);
 8142 0022 6946     		mov	r1, sp	@,
 8143              	@ main.c:5065: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8144 0024 A4F80530 		strh	r3, [r4, #5]	@ unaligned	@ _26, MEM[(char * {ref-all})dczas_19(D) + 5B]
 8145              	@ main.c:5066: 		dczas += 3; memcpy(dczas,unt2str(lrtc->mdy,tbuf,2) ,2);
 8146 0028 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2	@, lrtc_21(D)->mdy
 8147 002a 0222     		movs	r2, #2	@,
 8148 002c FFF7FEFF 		bl	unt2str	@
 8149 0030 0388     		ldrh	r3, [r0]	@ unaligned	@ _29, MEM[(char * {ref-all})_9]
 8150              	@ main.c:5067: 		dczas += 3; memcpy(dczas,unt2str(lrtc->hor,tbuf,2) ,2);
 8151 0032 6946     		mov	r1, sp	@,
ARM GAS  /tmp/ccrMssCc.s 			page 144


 8152              	@ main.c:5066: 		dczas += 3; memcpy(dczas,unt2str(lrtc->mdy,tbuf,2) ,2);
 8153 0034 2381     		strh	r3, [r4, #8]	@ unaligned	@ _29, MEM[(char * {ref-all})dczas_19(D) + 8B]
 8154              	@ main.c:5067: 		dczas += 3; memcpy(dczas,unt2str(lrtc->hor,tbuf,2) ,2);
 8155 0036 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2	@, lrtc_21(D)->hor
 8156 0038 0222     		movs	r2, #2	@,
 8157 003a FFF7FEFF 		bl	unt2str	@
 8158 003e 0388     		ldrh	r3, [r0]	@ unaligned	@ _32, MEM[(char * {ref-all})_12]
 8159              	@ main.c:5068: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8160 0040 6946     		mov	r1, sp	@,
 8161              	@ main.c:5067: 		dczas += 3; memcpy(dczas,unt2str(lrtc->hor,tbuf,2) ,2);
 8162 0042 A4F80B30 		strh	r3, [r4, #11]	@ unaligned	@ _32, MEM[(char * {ref-all})dczas_19(D) + 11B]
 8163              	@ main.c:5068: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8164 0046 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2	@, lrtc_21(D)->min
 8165 0048 0222     		movs	r2, #2	@,
 8166 004a FFF7FEFF 		bl	unt2str	@
 8167 004e 0388     		ldrh	r3, [r0]	@ unaligned	@ _35, MEM[(char * {ref-all})_15]
 8168              	@ main.c:5069: 		dczas += 3; memcpy(dczas,unt2str(lrtc->sec,tbuf,2) ,2);
 8169 0050 6946     		mov	r1, sp	@,
 8170              	@ main.c:5068: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8171 0052 E381     		strh	r3, [r4, #14]	@ unaligned	@ _35, MEM[(char * {ref-all})dczas_19(D) + 14B]
 8172              	@ main.c:5069: 		dczas += 3; memcpy(dczas,unt2str(lrtc->sec,tbuf,2) ,2);
 8173 0054 2878     		ldrb	r0, [r5]	@ zero_extendqisi2	@, lrtc_21(D)->sec
 8174 0056 0222     		movs	r2, #2	@,
 8175 0058 FFF7FEFF 		bl	unt2str	@
 8176 005c 0388     		ldrh	r3, [r0]	@ unaligned	@ _38, MEM[(char * {ref-all})_18]
 8177 005e A4F81130 		strh	r3, [r4, #17]	@ unaligned	@ _38, MEM[(char * {ref-all})dczas_19(D) + 17B]
 8178              	@ main.c:5071: 	}
 8179 0062 03B0     		add	sp, sp, #12	@,,
 8180              		@ sp needed	@
 8181 0064 30BD     		pop	{r4, r5, pc}	@
 8182              		.size	CopyClock, .-CopyClock
 8183 0066 00BF     		.section	.text.Intro2,"ax",%progbits
 8184              		.align	1
 8185              		.p2align 2,,3
 8186              		.global	Intro2
 8187              		.syntax unified
 8188              		.thumb
 8189              		.thumb_func
 8190              		.fpu softvfp
 8191              		.type	Intro2, %function
 8192              	Intro2:
 8193              		@ args = 0, pretend = 0, frame = 32
 8194              		@ frame_needed = 0, uses_anonymous_args = 0
 8195 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 8196              	@ main.c:2933: 		uint32_t tim=0;
 8197 0004 0025     		movs	r5, #0	@ tmp236,
 8198              	@ main.c:5250: 		DMA1_Channel1->CCR =  DMA_CCR1_PL_0 | DMA_CCR1_MSIZE_0 | DMA_CCR1_PSIZE_0 | DMA_CC
 8199 0006 41F2A256 		movw	r6, #5538	@ tmp246,
 8200              	@ main.c:2925: void Intro2(void){	
 8201 000a 8BB0     		sub	sp, sp, #44	@,,
 8202              	@ main.c:2928: 		UaPutS("\r\n Start programu... \r\n"); 
 8203 000c B448     		ldr	r0, .L708	@,
 8204 000e FFF7FEFF 		bl	UaPutS	@
 8205              	@ main.c:2955: 		UaPutS("\r\n Debug0..."); 
 8206 0012 B448     		ldr	r0, .L708+4	@,
 8207              	@ main.c:2933: 		uint32_t tim=0;
 8208 0014 0995     		str	r5, [sp, #36]	@ tmp236, tim
ARM GAS  /tmp/ccrMssCc.s 			page 145


 8209              	@ main.c:2955: 		UaPutS("\r\n Debug0..."); 
 8210 0016 FFF7FEFF 		bl	UaPutS	@
 8211              	@ main.c:2956: 		RtcInit();
 8212 001a FFF7FEFF 		bl	RtcInit	@
 8213              	@ main.c:2957: 		rtc_GetTime(1,&Rtc);
 8214 001e B249     		ldr	r1, .L708+8	@,
 8215 0020 0120     		movs	r0, #1	@,
 8216 0022 FFF7FEFF 		bl	rtc_GetTime	@
 8217              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 8218 0026 B148     		ldr	r0, .L708+12	@ tmp249,
 8219              	@ main.c:5245: 		RCC->AHBENR   |= RCC_AHBENR_DMA1EN;					// enable clock for DMA1
 8220 0028 B149     		ldr	r1, .L708+16	@ tmp239,
 8221              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 8222 002a 0446     		mov	r4, r0	@ tmp252, tmp249
 8223              	@ main.c:5245: 		RCC->AHBENR   |= RCC_AHBENR_DMA1EN;					// enable clock for DMA1
 8224 002c 4A69     		ldr	r2, [r1, #20]	@ _190, MEM[(struct RCC_TypeDef *)1073876992B].AHBENR
 8225              	@ main.c:5246: 		DMA1_Channel1->CCR  = 0;										// Disable channel
 8226 002e B14B     		ldr	r3, .L708+20	@ tmp241,
 8227              	@ main.c:5245: 		RCC->AHBENR   |= RCC_AHBENR_DMA1EN;					// enable clock for DMA1
 8228 0030 42F00102 		orr	r2, r2, #1	@ _191, _190,
 8229 0034 4A61     		str	r2, [r1, #20]	@ _191, MEM[(struct RCC_TypeDef *)1073876992B].AHBENR
 8230              	@ main.c:5248: 		DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;	// Source address:
 8231 0036 A1F56B41 		sub	r1, r1, #60160	@ tmp244, tmp244,
 8232 003a B439     		subs	r1, r1, #180	@ tmp244, tmp244,
 8233              	@ main.c:5263: 		GPIOB->CRH   |= 0x00000090;	// PB9 out
 8234 003c AE4A     		ldr	r2, .L708+24	@ tmp247,
 8235              	@ main.c:5246: 		DMA1_Channel1->CCR  = 0;										// Disable channel
 8236 003e 1D60     		str	r5, [r3]	@ tmp236, MEM[(struct DMA_Channel_TypeDef *)1073872904B].CCR
 8237              	@ main.c:5248: 		DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;	// Source address:
 8238 0040 9960     		str	r1, [r3, #8]	@ tmp244, MEM[(struct DMA_Channel_TypeDef *)1073872904B].CPAR
 8239              	@ main.c:5250: 		DMA1_Channel1->CCR =  DMA_CCR1_PL_0 | DMA_CCR1_MSIZE_0 | DMA_CCR1_PSIZE_0 | DMA_CC
 8240 0042 1E60     		str	r6, [r3]	@ tmp246, MEM[(struct DMA_Channel_TypeDef *)1073872904B].CCR
 8241              	@ main.c:5263: 		GPIOB->CRH   |= 0x00000090;	// PB9 out
 8242 0044 5368     		ldr	r3, [r2, #4]	@ _192, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 8243              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 8244 0046 AD49     		ldr	r1, .L708+28	@ tmp500,
 8245              	@ main.c:5263: 		GPIOB->CRH   |= 0x00000090;	// PB9 out
 8246 0048 43F09003 		orr	r3, r3, #144	@ _193, _192,
 8247 004c 5360     		str	r3, [r2, #4]	@ _193, MEM[(struct GPIO_TypeDef *)1073810432B].CRH
 8248              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 8249 004e 8368     		ldr	r3, [r0, #8]	@ _194, MEM[(struct SysTick_Type *)3758153744B].VAL
 8250 0050 0B60     		str	r3, [r1]	@ _194, delay_us
 8251              	.L652:
 8252              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 8253 0052 0B68     		ldr	r3, [r1]	@ delay_us.85_195, delay_us
 8254 0054 A268     		ldr	r2, [r4, #8]	@ _196, MEM[(struct SysTick_Type *)3758153744B].VAL
 8255 0056 9B1A     		subs	r3, r3, r2	@ tmp253, delay_us.85_195, _196
 8256 0058 592B     		cmp	r3, #89	@ tmp253,
 8257 005a FAD9     		bls	.L652	@,
 8258              	@ main.c:5270: 		TIM4->CCMR2 = TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8259 005c 4FF4C045 		mov	r5, #24576	@ tmp270,
 8260              	@ main.c:5271: 		TIM4->CCER  = TIM_CCER_CC4E;
 8261 0060 4FF48050 		mov	r0, #4096	@ tmp273,
 8262              	@ main.c:5266: 		TIM4->PSC   = 100-1;
 8263 0064 4FF0630E 		mov	lr, #99	@ tmp258,
 8264              	@ main.c:5267:     TIM4->ARR   = 120-1;
 8265 0068 4FF0770C 		mov	ip, #119	@ tmp261,
ARM GAS  /tmp/ccrMssCc.s 			page 146


 8266              	@ main.c:5268:     TIM4->CCR4  = 10;		//width pulse on PB9 out channel
 8267 006c 0A27     		movs	r7, #10	@ tmp264,
 8268              	@ main.c:5269: 		TIM4->CCMR1 = 0;
 8269 006e 0026     		movs	r6, #0	@ tmp267,
 8270              	@ main.c:5265: 		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8271 0070 9F4B     		ldr	r3, .L708+16	@ tmp254,
 8272 0072 DA69     		ldr	r2, [r3, #28]	@ _198, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 8273 0074 42F00402 		orr	r2, r2, #4	@ _199, _198,
 8274 0078 DA61     		str	r2, [r3, #28]	@ _199, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 8275              	@ main.c:5266: 		TIM4->PSC   = 100-1;
 8276 007a A14A     		ldr	r2, .L708+32	@ tmp256,
 8277 007c A2F828E0 		strh	lr, [r2, #40]	@ movhi	@ tmp258, MEM[(struct TIM_TypeDef *)1073743872B].PSC
 8278              	@ main.c:5267:     TIM4->ARR   = 120-1;
 8279 0080 A2F82CC0 		strh	ip, [r2, #44]	@ movhi	@ tmp261, MEM[(struct TIM_TypeDef *)1073743872B].ARR
 8280              	@ main.c:5268:     TIM4->CCR4  = 10;		//width pulse on PB9 out channel
 8281 0084 A2F84070 		strh	r7, [r2, #64]	@ movhi	@ tmp264, MEM[(struct TIM_TypeDef *)1073743872B].CCR4
 8282              	@ main.c:5269: 		TIM4->CCMR1 = 0;
 8283 0088 1683     		strh	r6, [r2, #24]	@ movhi	@ tmp267, MEM[(struct TIM_TypeDef *)1073743872B].CCMR1
 8284              	@ main.c:5270: 		TIM4->CCMR2 = TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8285 008a 9583     		strh	r5, [r2, #28]	@ movhi	@ tmp270, MEM[(struct TIM_TypeDef *)1073743872B].CCMR2
 8286              	@ main.c:5271: 		TIM4->CCER  = TIM_CCER_CC4E;
 8287 008c 1084     		strh	r0, [r2, #32]	@ movhi	@ tmp273, MEM[(struct TIM_TypeDef *)1073743872B].CCER
 8288              	@ main.c:5275: 		RCC->APB2ENR  |= RCC_APB2ENR_ADC1EN;			// enable clock for ADC1
 8289 008e 9A69     		ldr	r2, [r3, #24]	@ _200, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 8290              	@ main.c:5277: 		GPIOA->CRL = (GPIOA->CRL & 0xffff0000);
 8291 0090 05F18045 		add	r5, r5, #1073741824	@ tmp278, tmp278,
 8292              	@ main.c:5275: 		RCC->APB2ENR  |= RCC_APB2ENR_ADC1EN;			// enable clock for ADC1
 8293 0094 42F40072 		orr	r2, r2, #512	@ _201, _200,
 8294 0098 9A61     		str	r2, [r3, #24]	@ _201, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 8295              	@ main.c:5276: 		RCC->CFGR 		|= RCC_CFGR_ADCPRE_DIV4;  	// 2/4/6/8 str98
 8296 009a 5868     		ldr	r0, [r3, #4]	@ _202, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 8297              	@ main.c:5277: 		GPIOA->CRL = (GPIOA->CRL & 0xffff0000);
 8298 009c 05F52845 		add	r5, r5, #43008	@ tmp278, tmp278,
 8299              	@ main.c:5276: 		RCC->CFGR 		|= RCC_CFGR_ADCPRE_DIV4;  	// 2/4/6/8 str98
 8300 00a0 40F48040 		orr	r0, r0, #16384	@ _203, _202,
 8301 00a4 5860     		str	r0, [r3, #4]	@ _203, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 8302              	@ main.c:5277: 		GPIOA->CRL = (GPIOA->CRL & 0xffff0000);
 8303 00a6 2B68     		ldr	r3, [r5]	@ _204, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 8304              	@ main.c:5280: 		ADC1->CR1 |= ADC_CR1_SCAN;	// multi channel mode
 8305 00a8 964A     		ldr	r2, .L708+36	@ tmp281,
 8306              	@ main.c:5277: 		GPIOA->CRL = (GPIOA->CRL & 0xffff0000);
 8307 00aa 1B0C     		lsrs	r3, r3, #16	@ _205, _204,
 8308 00ac 1B04     		lsls	r3, r3, #16	@ _205, _205,
 8309 00ae 2B60     		str	r3, [r5]	@ _205, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 8310              	@ main.c:5280: 		ADC1->CR1 |= ADC_CR1_SCAN;	// multi channel mode
 8311 00b0 5368     		ldr	r3, [r2, #4]	@ _206, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 8312              	@ main.c:5281: 		ADC1->CR2 =  ADC_CR2_DMA | ADC_CR2_ADON | ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL_2 | ADC
 8313 00b2 9548     		ldr	r0, .L708+40	@ tmp284,
 8314              	@ main.c:5280: 		ADC1->CR1 |= ADC_CR1_SCAN;	// multi channel mode
 8315 00b4 43F48073 		orr	r3, r3, #256	@ _207, _206,
 8316 00b8 5360     		str	r3, [r2, #4]	@ _207, MEM[(struct ADC_TypeDef *)1073816576B].CR1
 8317              	@ main.c:5281: 		ADC1->CR2 =  ADC_CR2_DMA | ADC_CR2_ADON | ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL_2 | ADC
 8318 00ba 9060     		str	r0, [r2, #8]	@ tmp284, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8319              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 8320 00bc A368     		ldr	r3, [r4, #8]	@ _208, MEM[(struct SysTick_Type *)3758153744B].VAL
 8321              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 8322 00be 8B4D     		ldr	r5, .L708+12	@ tmp288,
ARM GAS  /tmp/ccrMssCc.s 			page 147


 8323              	@ inc/tool/delay.h:104: 		delay_us = SysTick->VAL; 
 8324 00c0 0B60     		str	r3, [r1]	@ _208, delay_us
 8325              	.L653:
 8326              	@ inc/tool/delay.h:105: 		while( STCLK_US*us > (delay_us - SysTick->VAL) );
 8327 00c2 0B68     		ldr	r3, [r1]	@ delay_us.85_209, delay_us
 8328 00c4 AA68     		ldr	r2, [r5, #8]	@ _210, MEM[(struct SysTick_Type *)3758153744B].VAL
 8329 00c6 9B1A     		subs	r3, r3, r2	@ tmp289, delay_us.85_209, _210
 8330 00c8 082B     		cmp	r3, #8	@ tmp289,
 8331 00ca FAD9     		bls	.L653	@,
 8332              	@ main.c:5291: 		ADC1->SMPR2 = 7<<0*3 | 7<<1*3 ;
 8333 00cc 3F21     		movs	r1, #63	@ tmp295,
 8334              	@ main.c:5286: 		ADC1->SQR1  = 0<<20;
 8335 00ce 0024     		movs	r4, #0	@ tmp291,
 8336              	@ main.c:5289: 		ADC1->SQR3  = 0<<1*5 | 1<<0*5 ;
 8337 00d0 0120     		movs	r0, #1	@ tmp293,
 8338              	@ main.c:5286: 		ADC1->SQR1  = 0<<20;
 8339 00d2 8C4B     		ldr	r3, .L708+36	@ tmp290,
 8340              	@ main.c:5294: 		while(ADC1->CR2 & ADC_CR2_RSTCAL);		// wait for reset
 8341 00d4 1A46     		mov	r2, r3	@ tmp298, tmp290
 8342              	@ main.c:5286: 		ADC1->SQR1  = 0<<20;
 8343 00d6 DC62     		str	r4, [r3, #44]	@ tmp291, MEM[(struct ADC_TypeDef *)1073816576B].SQR1
 8344              	@ main.c:5289: 		ADC1->SQR3  = 0<<1*5 | 1<<0*5 ;
 8345 00d8 5863     		str	r0, [r3, #52]	@ tmp293, MEM[(struct ADC_TypeDef *)1073816576B].SQR3
 8346              	@ main.c:5291: 		ADC1->SMPR2 = 7<<0*3 | 7<<1*3 ;
 8347 00da 1961     		str	r1, [r3, #16]	@ tmp295, MEM[(struct ADC_TypeDef *)1073816576B].SMPR2
 8348              	@ main.c:5293: 		ADC1->CR2 |= ADC_CR2_RSTCAL;					// reset calibration
 8349 00dc 9968     		ldr	r1, [r3, #8]	@ _212, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8350 00de 41F00801 		orr	r1, r1, #8	@ _213, _212,
 8351 00e2 9960     		str	r1, [r3, #8]	@ _213, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8352              	.L654:
 8353              	@ main.c:5294: 		while(ADC1->CR2 & ADC_CR2_RSTCAL);		// wait for reset
 8354 00e4 9368     		ldr	r3, [r2, #8]	@ _214, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8355 00e6 1807     		lsls	r0, r3, #28	@, _214,
 8356 00e8 FCD4     		bmi	.L654	@,
 8357              	@ main.c:5295: 		ADC1->CR2 |= ADC_CR2_CAL;							// start calibration
 8358 00ea 9168     		ldr	r1, [r2, #8]	@ _216, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8359              	@ main.c:5296: 		while(ADC1->CR2 & ADC_CR2_CAL);				// wait till calibration is done
 8360 00ec 854B     		ldr	r3, .L708+36	@ tmp302,
 8361              	@ main.c:5295: 		ADC1->CR2 |= ADC_CR2_CAL;							// start calibration
 8362 00ee 41F00401 		orr	r1, r1, #4	@ _217, _216,
 8363 00f2 9160     		str	r1, [r2, #8]	@ _217, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8364              	.L655:
 8365              	@ main.c:5296: 		while(ADC1->CR2 & ADC_CR2_CAL);				// wait till calibration is done
 8366 00f4 9A68     		ldr	r2, [r3, #8]	@ _218, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8367 00f6 5107     		lsls	r1, r2, #29	@, _218,
 8368 00f8 FCD4     		bmi	.L655	@,
 8369              	@ main.c:5297: 		ADC1->CR2 |= ADC_CR2_ADON;						// start conversion
 8370 00fa 9A68     		ldr	r2, [r3, #8]	@ _220, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8371              	@ main.c:5298: 		while( !( ADC1->SR & ADC_SR_STRT ));
 8372 00fc 8149     		ldr	r1, .L708+36	@ tmp306,
 8373              	@ main.c:5297: 		ADC1->CR2 |= ADC_CR2_ADON;						// start conversion
 8374 00fe 42F00102 		orr	r2, r2, #1	@ _221, _220,
 8375 0102 9A60     		str	r2, [r3, #8]	@ _221, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 8376              	.L656:
 8377              	@ main.c:5298: 		while( !( ADC1->SR & ADC_SR_STRT ));
 8378 0104 0B68     		ldr	r3, [r1]	@ _222, MEM[(struct ADC_TypeDef *)1073816576B].SR
 8379 0106 DA06     		lsls	r2, r3, #27	@, _222,
ARM GAS  /tmp/ccrMssCc.s 			page 148


 8380 0108 FCD5     		bpl	.L656	@,
 8381              	@ main.c:5301: 		TIM3->CR1 = TIM_CR1_CEN;
 8382 010a 0122     		movs	r2, #1	@ tmp310,
 8383 010c 7F4B     		ldr	r3, .L708+44	@ tmp308,
 8384              	@ main.c:5302: 		while( ! (ADC1->SR & ADC_SR_EOC) );
 8385 010e 7D49     		ldr	r1, .L708+36	@ tmp311,
 8386              	@ main.c:5301: 		TIM3->CR1 = TIM_CR1_CEN;
 8387 0110 1A80     		strh	r2, [r3]	@ movhi	@ tmp310, MEM[(struct TIM_TypeDef *)1073742848B].CR1
 8388              	.L657:
 8389              	@ main.c:5302: 		while( ! (ADC1->SR & ADC_SR_EOC) );
 8390 0112 0B68     		ldr	r3, [r1]	@ _224, MEM[(struct ADC_TypeDef *)1073816576B].SR
 8391 0114 9B07     		lsls	r3, r3, #30	@, _224,
 8392 0116 FCD5     		bpl	.L657	@,
 8393              	@ main.c:2960: 		f7_dma1 = 0;
 8394 0118 0026     		movs	r6, #0	@ tmp315,
 8395              	@ main.c:2981: 		TFT_Fill(wXmin-1,wYmin-1,wXmax+1,wYmin-1,DGRAY);	// pozioma dolna
 8396 011a 47F6EF35 		movw	r5, #31727	@ tmp316,
 8397              	@ main.c:2960: 		f7_dma1 = 0;
 8398 011e 7C4C     		ldr	r4, .L708+48	@ tmp314,
 8399              	@ main.c:2981: 		TFT_Fill(wXmin-1,wYmin-1,wXmax+1,wYmin-1,DGRAY);	// pozioma dolna
 8400 0120 3346     		mov	r3, r6	@, tmp315
 8401              	@ main.c:2960: 		f7_dma1 = 0;
 8402 0122 6401     		lsls	r4, r4, #5	@ _3, tmp314,
 8403 0124 E661     		str	r6, [r4, #28]	@ tmp315, *_5
 8404              	@ main.c:2981: 		TFT_Fill(wXmin-1,wYmin-1,wXmax+1,wYmin-1,DGRAY);	// pozioma dolna
 8405 0126 3146     		mov	r1, r6	@, tmp315
 8406 0128 0095     		str	r5, [sp]	@ tmp316,
 8407 012a 40F23F12 		movw	r2, #319	@,
 8408 012e 1E20     		movs	r0, #30	@,
 8409 0130 FFF7FEFF 		bl	TFT_Fill	@
 8410              	@ main.c:2982: 		TFT_Fill(wXmin-1,wYmax+1,wXmax+1,wYmax+1,DGRAY);	// pozioma górna
 8411 0134 E423     		movs	r3, #228	@,
 8412 0136 0095     		str	r5, [sp]	@ tmp316,
 8413 0138 1946     		mov	r1, r3	@,
 8414 013a 40F23F12 		movw	r2, #319	@,
 8415 013e 1E20     		movs	r0, #30	@,
 8416 0140 FFF7FEFF 		bl	TFT_Fill	@
 8417              	@ main.c:2983: 		TFT_Fill(wXmin-1,wYmin-1,wXmin-1,wYmax+1,DGRAY);	// pionowa lewa
 8418 0144 1E22     		movs	r2, #30	@,
 8419 0146 3146     		mov	r1, r6	@, tmp315
 8420 0148 1046     		mov	r0, r2	@,
 8421 014a 0095     		str	r5, [sp]	@ tmp316,
 8422 014c E423     		movs	r3, #228	@,
 8423 014e FFF7FEFF 		bl	TFT_Fill	@
 8424              	@ main.c:2984: 		TFT_Fill(wXmax+1,wYmin-1,wXmax+1,wYmax+1,DGRAY);	// pionowa prawa
 8425 0152 40F23F12 		movw	r2, #319	@,
 8426 0156 3146     		mov	r1, r6	@, tmp315
 8427 0158 1046     		mov	r0, r2	@,
 8428 015a 0095     		str	r5, [sp]	@ tmp316,
 8429 015c E423     		movs	r3, #228	@,
 8430 015e FFF7FEFF 		bl	TFT_Fill	@
 8431              	@ main.c:2988: 			yb[f] =wYmin;	
 8432 0162 0123     		movs	r3, #1	@ tmp321,
 8433 0164 DFF8DCA1 		ldr	r10, .L708+100	@ tmp494,
 8434              	@ main.c:2989: 			yn[f] =wYmin;
 8435 0168 6A4D     		ldr	r5, .L708+52	@ tmp495,
 8436              	@ main.c:3005: 		UaPutS("\r\n wXlen ");	sint2uart(wXlen); 
ARM GAS  /tmp/ccrMssCc.s 			page 149


 8437 016a 6B48     		ldr	r0, .L708+56	@,
 8438              	@ main.c:2988: 			yb[f] =wYmin;	
 8439 016c 8AF80030 		strb	r3, [r10]	@ tmp321, yb
 8440              	@ main.c:2989: 			yn[f] =wYmin;
 8441 0170 2B70     		strb	r3, [r5]	@ tmp321, yn
 8442              	@ main.c:3005: 		UaPutS("\r\n wXlen ");	sint2uart(wXlen); 
 8443 0172 FFF7FEFF 		bl	UaPutS	@
 8444 0176 4FF49070 		mov	r0, #288	@,
 8445 017a FFF7FEFF 		bl	sint2uart	@
 8446              	@ main.c:3008: 		DMA1_Channel1->CNDTR = wXlen*nMES;					//Buffor size 
 8447 017e 4FF49070 		mov	r0, #288	@ tmp330,
 8448              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 8449 0182 4FF4006C 		mov	ip, #2048	@ tmp332,
 8450              	@ main.c:3031: 			dma_buf[i]=0x10;
 8451 0186 1027     		movs	r7, #16	@ tmp345,
 8452              	@ main.c:3007: 		DMA1_Channel1->CMAR = (uint32_t)dma_buf;	 	//Destination address:
 8453 0188 5A4A     		ldr	r2, .L708+20	@ tmp328,
 8454              	@ main.c:3016: 		TIM4->ARR   = BKP->DR42; //1200-1
 8455 018a 3346     		mov	r3, r6	@ ivtmp.717, tmp315
 8456              	@ main.c:3007: 		DMA1_Channel1->CMAR = (uint32_t)dma_buf;	 	//Destination address:
 8457 018c 634E     		ldr	r6, .L708+60	@ tmp496,
 8458              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 8459 018e 6449     		ldr	r1, .L708+64	@ tmp331,
 8460              	@ main.c:3007: 		DMA1_Channel1->CMAR = (uint32_t)dma_buf;	 	//Destination address:
 8461 0190 D660     		str	r6, [r2, #12]	@ tmp496, MEM[(struct DMA_Channel_TypeDef *)1073872904B].CMAR
 8462              	@ main.c:3008: 		DMA1_Channel1->CNDTR = wXlen*nMES;					//Buffor size 
 8463 0192 5060     		str	r0, [r2, #4]	@ tmp330, MEM[(struct DMA_Channel_TypeDef *)1073872904B].CNDTR
 8464              	@ main.c:3015: 		TIM4->PSC   = BKP->DR41; //1000-1
 8465 0194 6348     		ldr	r0, .L708+68	@ tmp333,
 8466              	@ ./inc/core_cm3.h:1504:   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); 
 8467 0196 C1F800C0 		str	ip, [r1]	@ tmp332, MEM[(struct NVIC_Type *)3758153984B].ISER
 8468              	@ main.c:3015: 		TIM4->PSC   = BKP->DR41; //1000-1
 8469 019a B0F8B820 		ldrh	r2, [r0, #184]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8470 019e 5849     		ldr	r1, .L708+32	@ tmp336,
 8471 01a0 92B2     		uxth	r2, r2	@ _9, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8472 01a2 0A85     		strh	r2, [r1, #40]	@ movhi	@ _9, MEM[(struct TIM_TypeDef *)1073743872B].PSC
 8473              	@ main.c:3016: 		TIM4->ARR   = BKP->DR42; //1200-1
 8474 01a4 B0F8BC20 		ldrh	r2, [r0, #188]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR42
 8475 01a8 92B2     		uxth	r2, r2	@ _10, MEM[(struct BKP_TypeDef *)1073769472B].DR42
 8476 01aa 8A85     		strh	r2, [r1, #44]	@ movhi	@ _10, MEM[(struct TIM_TypeDef *)1073743872B].ARR
 8477              	.L658:
 8478              	@ main.c:3031: 			dma_buf[i]=0x10;
 8479 01ac 26F81370 		strh	r7, [r6, r3, lsl #1]	@ movhi	@ tmp345, dma_buf
 8480 01b0 0133     		adds	r3, r3, #1	@ ivtmp.717, ivtmp.717,
 8481              	@ main.c:3028: 		for(u16 i=0;i<wXlen;i++){
 8482 01b2 B3F5907F 		cmp	r3, #288	@ ivtmp.717,
 8483 01b6 F9D1     		bne	.L658	@,
 8484              	@ main.c:2935: 		u16 x,c_dma1,r_dma_buf,idx,c_num,n1=10,cnt_dma=0;
 8485 01b8 4FF00008 		mov	r8, #0	@ cnt_dma,
 8486 01bc 04F10C03 		add	r3, r4, #12	@ _82, _3,
 8487 01c0 0593     		str	r3, [sp, #20]	@ _82, %sfp
 8488              	.L659:
 8489              	@ main.c:3036: 			if( STCLK_MS*BKP->DR41 < (trg0 - SysTick->VAL) ){
 8490 01c2 42F22830 		movw	r0, #9000	@ tmp367,
 8491 01c6 584F     		ldr	r7, .L708+72	@ tmp523,
 8492 01c8 08F10102 		add	r2, r8, #1	@ tmp351, cnt_dma,
 8493 01cc A7FB0213 		umull	r1, r3, r7, r2	@ tmp518, tmp352, tmp523, tmp351
ARM GAS  /tmp/ccrMssCc.s 			page 150


 8494 01d0 5449     		ldr	r1, .L708+68	@ tmp524,
 8495 01d2 464C     		ldr	r4, .L708+12	@ tmp526,
 8496 01d4 B1F8B810 		ldrh	r1, [r1, #184]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8497 01d8 9B09     		lsrs	r3, r3, #6	@ _95, tmp352,
 8498 01da 00FB01F0 		mul	r0, r0, r1	@ tmp366, tmp367, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8499 01de 5349     		ldr	r1, .L708+76	@ tmp525,
 8500 01e0 03EBC303 		add	r3, r3, r3, lsl #3	@ tmp356, _95, _95,
 8501 01e4 0968     		ldr	r1, [r1]	@ trg0.194_16, trg0
 8502 01e6 A468     		ldr	r4, [r4, #8]	@ _17, MEM[(struct SysTick_Type *)3758153744B].VAL
 8503 01e8 A2EB4313 		sub	r3, r2, r3, lsl #5	@ _95, tmp351, tmp356,
 8504 01ec 091B     		subs	r1, r1, r4	@ tmp368, trg0.194_16, _17
 8505 01ee 8842     		cmp	r0, r1	@ tmp366, tmp368
 8506 01f0 1FFA83F9 		uxth	r9, r3	@ _152, _95
 8507 01f4 4246     		mov	r2, r8	@ _91, cnt_dma
 8508 01f6 13D2     		bcs	.L660	@,
 8509              	@ main.c:3039: 				dma_buf[cnt_dma]=0x1;
 8510 01f8 0120     		movs	r0, #1	@ tmp373,
 8511 01fa 1A18     		adds	r2, r3, r0	@ tmp374, _95,
 8512 01fc A7FB0271 		umull	r7, r1, r7, r2	@ tmp519, tmp375, tmp527, tmp374
 8513 0200 8909     		lsrs	r1, r1, #6	@ _49, tmp375,
 8514 0202 01EBC101 		add	r1, r1, r1, lsl #3	@ tmp379, _49, _49,
 8515 0206 A2EB4111 		sub	r1, r2, r1, lsl #5	@ _49, tmp374, tmp379,
 8516              	@ main.c:3037: 				trg0 = SysTick->VAL;
 8517 020a 384A     		ldr	r2, .L708+12	@ tmp528,
 8518 020c 474C     		ldr	r4, .L708+76	@ tmp529,
 8519 020e 9268     		ldr	r2, [r2, #8]	@ _19, MEM[(struct SysTick_Type *)3758153744B].VAL
 8520              	@ main.c:3038: 				cnt_dma=(cnt_dma+1)%wXlen;
 8521 0210 C846     		mov	r8, r9	@ cnt_dma, _152
 8522              	@ main.c:3037: 				trg0 = SysTick->VAL;
 8523 0212 2260     		str	r2, [r4]	@ _19, trg0
 8524              	@ main.c:3039: 				dma_buf[cnt_dma]=0x1;
 8525 0214 26F81300 		strh	r0, [r6, r3, lsl #1]	@ movhi	@ tmp373, dma_buf
 8526 0218 1A46     		mov	r2, r3	@ _91, _95
 8527 021a 0B46     		mov	r3, r1	@ _95, _49
 8528 021c 1FFA81F9 		uxth	r9, r1	@ _152, _95
 8529              	.L660:
 8530              	@ main.c:3044: 			if (c_dma1 != wXlen-cnt_dma){
 8531 0220 0499     		ldr	r1, [sp, #16]	@ c_dma1, %sfp
 8532 0222 C2F59072 		rsb	r2, r2, #288	@ tmp389, _91,
 8533 0226 9142     		cmp	r1, r2	@ c_dma1, tmp389
 8534 0228 24D1     		bne	.L701	@,
 8535              	.L661:
 8536              	@ main.c:3151: 			if( STCLK_MS*500 < (trg1 - SysTick->VAL) ){
 8537 022a 414B     		ldr	r3, .L708+80	@ tmp543,
 8538 022c 2F4A     		ldr	r2, .L708+12	@ tmp544,
 8539 022e 1B68     		ldr	r3, [r3]	@ trg1.201_60, trg1
 8540 0230 9268     		ldr	r2, [r2, #8]	@ _61, MEM[(struct SysTick_Type *)3758153744B].VAL
 8541 0232 9B1A     		subs	r3, r3, r2	@ tmp438, trg1.201_60, _61
 8542 0234 3F4A     		ldr	r2, .L708+84	@ tmp545,
 8543 0236 9342     		cmp	r3, r2	@ tmp438, tmp545
 8544 0238 00F2E680 		bhi	.L702	@,
 8545              	.L671:
 8546              	@ main.c:3169: 			if(p_Fifo1->rct){	// Wywolanie interfejsu szeregowego gdy odebrano znak
 8547 023c 3E4B     		ldr	r3, .L708+88	@ tmp553,
 8548 023e 1B68     		ldr	r3, [r3]	@ p_Fifo1.203_72, p_Fifo1
 8549 0240 9B88     		ldrh	r3, [r3, #4]	@, p_Fifo1.203_72->rct
 8550 0242 9BB2     		uxth	r3, r3	@ _73, p_Fifo1.203_72->rct
ARM GAS  /tmp/ccrMssCc.s 			page 151


 8551 0244 002B     		cmp	r3, #0	@ _73
 8552 0246 40F0C780 		bne	.L703	@
 8553              	.L673:
 8554              	@ main.c:3206: 			if(f3_rtc_1sec){	// Aktualizacja zegara
 8555 024a 059A     		ldr	r2, [sp, #20]	@ _82, %sfp
 8556 024c 1368     		ldr	r3, [r2]	@ _83, *_82
 8557 024e 002B     		cmp	r3, #0	@ _83
 8558 0250 B7D0     		beq	.L659	@
 8559              	@ main.c:3207: 				f3_rtc_1sec = 0;
 8560 0252 0020     		movs	r0, #0	@ tmp478,
 8561              	@ main.c:3209: 				rtc_GetTime(0, &Rtc);
 8562 0254 2449     		ldr	r1, .L708+8	@,
 8563              	@ main.c:3207: 				f3_rtc_1sec = 0;
 8564 0256 1060     		str	r0, [r2]	@ tmp478, *_82
 8565              	@ main.c:3209: 				rtc_GetTime(0, &Rtc);
 8566 0258 FFF7FEFF 		bl	rtc_GetTime	@
 8567              	@ main.c:3210: 				CopyClock(tbuf,&Rtc); TFT_txt(tbuf,180, 229,YELLOW);
 8568 025c 2249     		ldr	r1, .L708+8	@,
 8569 025e 3748     		ldr	r0, .L708+92	@,
 8570 0260 FFF7FEFF 		bl	CopyClock	@
 8571 0264 4FF6E073 		movw	r3, #65504	@,
 8572 0268 E522     		movs	r2, #229	@,
 8573 026a B421     		movs	r1, #180	@,
 8574 026c 3348     		ldr	r0, .L708+92	@,
 8575 026e FFF7FEFF 		bl	TFT_txt	@
 8576 0272 A6E7     		b	.L659	@
 8577              	.L701:
 8578              	@ main.c:3049: 				dma_buf[cnt_dma]=0x1;
 8579 0274 4FF0010B 		mov	fp, #1	@ tmp393,
 8580              	@ main.c:3081: 				TFT_Fill(wXmin+(wXmax-wXmin)/2,wYmin-1,wXmin+(wXmax-wXmin)/2,wYmax+1,DGRAY);	// 
 8581 0278 AE22     		movs	r2, #174	@,
 8582 027a 47F6EF37 		movw	r7, #31727	@ tmp398,
 8583              	@ main.c:3049: 				dma_buf[cnt_dma]=0x1;
 8584 027e 26F813B0 		strh	fp, [r6, r3, lsl #1]	@ movhi	@ tmp393, dma_buf
 8585              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 8586 0282 1A48     		ldr	r0, .L708+12	@ tmp533,
 8587 0284 2E4B     		ldr	r3, .L708+96	@ tmp532,
 8588              	@ main.c:3046: 				c_dma1 = wXlen-cnt_dma;
 8589 0286 C8F59078 		rsb	r8, r8, #288	@ tmp390, cnt_dma,
 8590              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 8591 028a 1B68     		ldr	r3, [r3]	@ Timt.84_184, Timt
 8592 028c 8168     		ldr	r1, [r0, #8]	@ _185, MEM[(struct SysTick_Type *)3758153744B].VAL
 8593              	@ main.c:3046: 				c_dma1 = wXlen-cnt_dma;
 8594 028e 1FFA88F4 		uxth	r4, r8	@ c_dma1, tmp390
 8595              	@ inc/tool/delay.h:94: 		*tim = (Timt - SysTick->VAL);
 8596 0292 5B1A     		subs	r3, r3, r1	@ _186, Timt.84_184, _185
 8597 0294 0993     		str	r3, [sp, #36]	@ _186, MEM[(volatile u32 *)&tim]
 8598              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8599 0296 D0F808C0 		ldr	ip, [r0, #8]	@ _183, MEM[(struct SysTick_Type *)3758153744B].VAL
 8600              	@ main.c:3046: 				c_dma1 = wXlen-cnt_dma;
 8601 029a 0494     		str	r4, [sp, #16]	@ c_dma1, %sfp
 8602              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8603 029c 284C     		ldr	r4, .L708+96	@ tmp537,
 8604              	@ main.c:3081: 				TFT_Fill(wXmin+(wXmax-wXmin)/2,wYmin-1,wXmin+(wXmax-wXmin)/2,wYmax+1,DGRAY);	// 
 8605 029e 1046     		mov	r0, r2	@,
 8606 02a0 0097     		str	r7, [sp]	@ tmp398,
 8607 02a2 E423     		movs	r3, #228	@,
ARM GAS  /tmp/ccrMssCc.s 			page 152


 8608              	@ inc/tool/delay.h:91: 		Timt = SysTick->VAL;
 8609 02a4 C4F800C0 		str	ip, [r4]	@ _183, Timt
 8610              	@ main.c:3081: 				TFT_Fill(wXmin+(wXmax-wXmin)/2,wYmin-1,wXmin+(wXmax-wXmin)/2,wYmax+1,DGRAY);	// 
 8611 02a8 0021     		movs	r1, #0	@,
 8612 02aa FFF7FEFF 		bl	TFT_Fill	@
 8613              	@ main.c:3082: 				TFT_Fill(wXmin-1,(wYmax-wYmin)/2,wXmax+1,(wYmax-wYmin)/2,DGRAY);						// pozioma
 8614 02ae 7123     		movs	r3, #113	@,
 8615 02b0 40F23F12 		movw	r2, #319	@,
 8616 02b4 1946     		mov	r1, r3	@,
 8617 02b6 1E20     		movs	r0, #30	@,
 8618 02b8 0097     		str	r7, [sp]	@ tmp398,
 8619 02ba FFF7FEFF 		bl	TFT_Fill	@
 8620              	@ main.c:3084: 				TFT_SetWindow(wXmin,wYmin,wXmax,wYmax);
 8621 02be 5946     		mov	r1, fp	@, tmp393
 8622 02c0 E323     		movs	r3, #227	@,
 8623 02c2 4FF49F72 		mov	r2, #318	@,
 8624 02c6 1F20     		movs	r0, #31	@,
 8625 02c8 FFF7FEFF 		bl	TFT_SetWindow	@
 8626 02cc 09F1FF33 		add	r3, r9, #-1	@ tmp504, _152,
 8627 02d0 0024     		movs	r4, #0	@ ivtmp.710,
 8628 02d2 2978     		ldrb	r1, [r5]	@ zero_extendqisi2	@ pretmp_47, yn
 8629 02d4 09F21F1B 		addw	fp, r9, #287	@ tmp503, _152,
 8630 02d8 0393     		str	r3, [sp, #12]	@ tmp504, %sfp
 8631              	@ main.c:3138: 						else {	yn[i]=wYmax-wYmin;		}
 8632 02da 4FF0E208 		mov	r8, #226	@ tmp505,
 8633 02de 46E0     		b	.L662	@
 8634              	.L709:
 8635              		.align	2
 8636              	.L708:
 8637 02e0 00000000 		.word	.LC156
 8638 02e4 18000000 		.word	.LC157
 8639 02e8 00000000 		.word	Rtc
 8640 02ec 10E000E0 		.word	-536813552
 8641 02f0 00100240 		.word	1073876992
 8642 02f4 08000240 		.word	1073872904
 8643 02f8 000C0140 		.word	1073810432
 8644 02fc 00000000 		.word	delay_us
 8645 0300 00080040 		.word	1073743872
 8646 0304 00240140 		.word	1073816576
 8647 0308 01011A00 		.word	1704193
 8648 030c 00040040 		.word	1073742848
 8649 0310 00001001 		.word	.LANCHOR17+17825792
 8650 0314 00000000 		.word	.LANCHOR31
 8651 0318 28000000 		.word	.LC158
 8652 031c 00000000 		.word	.LANCHOR32
 8653 0320 00E100E0 		.word	-536813312
 8654 0324 006C0040 		.word	1073769472
 8655 0328 398EE338 		.word	954437177
 8656 032c 00000000 		.word	trg0
 8657 0330 00000000 		.word	trg1
 8658 0334 20AA4400 		.word	4500000
 8659 0338 00000000 		.word	p_Fifo1
 8660 033c 00000000 		.word	.LANCHOR34
 8661 0340 00000000 		.word	Timt
 8662 0344 00000000 		.word	.LANCHOR30
 8663              	.L679:
 8664              	@ main.c:3137: 						yn[i]=wYmin + (r_dma_buf);	}
ARM GAS  /tmp/ccrMssCc.s 			page 153


 8665 0348 0133     		adds	r3, r3, #1	@ tmp423, _43,
 8666              	@ main.c:3142: 					if(x==wXlen-2){
 8667 034a B4F58F7F 		cmp	r4, #286	@ ivtmp.710,
 8668              	@ main.c:3137: 						yn[i]=wYmin + (r_dma_buf);	}
 8669 034e 2B70     		strb	r3, [r5]	@ tmp423, yn
 8670              	@ main.c:3142: 					if(x==wXlen-2){
 8671 0350 20D0     		beq	.L704	@,
 8672              	.L668:
 8673              	@ main.c:3086: 				for(x=0;x<wXlen;x++){
 8674 0352 40F21F13 		movw	r3, #287	@ tmp435,
 8675 0356 9C42     		cmp	r4, r3	@ ivtmp.710, tmp435
 8676 0358 3CD0     		beq	.L705	@,
 8677              	@ main.c:3108: 					if( x>0 && x< wXlen-0 ){
 8678 035a B4F58F7F 		cmp	r4, #286	@ ivtmp.710,
 8679 035e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ prephitmp_27, yn
 8680 0360 1DD9     		bls	.L669	@,
 8681 0362 671C     		adds	r7, r4, #1	@ tmp406, ivtmp.710,
 8682 0364 BFB2     		uxth	r7, r7	@ ivtmp.710, tmp406
 8683              	@ main.c:3117: 					if(x>1){
 8684 0366 012F     		cmp	r7, #1	@ ivtmp.710,
 8685 0368 25D1     		bne	.L706	@,
 8686              	.L664:
 8687              	@ main.c:3039: 				dma_buf[cnt_dma]=0x1;
 8688 036a 3C46     		mov	r4, r7	@ ivtmp.710, ivtmp.710
 8689 036c 1146     		mov	r1, r2	@ pretmp_47, prephitmp_27
 8690              	.L662:
 8691              	@ main.c:3128: 					if(x<cnt_dma)	idx=(0    +cnt_dma-x-1)*nMES; 
 8692 036e A145     		cmp	r9, r4	@ _152, ivtmp.710
 8693 0370 8ABF     		itet	hi
 8694 0372 039B     		ldrhi	r3, [sp, #12]	@ tmp504, %sfp
 8695 0374 ABEB0402 		subls	r2, fp, r4	@ tmp420, tmp503, ivtmp.710
 8696 0378 1A1B     		subhi	r2, r3, r4	@ tmp417, tmp504, ivtmp.710
 8697 037a 92B2     		uxth	r2, r2	@ idx, tmp420
 8698              	@ main.c:3133: 						r_dma_buf =(dma_buf[i+idx]-rz[i])*mn[i]/dl[i]; 
 8699 037c 36F81230 		ldrh	r3, [r6, r2, lsl #1]	@, dma_buf
 8700              	@ main.c:3134: 						yb[i]=yn[i];
 8701 0380 8AF80010 		strb	r1, [r10]	@ pretmp_47, yb
 8702              	@ main.c:3133: 						r_dma_buf =(dma_buf[i+idx]-rz[i])*mn[i]/dl[i]; 
 8703 0384 9BB2     		uxth	r3, r3	@ _43, tmp486
 8704              	@ main.c:3136: 						if(r_dma_buf < (wYmax-wYmin) ){
 8705 0386 E12B     		cmp	r3, #225	@ _43,
 8706 0388 DED9     		bls	.L679	@,
 8707              	@ main.c:3142: 					if(x==wXlen-2){
 8708 038a B4F58F7F 		cmp	r4, #286	@ ivtmp.710,
 8709              	@ main.c:3138: 						else {	yn[i]=wYmax-wYmin;		}
 8710 038e 85F80080 		strb	r8, [r5]	@ tmp505, yn
 8711              	@ main.c:3142: 					if(x==wXlen-2){
 8712 0392 DED1     		bne	.L668	@,
 8713              	.L704:
 8714              	@ main.c:3144: 							val[i]=dma_buf[i+idx];
 8715 0394 36F81230 		ldrh	r3, [r6, r2, lsl #1]	@, dma_buf
 8716 0398 3D48     		ldr	r0, .L710	@ tmp542,
 8717 039a 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ prephitmp_27, yn
 8718 039c 0380     		strh	r3, [r0]	@ movhi	@ tmp431, val
 8719              	.L669:
 8720              	@ main.c:3111: 							TFT_dy(wXmin+x-1, yb[i], yn[i],BLACK,WID);
 8721 039e 0023     		movs	r3, #0	@ tmp404,
ARM GAS  /tmp/ccrMssCc.s 			page 154


 8722 03a0 04F11F00 		add	r0, r4, #31	@ tmp402, ivtmp.710,
 8723 03a4 671C     		adds	r7, r4, #1	@ tmp406, ivtmp.710,
 8724 03a6 0093     		str	r3, [sp]	@ tmp404,
 8725 03a8 80B2     		uxth	r0, r0	@, tmp402
 8726 03aa BFB2     		uxth	r7, r7	@ ivtmp.710, tmp406
 8727 03ac FFF7FEFF 		bl	TFT_dy	@
 8728              	@ main.c:3117: 					if(x>1){
 8729 03b0 012F     		cmp	r7, #1	@ ivtmp.710,
 8730 03b2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ prephitmp_27, yn
 8731 03b4 D9D0     		beq	.L664	@,
 8732              	.L706:
 8733              	@ main.c:3119: 							TFT_dy(wXmin+x-2, yb[i], yn[i],ColCon[6+i],WID);
 8734 03b6 4FF0000C 		mov	ip, #0	@ tmp413,
 8735 03ba 364B     		ldr	r3, .L710+4	@ tmp540,
 8736 03bc 04F11E00 		add	r0, r4, #30	@ tmp411, ivtmp.710,
 8737 03c0 9B89     		ldrh	r3, [r3, #12]	@ ColCon, ColCon
 8738 03c2 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2	@ yb, yb
 8739 03c6 80B2     		uxth	r0, r0	@, tmp411
 8740 03c8 CDF800C0 		str	ip, [sp]	@ tmp413,
 8741 03cc FFF7FEFF 		bl	TFT_dy	@
 8742 03d0 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2	@ prephitmp_27, yn
 8743 03d2 CAE7     		b	.L664	@
 8744              	.L705:
 8745 03d4 C846     		mov	r8, r9	@ cnt_dma, _152
 8746 03d6 28E7     		b	.L661	@
 8747              	.L703:
 8748              	@ main.c:3170: 				UART_getChar(&chr);
 8749 03d8 0DF11F00 		add	r0, sp, #31	@ tmp554,,
 8750 03dc FFF7FEFF 		bl	UART_getChar	@
 8751              	@ main.c:3171: 				if(chr=='q'){
 8752 03e0 9DF81F30 		ldrb	r3, [sp, #31]	@ zero_extendqisi2	@ chr.204_74, chr
 8753 03e4 712B     		cmp	r3, #113	@ chr.204_74,
 8754 03e6 31D0     		beq	.L707	@,
 8755              	@ main.c:3185: 				if(chr=='b'){	
 8756 03e8 622B     		cmp	r3, #98	@ chr.204_74,
 8757 03ea 7FF42EAF 		bne	.L673	@,
 8758              	.L676:
 8759              	@ main.c:3187: 					TFT_Clear(BLACK);
 8760 03ee 0020     		movs	r0, #0	@,
 8761 03f0 FFF7FEFF 		bl	TFT_Clear	@
 8762              	@ main.c:3188: 					TFT_Fill(wXmin-1,wYmin-1,wXmin-1,wYmax+1,DGRAY);	// pionowa lewa
 8763 03f4 47F6EF33 		movw	r3, #31727	@ tmp477,
 8764 03f8 1E22     		movs	r2, #30	@,
 8765 03fa 0093     		str	r3, [sp]	@ tmp477,
 8766 03fc 1046     		mov	r0, r2	@,
 8767 03fe E423     		movs	r3, #228	@,
 8768 0400 0021     		movs	r1, #0	@,
 8769 0402 FFF7FEFF 		bl	TFT_Fill	@
 8770 0406 20E7     		b	.L673	@
 8771              	.L702:
 8772              	@ main.c:3152: 				trg1 = SysTick->VAL;
 8773 0408 234B     		ldr	r3, .L710+8	@ tmp546,
 8774              	@ main.c:3162: 				TFT_txt(int2str(val[0],str,4,0),30,229-12*0,WHITE);
 8775 040a 2148     		ldr	r0, .L710	@ tmp548,
 8776              	@ main.c:3152: 				trg1 = SysTick->VAL;
 8777 040c 9C68     		ldr	r4, [r3, #8]	@ _63, MEM[(struct SysTick_Type *)3758153744B].VAL
 8778 040e 234F     		ldr	r7, .L710+12	@ tmp549,
ARM GAS  /tmp/ccrMssCc.s 			page 155


 8779              	@ main.c:3162: 				TFT_txt(int2str(val[0],str,4,0),30,229-12*0,WHITE);
 8780 0410 08A9     		add	r1, sp, #32	@ tmp547,,
 8781 0412 0023     		movs	r3, #0	@,
 8782 0414 0422     		movs	r2, #4	@,
 8783 0416 0088     		ldrh	r0, [r0]	@, val
 8784              	@ main.c:3152: 				trg1 = SysTick->VAL;
 8785 0418 3C60     		str	r4, [r7]	@ _63, trg1
 8786              	@ main.c:3162: 				TFT_txt(int2str(val[0],str,4,0),30,229-12*0,WHITE);
 8787 041a FFF7FEFF 		bl	int2str	@
 8788 041e 4FF6FF73 		movw	r3, #65535	@,
 8789 0422 E522     		movs	r2, #229	@,
 8790 0424 1E21     		movs	r1, #30	@,
 8791 0426 FFF7FEFF 		bl	TFT_txt	@
 8792              	@ main.c:3164: 				TFT_txt(int2str(tim/TIM_MS,str,5,0),110,229-12*0,ColCon[6]);
 8793 042a 099A     		ldr	r2, [sp, #36]	@ tim, tim
 8794 042c 1C49     		ldr	r1, .L710+16	@ tmp550,
 8795 042e 0023     		movs	r3, #0	@,
 8796 0430 A1FB0220 		umull	r2, r0, r1, r2	@ tmp520, tmp448, tmp550, tim
 8797 0434 08A9     		add	r1, sp, #32	@ tmp551,,
 8798 0436 0522     		movs	r2, #5	@,
 8799 0438 400B     		lsrs	r0, r0, #13	@, tmp448,
 8800 043a FFF7FEFF 		bl	int2str	@
 8801 043e 154B     		ldr	r3, .L710+4	@ tmp552,
 8802 0440 E522     		movs	r2, #229	@,
 8803 0442 9B89     		ldrh	r3, [r3, #12]	@, ColCon
 8804 0444 6E21     		movs	r1, #110	@,
 8805 0446 FFF7FEFF 		bl	TFT_txt	@
 8806 044a F7E6     		b	.L671	@
 8807              	.L707:
 8808              	@ main.c:3172: 					UaPutS("\r\n TIM4->PSC/ARR="); 	sint2uart(TIM4->PSC);	UaPutC('/'); c_num=UART_g
 8809 044c 154C     		ldr	r4, .L710+20	@ tmp457,
 8810 044e 1648     		ldr	r0, .L710+24	@,
 8811 0450 FFF7FEFF 		bl	UaPutS	@
 8812 0454 208D     		ldrh	r0, [r4, #40]	@, MEM[(struct TIM_TypeDef *)1073743872B].PSC
 8813 0456 FFF7FEFF 		bl	sint2uart	@
 8814 045a 2F20     		movs	r0, #47	@,
 8815 045c FFF7FEFF 		bl	UaPutC	@
 8816 0460 FFF7FEFF 		bl	UART_getNum	@
 8817 0464 80B2     		uxth	r0, r0	@ c_num,
 8818              	@ main.c:3173: 					if(c_num){ 
 8819 0466 60B1     		cbz	r0, .L675	@ c_num,
 8820              	@ main.c:3174: 						BKP->DR41=c_num; TIM4->PSC=BKP->DR41;
 8821 0468 104A     		ldr	r2, .L710+28	@ tmp555,
 8822 046a A2F8B800 		strh	r0, [r2, #184]	@ movhi	@ c_num, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8823 046e B2F8B830 		ldrh	r3, [r2, #184]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8824 0472 9BB2     		uxth	r3, r3	@ _78, MEM[(struct BKP_TypeDef *)1073769472B].DR41
 8825 0474 2385     		strh	r3, [r4, #40]	@ movhi	@ _78, MEM[(struct TIM_TypeDef *)1073743872B].PSC
 8826              	@ main.c:3175: 						BKP->DR42=c_num; TIM4->ARR=BKP->DR42;
 8827 0476 A2F8BC00 		strh	r0, [r2, #188]	@ movhi	@ c_num, MEM[(struct BKP_TypeDef *)1073769472B].DR42
 8828 047a B2F8BC30 		ldrh	r3, [r2, #188]	@, MEM[(struct BKP_TypeDef *)1073769472B].DR42
 8829 047e 9BB2     		uxth	r3, r3	@ _79, MEM[(struct BKP_TypeDef *)1073769472B].DR42
 8830 0480 A385     		strh	r3, [r4, #44]	@ movhi	@ _79, MEM[(struct TIM_TypeDef *)1073743872B].ARR
 8831              	.L675:
 8832              	@ main.c:3181: 					UaPutS("\r\n");
 8833 0482 0B48     		ldr	r0, .L710+32	@,
 8834 0484 FFF7FEFF 		bl	UaPutS	@
 8835              	@ main.c:3182: 					chr='b';
ARM GAS  /tmp/ccrMssCc.s 			page 156


 8836 0488 6223     		movs	r3, #98	@ tmp475,
 8837 048a 8DF81F30 		strb	r3, [sp, #31]	@ tmp475, chr
 8838 048e AEE7     		b	.L676	@
 8839              	.L711:
 8840              		.align	2
 8841              	.L710:
 8842 0490 00000000 		.word	.LANCHOR33
 8843 0494 00000000 		.word	ColCon
 8844 0498 10E000E0 		.word	-536813552
 8845 049c 00000000 		.word	trg1
 8846 04a0 D55204E9 		.word	-385592619
 8847 04a4 00080040 		.word	1073743872
 8848 04a8 34000000 		.word	.LC159
 8849 04ac 006C0040 		.word	1073769472
 8850 04b0 04000000 		.word	.LC13
 8851              		.size	Intro2, .-Intro2
 8852              		.section	.text.CopyTime,"ax",%progbits
 8853              		.align	1
 8854              		.p2align 2,,3
 8855              		.global	CopyTime
 8856              		.syntax unified
 8857              		.thumb
 8858              		.thumb_func
 8859              		.fpu softvfp
 8860              		.type	CopyTime, %function
 8861              	CopyTime:
 8862              		@ args = 0, pretend = 0, frame = 8
 8863              		@ frame_needed = 0, uses_anonymous_args = 0
 8864 0000 30B5     		push	{r4, r5, lr}	@
 8865 0002 0D46     		mov	r5, r1	@ lrtc, lrtc
 8866 0004 83B0     		sub	sp, sp, #12	@,,
 8867              	@ main.c:5072: void CopyTime(char *dczas,  T_RTC *lrtc)	{
 8868 0006 0446     		mov	r4, r0	@ dczas, dczas
 8869              	@ main.c:5077: 		dczas += 0; memcpy(dczas,unt2str(lrtc->hor,tbuf,2) ,2);
 8870 0008 01A9     		add	r1, sp, #4	@ tmp139,,
 8871 000a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2	@, lrtc_12(D)->hor
 8872 000c 0222     		movs	r2, #2	@,
 8873 000e FFF7FEFF 		bl	unt2str	@
 8874 0012 0388     		ldrh	r3, [r0]	@ unaligned	@ _14, MEM[(char * {ref-all})_3]
 8875              	@ main.c:5078: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8876 0014 01A9     		add	r1, sp, #4	@ tmp140,,
 8877              	@ main.c:5077: 		dczas += 0; memcpy(dczas,unt2str(lrtc->hor,tbuf,2) ,2);
 8878 0016 2380     		strh	r3, [r4]	@ unaligned	@ _14, MEM[(char * {ref-all})dczas_10(D)]
 8879              	@ main.c:5078: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8880 0018 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2	@, lrtc_12(D)->min
 8881 001a 0222     		movs	r2, #2	@,
 8882 001c FFF7FEFF 		bl	unt2str	@
 8883 0020 0388     		ldrh	r3, [r0]	@ unaligned	@ _17, MEM[(char * {ref-all})_6]
 8884              	@ main.c:5079: 		dczas += 3; memcpy(dczas,unt2str(lrtc->sec,tbuf,2) ,2);
 8885 0022 01A9     		add	r1, sp, #4	@ tmp141,,
 8886              	@ main.c:5078: 		dczas += 3; memcpy(dczas,unt2str(lrtc->min,tbuf,2) ,2);
 8887 0024 A4F80330 		strh	r3, [r4, #3]	@ unaligned	@ _17, MEM[(char * {ref-all})dczas_10(D) + 3B]
 8888              	@ main.c:5079: 		dczas += 3; memcpy(dczas,unt2str(lrtc->sec,tbuf,2) ,2);
 8889 0028 2878     		ldrb	r0, [r5]	@ zero_extendqisi2	@, lrtc_12(D)->sec
 8890 002a 0222     		movs	r2, #2	@,
 8891 002c FFF7FEFF 		bl	unt2str	@
 8892 0030 0388     		ldrh	r3, [r0]	@ unaligned	@ _20, MEM[(char * {ref-all})_9]
ARM GAS  /tmp/ccrMssCc.s 			page 157


 8893 0032 E380     		strh	r3, [r4, #6]	@ unaligned	@ _20, MEM[(char * {ref-all})dczas_10(D) + 6B]
 8894              	@ main.c:5080: 	}
 8895 0034 03B0     		add	sp, sp, #12	@,,
 8896              		@ sp needed	@
 8897 0036 30BD     		pop	{r4, r5, pc}	@
 8898              		.size	CopyTime, .-CopyTime
 8899              		.section	.text.CopyDate,"ax",%progbits
 8900              		.align	1
 8901              		.p2align 2,,3
 8902              		.global	CopyDate
 8903              		.syntax unified
 8904              		.thumb
 8905              		.thumb_func
 8906              		.fpu softvfp
 8907              		.type	CopyDate, %function
 8908              	CopyDate:
 8909              		@ args = 0, pretend = 0, frame = 8
 8910              		@ frame_needed = 0, uses_anonymous_args = 0
 8911 0000 30B5     		push	{r4, r5, lr}	@
 8912 0002 0D46     		mov	r5, r1	@ lrtc, lrtc
 8913 0004 83B0     		sub	sp, sp, #12	@,,
 8914              	@ main.c:5081: void CopyDate(char *dczas,  T_RTC *lrtc)	{
 8915 0006 0446     		mov	r4, r0	@ dczas, dczas
 8916              	@ main.c:5084: 		dczas += 0;	memcpy(dczas,unt2str(lrtc->yer,tbuf,4) ,4);
 8917 0008 6946     		mov	r1, sp	@,
 8918 000a E888     		ldrh	r0, [r5, #6]	@, lrtc_12(D)->yer
 8919 000c 0422     		movs	r2, #4	@,
 8920 000e FFF7FEFF 		bl	unt2str	@
 8921 0012 0368     		ldr	r3, [r0]	@ unaligned	@ tmp126, MEM[(char * {ref-all})_3]
 8922              	@ main.c:5085: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8923 0014 6946     		mov	r1, sp	@,
 8924              	@ main.c:5084: 		dczas += 0;	memcpy(dczas,unt2str(lrtc->yer,tbuf,4) ,4);
 8925 0016 2360     		str	r3, [r4]	@ unaligned	@ tmp126, MEM[(char * {ref-all})dczas_10(D)]
 8926              	@ main.c:5085: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8927 0018 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2	@, lrtc_12(D)->mon
 8928 001a 0222     		movs	r2, #2	@,
 8929 001c FFF7FEFF 		bl	unt2str	@
 8930 0020 0388     		ldrh	r3, [r0]	@ unaligned	@ _17, MEM[(char * {ref-all})_6]
 8931              	@ main.c:5086: 		dczas += 3; memcpy(dczas,unt2str(lrtc->mdy,tbuf,2) ,2);
 8932 0022 6946     		mov	r1, sp	@,
 8933              	@ main.c:5085: 		dczas += 5; memcpy(dczas,unt2str(lrtc->mon,tbuf,2) ,2);
 8934 0024 A4F80530 		strh	r3, [r4, #5]	@ unaligned	@ _17, MEM[(char * {ref-all})dczas_10(D) + 5B]
 8935              	@ main.c:5086: 		dczas += 3; memcpy(dczas,unt2str(lrtc->mdy,tbuf,2) ,2);
 8936 0028 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2	@, lrtc_12(D)->mdy
 8937 002a 0222     		movs	r2, #2	@,
 8938 002c FFF7FEFF 		bl	unt2str	@
 8939 0030 0388     		ldrh	r3, [r0]	@ unaligned	@ _20, MEM[(char * {ref-all})_9]
 8940 0032 2381     		strh	r3, [r4, #8]	@ unaligned	@ _20, MEM[(char * {ref-all})dczas_10(D) + 8B]
 8941              	@ main.c:5087: 	}
 8942 0034 03B0     		add	sp, sp, #12	@,,
 8943              		@ sp needed	@
 8944 0036 30BD     		pop	{r4, r5, pc}	@
 8945              		.size	CopyDate, .-CopyDate
 8946              		.section	.text.Zegarek,"ax",%progbits
 8947              		.align	1
 8948              		.p2align 2,,3
 8949              		.global	Zegarek
ARM GAS  /tmp/ccrMssCc.s 			page 158


 8950              		.syntax unified
 8951              		.thumb
 8952              		.thumb_func
 8953              		.fpu softvfp
 8954              		.type	Zegarek, %function
 8955              	Zegarek:
 8956              		@ args = 0, pretend = 0, frame = 24
 8957              		@ frame_needed = 0, uses_anonymous_args = 0
 8958 0000 F0B5     		push	{r4, r5, r6, r7, lr}	@
 8959 0002 87B0     		sub	sp, sp, #28	@,,
 8960              	@ main.c:969: 		char tbuf[9] ={"00-00-00"};
 8961 0004 6C46     		mov	r4, sp	@ tmp115,
 8962 0006 134A     		ldr	r2, .L721	@ tmp114,
 8963              	@ main.c:970: 		char dbuf[11]={"0000-00-00"}; // data
 8964 0008 03AB     		add	r3, sp, #12	@ tmp137,,
 8965              	@ main.c:969: 		char tbuf[9] ={"00-00-00"};
 8966 000a 07CA     		ldm	r2, {r0, r1, r2}	@ tmp114,,,
 8967 000c 03C4     		stmia	r4!, {r0, r1}	@ tmp115,,
 8968              	@ main.c:970: 		char dbuf[11]={"0000-00-00"}; // data
 8969 000e 1249     		ldr	r1, .L721+4	@ tmp117,
 8970              	@ main.c:969: 		char tbuf[9] ={"00-00-00"};
 8971 0010 2270     		strb	r2, [r4]	@, tbuf
 8972              	@ main.c:970: 		char dbuf[11]={"0000-00-00"}; // data
 8973 0012 07C9     		ldm	r1, {r0, r1, r2}	@ tmp117,,,
 8974 0014 03C3     		stmia	r3!, {r0, r1}	@ tmp118,,
 8975 0016 110C     		lsrs	r1, r2, #16	@ tmp120,,
 8976 0018 23F8022B 		strh	r2, [r3], #2	@ movhi	@, dbuf
 8977 001c 1970     		strb	r1, [r3]	@ tmp120, dbuf
 8978              	@ main.c:972: 		RtcInit();
 8979 001e FFF7FEFF 		bl	RtcInit	@
 8980 0022 0E4D     		ldr	r5, .L721+8	@ tmp133,
 8981              	@ main.c:980: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 8982 0024 0E4C     		ldr	r4, .L721+12	@ tmp123,
 8983 0026 0F4E     		ldr	r6, .L721+16	@ tmp125,
 8984              	@ main.c:982: 				rtc_GetTime(1,&Rtc);
 8985 0028 0F4F     		ldr	r7, .L721+20	@ tmp136,
 8986              	.L717:
 8987              	@ main.c:980: 			if(STCLK_MS*1000 < (trg0 - SysTick->VAL)){
 8988 002a 2B68     		ldr	r3, [r5]	@ trg0.95_1, trg0
 8989 002c A268     		ldr	r2, [r4, #8]	@ _2, MEM[(struct SysTick_Type *)3758153744B].VAL
 8990 002e 9B1A     		subs	r3, r3, r2	@ tmp124, trg0.95_1, _2
 8991 0030 B342     		cmp	r3, r6	@ tmp124, tmp125
 8992 0032 FAD9     		bls	.L717	@,
 8993              	@ main.c:981: 				trg0  = SysTick->VAL;
 8994 0034 A368     		ldr	r3, [r4, #8]	@ _4, MEM[(struct SysTick_Type *)3758153744B].VAL
 8995              	@ main.c:982: 				rtc_GetTime(1,&Rtc);
 8996 0036 3946     		mov	r1, r7	@, tmp136
 8997 0038 0120     		movs	r0, #1	@,
 8998              	@ main.c:981: 				trg0  = SysTick->VAL;
 8999 003a 2B60     		str	r3, [r5]	@ _4, trg0
 9000              	@ main.c:982: 				rtc_GetTime(1,&Rtc);
 9001 003c FFF7FEFF 		bl	rtc_GetTime	@
 9002              	@ main.c:983: 				CopyTime(tbuf,&Rtc);
 9003 0040 3946     		mov	r1, r7	@, tmp136
 9004 0042 6846     		mov	r0, sp	@,
 9005 0044 FFF7FEFF 		bl	CopyTime	@
 9006              	@ main.c:984: 				CopyDate(dbuf,&Rtc);
ARM GAS  /tmp/ccrMssCc.s 			page 159


 9007 0048 3946     		mov	r1, r7	@, tmp136
 9008 004a 03A8     		add	r0, sp, #12	@ tmp138,,
 9009 004c FFF7FEFF 		bl	CopyDate	@
 9010 0050 EBE7     		b	.L717	@
 9011              	.L722:
 9012 0052 00BF     		.align	2
 9013              	.L721:
 9014 0054 00000000 		.word	.LC160
 9015 0058 0C000000 		.word	.LC161
 9016 005c 00000000 		.word	trg0
 9017 0060 10E000E0 		.word	-536813552
 9018 0064 40548900 		.word	9000000
 9019 0068 00000000 		.word	Rtc
 9020              		.size	Zegarek, .-Zegarek
 9021              		.section	.text.SysTick_Handler,"ax",%progbits
 9022              		.align	1
 9023              		.p2align 2,,3
 9024              		.global	SysTick_Handler
 9025              		.syntax unified
 9026              		.thumb
 9027              		.thumb_func
 9028              		.fpu softvfp
 9029              		.type	SysTick_Handler, %function
 9030              	SysTick_Handler:
 9031              		@ args = 0, pretend = 0, frame = 0
 9032              		@ frame_needed = 0, uses_anonymous_args = 0
 9033              		@ link register save eliminated.
 9034              	@ main.c:5129: 		N = Timt + STCLK_LD; Timt = N;
 9035 0000 1448     		ldr	r0, .L724	@ tmp130,
 9036 0002 154B     		ldr	r3, .L724+4	@ tmp131,
 9037 0004 0268     		ldr	r2, [r0]	@ Timt.248_1, Timt
 9038              	@ main.c:5131: 		n = delay_us + STCLK_LD; delay_us = n;
 9039 0006 1549     		ldr	r1, .L724+8	@ tmp133,
 9040              	@ main.c:5129: 		N = Timt + STCLK_LD; Timt = N;
 9041 0008 1A44     		add	r2, r2, r3	@ N, tmp131
 9042 000a 0260     		str	r2, [r0]	@ N, Timt
 9043              	@ main.c:5131: 		n = delay_us + STCLK_LD; delay_us = n;
 9044 000c 0A68     		ldr	r2, [r1]	@ delay_us.249_2, delay_us
 9045              	@ main.c:5135: 		n = (Tim0 + STCLK_LD); Tim0 = n;
 9046 000e 1448     		ldr	r0, .L724+12	@ tmp136,
 9047              	@ main.c:5131: 		n = delay_us + STCLK_LD; delay_us = n;
 9048 0010 1A44     		add	r2, r2, r3	@ _3, tmp131
 9049 0012 0A60     		str	r2, [r1]	@ _3, delay_us
 9050              	@ main.c:5135: 		n = (Tim0 + STCLK_LD); Tim0 = n;
 9051 0014 0268     		ldr	r2, [r0]	@ Tim0.251_4, Tim0
 9052              	@ main.c:5136: 		n = (Tim1 + STCLK_LD); Tim1 = n;
 9053 0016 1349     		ldr	r1, .L724+16	@ tmp139,
 9054              	@ main.c:5135: 		n = (Tim0 + STCLK_LD); Tim0 = n;
 9055 0018 1A44     		add	r2, r2, r3	@ _5, tmp131
 9056 001a 0260     		str	r2, [r0]	@ _5, Tim0
 9057              	@ main.c:5136: 		n = (Tim1 + STCLK_LD); Tim1 = n;
 9058 001c 0A68     		ldr	r2, [r1]	@ Tim1.253_6, Tim1
 9059              	@ main.c:5138: 		n = (trg0 + STCLK_LD); trg0 = n;
 9060 001e 1248     		ldr	r0, .L724+20	@ tmp142,
 9061              	@ main.c:5136: 		n = (Tim1 + STCLK_LD); Tim1 = n;
 9062 0020 1A44     		add	r2, r2, r3	@ _7, tmp131
 9063 0022 0A60     		str	r2, [r1]	@ _7, Tim1
ARM GAS  /tmp/ccrMssCc.s 			page 160


 9064              	@ main.c:5138: 		n = (trg0 + STCLK_LD); trg0 = n;
 9065 0024 0268     		ldr	r2, [r0]	@ trg0.255_8, trg0
 9066              	@ main.c:5139: 		n = (trg1 + STCLK_LD); trg1 = n;
 9067 0026 1149     		ldr	r1, .L724+24	@ tmp145,
 9068              	@ main.c:5138: 		n = (trg0 + STCLK_LD); trg0 = n;
 9069 0028 1A44     		add	r2, r2, r3	@ _9, tmp131
 9070 002a 0260     		str	r2, [r0]	@ _9, trg0
 9071              	@ main.c:5139: 		n = (trg1 + STCLK_LD); trg1 = n;
 9072 002c 0A68     		ldr	r2, [r1]	@ trg1.257_10, trg1
 9073              	@ main.c:5140: 		n = (trg2 + STCLK_LD); trg2 = n;
 9074 002e 1048     		ldr	r0, .L724+28	@ tmp148,
 9075              	@ main.c:5139: 		n = (trg1 + STCLK_LD); trg1 = n;
 9076 0030 1A44     		add	r2, r2, r3	@ _11, tmp131
 9077 0032 0A60     		str	r2, [r1]	@ _11, trg1
 9078              	@ main.c:5140: 		n = (trg2 + STCLK_LD); trg2 = n;
 9079 0034 0268     		ldr	r2, [r0]	@ trg2.259_12, trg2
 9080              	@ main.c:5141: 		n = (trg3 + STCLK_LD); trg3 = n;
 9081 0036 0F49     		ldr	r1, .L724+32	@ tmp151,
 9082              	@ main.c:5140: 		n = (trg2 + STCLK_LD); trg2 = n;
 9083 0038 1A44     		add	r2, r2, r3	@ _13, tmp131
 9084 003a 0260     		str	r2, [r0]	@ _13, trg2
 9085              	@ main.c:5141: 		n = (trg3 + STCLK_LD); trg3 = n;
 9086 003c 0A68     		ldr	r2, [r1]	@ trg3.261_14, trg3
 9087              	@ main.c:5142: 		n = (trg4 + STCLK_LD); trg4 = n;
 9088 003e 0E48     		ldr	r0, .L724+36	@ tmp154,
 9089              	@ main.c:5141: 		n = (trg3 + STCLK_LD); trg3 = n;
 9090 0040 1A44     		add	r2, r2, r3	@ _15, tmp131
 9091 0042 0A60     		str	r2, [r1]	@ _15, trg3
 9092              	@ main.c:5142: 		n = (trg4 + STCLK_LD); trg4 = n;
 9093 0044 0268     		ldr	r2, [r0]	@ trg4.263_16, trg4
 9094              	@ main.c:5143: 		n = (trg5 + STCLK_LD); trg5 = n;
 9095 0046 0D49     		ldr	r1, .L724+40	@ tmp157,
 9096              	@ main.c:5142: 		n = (trg4 + STCLK_LD); trg4 = n;
 9097 0048 1A44     		add	r2, r2, r3	@ _17, tmp131
 9098 004a 0260     		str	r2, [r0]	@ _17, trg4
 9099              	@ main.c:5143: 		n = (trg5 + STCLK_LD); trg5 = n;
 9100 004c 0A68     		ldr	r2, [r1]	@ trg5.265_18, trg5
 9101 004e 1344     		add	r3, r3, r2	@ _19, trg5.265_18
 9102 0050 0B60     		str	r3, [r1]	@ _19, trg5
 9103              	@ main.c:5146: 	}
 9104 0052 7047     		bx	lr	@
 9105              	.L725:
 9106              		.align	2
 9107              	.L724:
 9108 0054 00000000 		.word	Timt
 9109 0058 40548900 		.word	9000000
 9110 005c 00000000 		.word	delay_us
 9111 0060 00000000 		.word	Tim0
 9112 0064 00000000 		.word	Tim1
 9113 0068 00000000 		.word	trg0
 9114 006c 00000000 		.word	trg1
 9115 0070 00000000 		.word	trg2
 9116 0074 00000000 		.word	trg3
 9117 0078 00000000 		.word	trg4
 9118 007c 00000000 		.word	trg5
 9119              		.size	SysTick_Handler, .-SysTick_Handler
 9120              		.section	.text.TIM2_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccrMssCc.s 			page 161


 9121              		.align	1
 9122              		.p2align 2,,3
 9123              		.global	TIM2_IRQHandler
 9124              		.syntax unified
 9125              		.thumb
 9126              		.thumb_func
 9127              		.fpu softvfp
 9128              		.type	TIM2_IRQHandler, %function
 9129              	TIM2_IRQHandler:
 9130              		@ Stack Align: May be called with mis-aligned SP.
 9131              		@ args = 0, pretend = 0, frame = 0
 9132              		@ frame_needed = 0, uses_anonymous_args = 0
 9133              		@ link register save eliminated.
 9134 0000 6846     		mov	r0, sp	@,
 9135 0002 20F00701 		bic	r1, r0, #7	@,,
 9136 0006 8D46     		mov	sp, r1	@,
 9137              	@ main.c:5148: 		bTIM2_SR_UIF = 0;
 9138 0008 0023     		movs	r3, #0	@ tmp111,
 9139              	@ main.c:5149: 		TIM2->SR = 0;
 9140 000a 4FF08042 		mov	r2, #1073741824	@ tmp112,
 9141              	@ main.c:5147: __attribute__((interrupt)) void TIM2_IRQHandler(void)				{
 9142 000e 01B4     		push	{r0}	@
 9143              	@ main.c:5148: 		bTIM2_SR_UIF = 0;
 9144 0010 0249     		ldr	r1, .L727	@ tmp110,
 9145              	@ main.c:5151: 	}
 9146 0012 01BC     		pop	{r0}	@
 9147              	@ main.c:5148: 		bTIM2_SR_UIF = 0;
 9148 0014 0B60     		str	r3, [r1]	@ tmp111, MEM[(volatile long unsigned int *)1107296768B]
 9149              	@ main.c:5151: 	}
 9150 0016 8546     		mov	sp, r0	@,
 9151              	@ main.c:5149: 		TIM2->SR = 0;
 9152 0018 1382     		strh	r3, [r2, #16]	@ movhi	@ tmp111, MEM[(struct TIM_TypeDef *)1073741824B].SR
 9153              	@ main.c:5151: 	}
 9154 001a 7047     		bx	lr	@
 9155              	.L728:
 9156              		.align	2
 9157              	.L727:
 9158 001c 00020042 		.word	1107296768
 9159              		.size	TIM2_IRQHandler, .-TIM2_IRQHandler
 9160              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 9161              		.align	1
 9162              		.p2align 2,,3
 9163              		.global	TIM3_IRQHandler
 9164              		.syntax unified
 9165              		.thumb
 9166              		.thumb_func
 9167              		.fpu softvfp
 9168              		.type	TIM3_IRQHandler, %function
 9169              	TIM3_IRQHandler:
 9170              		@ Stack Align: May be called with mis-aligned SP.
 9171              		@ args = 0, pretend = 0, frame = 0
 9172              		@ frame_needed = 0, uses_anonymous_args = 0
 9173              		@ link register save eliminated.
 9174 0000 6846     		mov	r0, sp	@,
 9175 0002 20F00701 		bic	r1, r0, #7	@,,
 9176 0006 8D46     		mov	sp, r1	@,
 9177 0008 01B4     		push	{r0}	@
ARM GAS  /tmp/ccrMssCc.s 			page 162


 9178              	@ main.c:5153: 		TIM3->SR = 0;
 9179 000a 0020     		movs	r0, #0	@ tmp122,
 9180              	@ main.c:5157: 		N = Timt3     + TIM3_ARR; Timt3 = N;
 9181 000c 4FF6FF73 		movw	r3, #65535	@ tmp124,
 9182              	@ main.c:5153: 		TIM3->SR = 0;
 9183 0010 0C4A     		ldr	r2, .L730	@ tmp120,
 9184              	@ main.c:5157: 		N = Timt3     + TIM3_ARR; Timt3 = N;
 9185 0012 0D49     		ldr	r1, .L730+4	@ tmp123,
 9186              	@ main.c:5153: 		TIM3->SR = 0;
 9187 0014 1082     		strh	r0, [r2, #16]	@ movhi	@ tmp122, MEM[(struct TIM_TypeDef *)1073742848B].SR
 9188              	@ main.c:5157: 		N = Timt3     + TIM3_ARR; Timt3 = N;
 9189 0016 0A68     		ldr	r2, [r1]	@ Timt3.267_1, Timt3
 9190              	@ main.c:5158: 		n = delay3_us + TIM3_ARR; delay3_us = n;
 9191 0018 0C48     		ldr	r0, .L730+8	@ tmp126,
 9192              	@ main.c:5157: 		N = Timt3     + TIM3_ARR; Timt3 = N;
 9193 001a 1A44     		add	r2, r2, r3	@ N, tmp124
 9194 001c 0A60     		str	r2, [r1]	@ N, Timt3
 9195              	@ main.c:5158: 		n = delay3_us + TIM3_ARR; delay3_us = n;
 9196 001e 0268     		ldr	r2, [r0]	@ delay3_us.268_2, delay3_us
 9197              	@ main.c:5162: 		n = (t3rg0 + TIM3_ARR); t3rg0 = n;
 9198 0020 0B49     		ldr	r1, .L730+12	@ tmp129,
 9199              	@ main.c:5158: 		n = delay3_us + TIM3_ARR; delay3_us = n;
 9200 0022 1A44     		add	r2, r2, r3	@ n, tmp124
 9201 0024 0260     		str	r2, [r0]	@ n, delay3_us
 9202              	@ main.c:5162: 		n = (t3rg0 + TIM3_ARR); t3rg0 = n;
 9203 0026 0A68     		ldr	r2, [r1]	@ t3rg0.269_3, t3rg0
 9204              	@ main.c:5163: 		n = (t3rg1 + TIM3_ARR); t3rg1 = n;
 9205 0028 0A48     		ldr	r0, .L730+16	@ tmp132,
 9206              	@ main.c:5162: 		n = (t3rg0 + TIM3_ARR); t3rg0 = n;
 9207 002a 1A44     		add	r2, r2, r3	@ n, tmp124
 9208 002c 0A60     		str	r2, [r1]	@ n, t3rg0
 9209              	@ main.c:5163: 		n = (t3rg1 + TIM3_ARR); t3rg1 = n;
 9210 002e 0268     		ldr	r2, [r0]	@ t3rg1.270_4, t3rg1
 9211              	@ main.c:5164: 		n = (t3rg2 + TIM3_ARR); t3rg2 = n;
 9212 0030 0949     		ldr	r1, .L730+20	@ tmp135,
 9213              	@ main.c:5163: 		n = (t3rg1 + TIM3_ARR); t3rg1 = n;
 9214 0032 1A44     		add	r2, r2, r3	@ n, tmp124
 9215 0034 0260     		str	r2, [r0]	@ n, t3rg1
 9216              	@ main.c:5164: 		n = (t3rg2 + TIM3_ARR); t3rg2 = n;
 9217 0036 0A68     		ldr	r2, [r1]	@ t3rg2.271_5, t3rg2
 9218              	@ main.c:5168: 	}
 9219 0038 01BC     		pop	{r0}	@
 9220              	@ main.c:5164: 		n = (t3rg2 + TIM3_ARR); t3rg2 = n;
 9221 003a 1344     		add	r3, r3, r2	@ n, t3rg2.271_5
 9222 003c 0B60     		str	r3, [r1]	@ n, t3rg2
 9223              	@ main.c:5168: 	}
 9224 003e 8546     		mov	sp, r0	@,
 9225 0040 7047     		bx	lr	@
 9226              	.L731:
 9227 0042 00BF     		.align	2
 9228              	.L730:
 9229 0044 00040040 		.word	1073742848
 9230 0048 00000000 		.word	Timt3
 9231 004c 00000000 		.word	delay3_us
 9232 0050 00000000 		.word	t3rg0
 9233 0054 00000000 		.word	t3rg1
 9234 0058 00000000 		.word	t3rg2
ARM GAS  /tmp/ccrMssCc.s 			page 163


 9235              		.size	TIM3_IRQHandler, .-TIM3_IRQHandler
 9236              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 9237              		.align	1
 9238              		.p2align 2,,3
 9239              		.global	EXTI0_IRQHandler
 9240              		.syntax unified
 9241              		.thumb
 9242              		.thumb_func
 9243              		.fpu softvfp
 9244              		.type	EXTI0_IRQHandler, %function
 9245              	EXTI0_IRQHandler:
 9246              		@ Stack Align: May be called with mis-aligned SP.
 9247              		@ args = 0, pretend = 0, frame = 0
 9248              		@ frame_needed = 0, uses_anonymous_args = 0
 9249              		@ link register save eliminated.
 9250 0000 6846     		mov	r0, sp	@,
 9251 0002 20F00701 		bic	r1, r0, #7	@,,
 9252 0006 8D46     		mov	sp, r1	@,
 9253              	@ main.c:5170: 		if(PB0_i){
 9254 0008 064B     		ldr	r3, .L737	@ tmp116,
 9255              	@ main.c:5169: __attribute__((interrupt)) void EXTI0_IRQHandler(void)			{
 9256 000a 01B4     		push	{r0}	@
 9257              	@ main.c:5170: 		if(PB0_i){
 9258 000c 1B68     		ldr	r3, [r3]	@ _1, MEM[(volatile long unsigned int *)1109491968B]
 9259 000e 1BB1     		cbz	r3, .L733	@ _1,
 9260              	@ main.c:5171: 			flag_9=1;
 9261 0010 0122     		movs	r2, #1	@ tmp120,
 9262 0012 054B     		ldr	r3, .L737+4	@ tmp118,
 9263 0014 5B01     		lsls	r3, r3, #5	@ tmp119, tmp118,
 9264 0016 5A62     		str	r2, [r3, #36]	@ tmp120, *_6
 9265              	.L733:
 9266              	@ main.c:5173: 		EXTI->PR   = EXTI_PR_PR0;				// Clear interupt request
 9267 0018 0122     		movs	r2, #1	@ tmp122,
 9268 001a 044B     		ldr	r3, .L737+8	@ tmp121,
 9269              	@ main.c:5174: 	}
 9270 001c 01BC     		pop	{r0}	@
 9271              	@ main.c:5173: 		EXTI->PR   = EXTI_PR_PR0;				// Clear interupt request
 9272 001e 5A61     		str	r2, [r3, #20]	@ tmp122, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9273              	@ main.c:5174: 	}
 9274 0020 8546     		mov	sp, r0	@,
 9275 0022 7047     		bx	lr	@
 9276              	.L738:
 9277              		.align	2
 9278              	.L737:
 9279 0024 00812142 		.word	1109491968
 9280 0028 00001001 		.word	.LANCHOR17+17825792
 9281 002c 00040140 		.word	1073808384
 9282              		.size	EXTI0_IRQHandler, .-EXTI0_IRQHandler
 9283              		.section	.text.EXTI1_IRQHandler,"ax",%progbits
 9284              		.align	1
 9285              		.p2align 2,,3
 9286              		.global	EXTI1_IRQHandler
 9287              		.syntax unified
 9288              		.thumb
 9289              		.thumb_func
 9290              		.fpu softvfp
 9291              		.type	EXTI1_IRQHandler, %function
ARM GAS  /tmp/ccrMssCc.s 			page 164


 9292              	EXTI1_IRQHandler:
 9293              		@ Stack Align: May be called with mis-aligned SP.
 9294              		@ args = 0, pretend = 0, frame = 0
 9295              		@ frame_needed = 0, uses_anonymous_args = 0
 9296              		@ link register save eliminated.
 9297 0000 6846     		mov	r0, sp	@,
 9298 0002 20F00701 		bic	r1, r0, #7	@,,
 9299 0006 8D46     		mov	sp, r1	@,
 9300              	@ main.c:5177: 		EXTI->PR   = EXTI_PR_PR1;				// Clear interupt request
 9301 0008 0221     		movs	r1, #2	@ tmp113,
 9302 000a 054B     		ldr	r3, .L740	@ tmp112,
 9303              	@ main.c:5178: 		LED ^=1;
 9304 000c 054A     		ldr	r2, .L740+4	@ tmp114,
 9305              	@ main.c:5175: __attribute__((interrupt)) void EXTI1_IRQHandler(void)			{
 9306 000e 01B4     		push	{r0}	@
 9307              	@ main.c:5177: 		EXTI->PR   = EXTI_PR_PR1;				// Clear interupt request
 9308 0010 5961     		str	r1, [r3, #20]	@ tmp113, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9309              	@ main.c:5178: 		LED ^=1;
 9310 0012 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109524916B]
 9311              	@ main.c:5179: 	}
 9312 0014 01BC     		pop	{r0}	@
 9313              	@ main.c:5178: 		LED ^=1;
 9314 0016 83F00103 		eor	r3, r3, #1	@ _2, _1,
 9315 001a 1360     		str	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109524916B]
 9316              	@ main.c:5179: 	}
 9317 001c 8546     		mov	sp, r0	@,
 9318 001e 7047     		bx	lr	@
 9319              	.L741:
 9320              		.align	2
 9321              	.L740:
 9322 0020 00040140 		.word	1073808384
 9323 0024 B4012242 		.word	1109524916
 9324              		.size	EXTI1_IRQHandler, .-EXTI1_IRQHandler
 9325              		.section	.text.EXTI2_IRQHandler,"ax",%progbits
 9326              		.align	1
 9327              		.p2align 2,,3
 9328              		.global	EXTI2_IRQHandler
 9329              		.syntax unified
 9330              		.thumb
 9331              		.thumb_func
 9332              		.fpu softvfp
 9333              		.type	EXTI2_IRQHandler, %function
 9334              	EXTI2_IRQHandler:
 9335              		@ Stack Align: May be called with mis-aligned SP.
 9336              		@ args = 0, pretend = 0, frame = 0
 9337              		@ frame_needed = 0, uses_anonymous_args = 0
 9338              		@ link register save eliminated.
 9339 0000 6846     		mov	r0, sp	@,
 9340 0002 20F00701 		bic	r1, r0, #7	@,,
 9341 0006 8D46     		mov	sp, r1	@,
 9342              	@ main.c:5181: 		bEXTI_PR_2 = 1;
 9343 0008 0121     		movs	r1, #1	@ tmp113,
 9344 000a 054B     		ldr	r3, .L743	@ tmp112,
 9345              	@ main.c:5182: 		LED ^= 1;
 9346 000c 054A     		ldr	r2, .L743+4	@ tmp114,
 9347              	@ main.c:5180: __attribute__((interrupt)) void EXTI2_IRQHandler(void)			{
 9348 000e 01B4     		push	{r0}	@
ARM GAS  /tmp/ccrMssCc.s 			page 165


 9349              	@ main.c:5181: 		bEXTI_PR_2 = 1;
 9350 0010 1960     		str	r1, [r3]	@ tmp113, MEM[(volatile long unsigned int *)1109426824B]
 9351              	@ main.c:5182: 		LED ^= 1;
 9352 0012 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109524916B]
 9353              	@ main.c:5183: 	}
 9354 0014 01BC     		pop	{r0}	@
 9355              	@ main.c:5182: 		LED ^= 1;
 9356 0016 4B40     		eors	r3, r3, r1	@, _2, _1,
 9357 0018 1360     		str	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109524916B]
 9358              	@ main.c:5183: 	}
 9359 001a 8546     		mov	sp, r0	@,
 9360 001c 7047     		bx	lr	@
 9361              	.L744:
 9362 001e 00BF     		.align	2
 9363              	.L743:
 9364 0020 88822042 		.word	1109426824
 9365 0024 B4012242 		.word	1109524916
 9366              		.size	EXTI2_IRQHandler, .-EXTI2_IRQHandler
 9367              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 9368              		.align	1
 9369              		.p2align 2,,3
 9370              		.global	EXTI3_IRQHandler
 9371              		.syntax unified
 9372              		.thumb
 9373              		.thumb_func
 9374              		.fpu softvfp
 9375              		.type	EXTI3_IRQHandler, %function
 9376              	EXTI3_IRQHandler:
 9377              		@ Stack Align: May be called with mis-aligned SP.
 9378              		@ args = 0, pretend = 0, frame = 0
 9379              		@ frame_needed = 0, uses_anonymous_args = 0
 9380              		@ link register save eliminated.
 9381 0000 6846     		mov	r0, sp	@,
 9382 0002 20F00701 		bic	r1, r0, #7	@,,
 9383 0006 8D46     		mov	sp, r1	@,
 9384              	@ main.c:5185: 		EXTI->PR   = EXTI_PR_PR3;				// Clear interupt request
 9385 0008 0821     		movs	r1, #8	@ tmp113,
 9386 000a 054B     		ldr	r3, .L746	@ tmp112,
 9387              	@ main.c:5186: 		LED ^=1;
 9388 000c 054A     		ldr	r2, .L746+4	@ tmp114,
 9389              	@ main.c:5184: __attribute__((interrupt)) void EXTI3_IRQHandler(void)			{
 9390 000e 01B4     		push	{r0}	@
 9391              	@ main.c:5185: 		EXTI->PR   = EXTI_PR_PR3;				// Clear interupt request
 9392 0010 5961     		str	r1, [r3, #20]	@ tmp113, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9393              	@ main.c:5186: 		LED ^=1;
 9394 0012 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109524916B]
 9395              	@ main.c:5187: 	}
 9396 0014 01BC     		pop	{r0}	@
 9397              	@ main.c:5186: 		LED ^=1;
 9398 0016 83F00103 		eor	r3, r3, #1	@ _2, _1,
 9399 001a 1360     		str	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109524916B]
 9400              	@ main.c:5187: 	}
 9401 001c 8546     		mov	sp, r0	@,
 9402 001e 7047     		bx	lr	@
 9403              	.L747:
 9404              		.align	2
 9405              	.L746:
ARM GAS  /tmp/ccrMssCc.s 			page 166


 9406 0020 00040140 		.word	1073808384
 9407 0024 B4012242 		.word	1109524916
 9408              		.size	EXTI3_IRQHandler, .-EXTI3_IRQHandler
 9409              		.section	.text.EXTI4_IRQHandler,"ax",%progbits
 9410              		.align	1
 9411              		.p2align 2,,3
 9412              		.global	EXTI4_IRQHandler
 9413              		.syntax unified
 9414              		.thumb
 9415              		.thumb_func
 9416              		.fpu softvfp
 9417              		.type	EXTI4_IRQHandler, %function
 9418              	EXTI4_IRQHandler:
 9419              		@ Stack Align: May be called with mis-aligned SP.
 9420              		@ args = 0, pretend = 0, frame = 0
 9421              		@ frame_needed = 0, uses_anonymous_args = 0
 9422              		@ link register save eliminated.
 9423 0000 6846     		mov	r0, sp	@,
 9424 0002 20F00701 		bic	r1, r0, #7	@,,
 9425 0006 8D46     		mov	sp, r1	@,
 9426              	@ main.c:5189: 		EXTI->PR   = EXTI_PR_PR4;			
 9427 0008 1021     		movs	r1, #16	@ tmp113,
 9428 000a 054B     		ldr	r3, .L749	@ tmp112,
 9429              	@ main.c:5190: 		LED ^= 1;
 9430 000c 054A     		ldr	r2, .L749+4	@ tmp114,
 9431              	@ main.c:5188: __attribute__((interrupt)) void EXTI4_IRQHandler(void)			{
 9432 000e 01B4     		push	{r0}	@
 9433              	@ main.c:5189: 		EXTI->PR   = EXTI_PR_PR4;			
 9434 0010 5961     		str	r1, [r3, #20]	@ tmp113, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9435              	@ main.c:5190: 		LED ^= 1;
 9436 0012 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109524916B]
 9437              	@ main.c:5191: 	}
 9438 0014 01BC     		pop	{r0}	@
 9439              	@ main.c:5190: 		LED ^= 1;
 9440 0016 83F00103 		eor	r3, r3, #1	@ _2, _1,
 9441 001a 1360     		str	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109524916B]
 9442              	@ main.c:5191: 	}
 9443 001c 8546     		mov	sp, r0	@,
 9444 001e 7047     		bx	lr	@
 9445              	.L750:
 9446              		.align	2
 9447              	.L749:
 9448 0020 00040140 		.word	1073808384
 9449 0024 B4012242 		.word	1109524916
 9450              		.size	EXTI4_IRQHandler, .-EXTI4_IRQHandler
 9451              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 9452              		.align	1
 9453              		.p2align 2,,3
 9454              		.global	EXTI15_10_IRQHandler
 9455              		.syntax unified
 9456              		.thumb
 9457              		.thumb_func
 9458              		.fpu softvfp
 9459              		.type	EXTI15_10_IRQHandler, %function
 9460              	EXTI15_10_IRQHandler:
 9461              		@ Stack Align: May be called with mis-aligned SP.
 9462              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrMssCc.s 			page 167


 9463              		@ frame_needed = 0, uses_anonymous_args = 0
 9464              		@ link register save eliminated.
 9465 0000 6846     		mov	r0, sp	@,
 9466 0002 20F00701 		bic	r1, r0, #7	@,,
 9467 0006 8D46     		mov	sp, r1	@,
 9468              	@ main.c:5193: 		if(bEXTI_PR_13) {
 9469 0008 044B     		ldr	r3, .L756	@ tmp111,
 9470              	@ main.c:5192: __attribute__((interrupt)) void EXTI15_10_IRQHandler(void)	{
 9471 000a 01B4     		push	{r0}	@
 9472              	@ main.c:5193: 		if(bEXTI_PR_13) {
 9473 000c 1A68     		ldr	r2, [r3]	@ _1, MEM[(volatile long unsigned int *)1109426868B]
 9474 000e 0AB1     		cbz	r2, .L751	@ _1,
 9475              	@ main.c:5194: 			bEXTI_PR_13 = 1;
 9476 0010 0122     		movs	r2, #1	@ tmp113,
 9477 0012 1A60     		str	r2, [r3]	@ tmp113, MEM[(volatile long unsigned int *)1109426868B]
 9478              	.L751:
 9479              	@ main.c:5198: 	}
 9480 0014 01BC     		pop	{r0}	@
 9481 0016 8546     		mov	sp, r0	@,
 9482 0018 7047     		bx	lr	@
 9483              	.L757:
 9484 001a 00BF     		.align	2
 9485              	.L756:
 9486 001c B4822042 		.word	1109426868
 9487              		.size	EXTI15_10_IRQHandler, .-EXTI15_10_IRQHandler
 9488              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 9489              		.align	1
 9490              		.p2align 2,,3
 9491              		.global	EXTI9_5_IRQHandler
 9492              		.syntax unified
 9493              		.thumb
 9494              		.thumb_func
 9495              		.fpu softvfp
 9496              		.type	EXTI9_5_IRQHandler, %function
 9497              	EXTI9_5_IRQHandler:
 9498              		@ Stack Align: May be called with mis-aligned SP.
 9499              		@ args = 0, pretend = 0, frame = 0
 9500              		@ frame_needed = 0, uses_anonymous_args = 0
 9501              		@ link register save eliminated.
 9502 0000 6846     		mov	r0, sp	@,
 9503 0002 20F00701 		bic	r1, r0, #7	@,,
 9504 0006 8D46     		mov	sp, r1	@,
 9505              	@ main.c:5200: 		if((bPBI_6 == 0)&&(EXTI->PR & EXTI_PR_PR6)) {			// check request PB6 touchpad
 9506 0008 0B4B     		ldr	r3, .L763	@ tmp120,
 9507              	@ main.c:5199: __attribute__((interrupt)) void EXTI9_5_IRQHandler	 (void)	{
 9508 000a 01B4     		push	{r0}	@
 9509              	@ main.c:5200: 		if((bPBI_6 == 0)&&(EXTI->PR & EXTI_PR_PR6)) {			// check request PB6 touchpad
 9510 000c 1B68     		ldr	r3, [r3]	@ _1, MEM[(volatile long unsigned int *)1109491992B]
 9511 000e 83B9     		cbnz	r3, .L758	@ _1,
 9512              	@ main.c:5200: 		if((bPBI_6 == 0)&&(EXTI->PR & EXTI_PR_PR6)) {			// check request PB6 touchpad
 9513 0010 03F18043 		add	r3, r3, #1073741824	@ tmp121, tmp121,
 9514 0014 03F58233 		add	r3, r3, #66560	@ tmp121, tmp121,
 9515 0018 5A69     		ldr	r2, [r3, #20]	@ _2, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9516 001a 5206     		lsls	r2, r2, #25	@, _2,
 9517 001c 09D5     		bpl	.L758	@,
 9518              	@ main.c:5203: 			f1_tpirq   = 1;									// set IRQ_TP FLAG
 9519 001e 0120     		movs	r0, #1	@ tmp126,
ARM GAS  /tmp/ccrMssCc.s 			page 168


 9520              	@ main.c:5204: 			EXTI->PR   = EXTI_PR_PR6;				// Clear interupt request
 9521 0020 4021     		movs	r1, #64	@ tmp128,
 9522              	@ main.c:5203: 			f1_tpirq   = 1;									// set IRQ_TP FLAG
 9523 0022 064A     		ldr	r2, .L763+4	@ tmp124,
 9524 0024 5201     		lsls	r2, r2, #5	@ tmp125, tmp124,
 9525 0026 5060     		str	r0, [r2, #4]	@ tmp126, *_8
 9526              	@ main.c:5204: 			EXTI->PR   = EXTI_PR_PR6;				// Clear interupt request
 9527 0028 5961     		str	r1, [r3, #20]	@ tmp128, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9528              	@ main.c:5207: 			EXTI->FTSR &= ~EXTI_FTSR_TR6;  	// Failing trigger disabled
 9529 002a DA68     		ldr	r2, [r3, #12]	@ _9, MEM[(struct EXTI_TypeDef *)1073808384B].FTSR
 9530 002c 22F04002 		bic	r2, r2, #64	@ _10, _9,
 9531 0030 DA60     		str	r2, [r3, #12]	@ _10, MEM[(struct EXTI_TypeDef *)1073808384B].FTSR
 9532              	.L758:
 9533              	@ main.c:5211: 	}
 9534 0032 01BC     		pop	{r0}	@
 9535 0034 8546     		mov	sp, r0	@,
 9536 0036 7047     		bx	lr	@
 9537              	.L764:
 9538              		.align	2
 9539              	.L763:
 9540 0038 18812142 		.word	1109491992
 9541 003c 00001001 		.word	.LANCHOR17+17825792
 9542              		.size	EXTI9_5_IRQHandler, .-EXTI9_5_IRQHandler
 9543              		.section	.text.RTC_IRQHandler,"ax",%progbits
 9544              		.align	1
 9545              		.p2align 2,,3
 9546              		.global	RTC_IRQHandler
 9547              		.syntax unified
 9548              		.thumb
 9549              		.thumb_func
 9550              		.fpu softvfp
 9551              		.type	RTC_IRQHandler, %function
 9552              	RTC_IRQHandler:
 9553              		@ Stack Align: May be called with mis-aligned SP.
 9554              		@ args = 0, pretend = 0, frame = 0
 9555              		@ frame_needed = 0, uses_anonymous_args = 0
 9556              		@ link register save eliminated.
 9557 0000 6846     		mov	r0, sp	@,
 9558 0002 20F00701 		bic	r1, r0, #7	@,,
 9559 0006 8D46     		mov	sp, r1	@,
 9560              	@ main.c:5216: 		f3_rtc_1sec = 1;
 9561 0008 0121     		movs	r1, #1	@ tmp121,
 9562              	@ main.c:5212: __attribute__((interrupt)) void RTC_IRQHandler 	(void)			{
 9563 000a 11B4     		push	{r0, r4}	@
 9564              	@ main.c:5215: 		bRTC_CRL_SECF = 0;		//Clear Interrupt Flag bit
 9565 000c 0024     		movs	r4, #0	@ tmp117,
 9566              	@ main.c:5216: 		f3_rtc_1sec = 1;
 9567 000e 064B     		ldr	r3, .L769	@ tmp119,
 9568              	@ main.c:5215: 		bRTC_CRL_SECF = 0;		//Clear Interrupt Flag bit
 9569 0010 0648     		ldr	r0, .L769+4	@ tmp116,
 9570              	@ main.c:5216: 		f3_rtc_1sec = 1;
 9571 0012 5B01     		lsls	r3, r3, #5	@ tmp120, tmp119,
 9572              	@ main.c:5217: 		while( bRTC_CRL_RTOFF == 0 );
 9573 0014 064A     		ldr	r2, .L769+8	@ tmp122,
 9574              	@ main.c:5215: 		bRTC_CRL_SECF = 0;		//Clear Interrupt Flag bit
 9575 0016 0460     		str	r4, [r0]	@ tmp117, MEM[(volatile long unsigned int *)1107624064B]
 9576              	@ main.c:5216: 		f3_rtc_1sec = 1;
ARM GAS  /tmp/ccrMssCc.s 			page 169


 9577 0018 D960     		str	r1, [r3, #12]	@ tmp121, *_5
 9578              	.L766:
 9579              	@ main.c:5217: 		while( bRTC_CRL_RTOFF == 0 );
 9580 001a 1368     		ldr	r3, [r2]	@ _6, MEM[(volatile long unsigned int *)1107624084B]
 9581 001c 002B     		cmp	r3, #0	@ _6
 9582 001e FCD0     		beq	.L766	@
 9583              	@ main.c:5218: 	}
 9584 0020 11BC     		pop	{r0, r4}	@
 9585 0022 8546     		mov	sp, r0	@,
 9586 0024 7047     		bx	lr	@
 9587              	.L770:
 9588 0026 00BF     		.align	2
 9589              	.L769:
 9590 0028 00001001 		.word	.LANCHOR17+17825792
 9591 002c 80000542 		.word	1107624064
 9592 0030 94000542 		.word	1107624084
 9593              		.size	RTC_IRQHandler, .-RTC_IRQHandler
 9594              		.section	.text.RTCAlarm_IRQHandler,"ax",%progbits
 9595              		.align	1
 9596              		.p2align 2,,3
 9597              		.global	RTCAlarm_IRQHandler
 9598              		.syntax unified
 9599              		.thumb
 9600              		.thumb_func
 9601              		.fpu softvfp
 9602              		.type	RTCAlarm_IRQHandler, %function
 9603              	RTCAlarm_IRQHandler:
 9604              		@ Stack Align: May be called with mis-aligned SP.
 9605              		@ args = 0, pretend = 0, frame = 0
 9606              		@ frame_needed = 0, uses_anonymous_args = 0
 9607              		@ link register save eliminated.
 9608 0000 6846     		mov	r0, sp	@,
 9609 0002 20F00701 		bic	r1, r0, #7	@,,
 9610 0006 8D46     		mov	sp, r1	@,
 9611              	@ main.c:5220: 		RTC->CRL &= ~(RTC_CRL_ALRF); // potrzebne do wakeup
 9612 0008 0749     		ldr	r1, .L772	@ tmp114,
 9613              	@ main.c:5221: 		EXTI->PR |= EXTI_PR_PR17;
 9614 000a 084A     		ldr	r2, .L772+4	@ tmp120,
 9615              	@ main.c:5220: 		RTC->CRL &= ~(RTC_CRL_ALRF); // potrzebne do wakeup
 9616 000c 8B88     		ldrh	r3, [r1, #4]	@, MEM[(struct RTC_TypeDef *)1073752064B].CRL
 9617              	@ main.c:5219: __attribute__((interrupt)) void RTCAlarm_IRQHandler(void){
 9618 000e 01B4     		push	{r0}	@
 9619              	@ main.c:5220: 		RTC->CRL &= ~(RTC_CRL_ALRF); // potrzebne do wakeup
 9620 0010 23F00203 		bic	r3, r3, #2	@ _2, MEM[(struct RTC_TypeDef *)1073752064B].CRL,
 9621 0014 1B04     		lsls	r3, r3, #16	@ _2, _2,
 9622 0016 1B0C     		lsrs	r3, r3, #16	@ _2, _2,
 9623 0018 8B80     		strh	r3, [r1, #4]	@ movhi	@ _2, MEM[(struct RTC_TypeDef *)1073752064B].CRL
 9624              	@ main.c:5221: 		EXTI->PR |= EXTI_PR_PR17;
 9625 001a 5369     		ldr	r3, [r2, #20]	@ _3, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9626              	@ main.c:5224: 	}
 9627 001c 01BC     		pop	{r0}	@
 9628              	@ main.c:5221: 		EXTI->PR |= EXTI_PR_PR17;
 9629 001e 43F40033 		orr	r3, r3, #131072	@ _4, _3,
 9630 0022 5361     		str	r3, [r2, #20]	@ _4, MEM[(struct EXTI_TypeDef *)1073808384B].PR
 9631              	@ main.c:5224: 	}
 9632 0024 8546     		mov	sp, r0	@,
 9633 0026 7047     		bx	lr	@
ARM GAS  /tmp/ccrMssCc.s 			page 170


 9634              	.L773:
 9635              		.align	2
 9636              	.L772:
 9637 0028 00280040 		.word	1073752064
 9638 002c 00040140 		.word	1073808384
 9639              		.size	RTCAlarm_IRQHandler, .-RTCAlarm_IRQHandler
 9640              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 9641              		.align	1
 9642              		.p2align 2,,3
 9643              		.global	DMA1_Channel1_IRQHandler
 9644              		.syntax unified
 9645              		.thumb
 9646              		.thumb_func
 9647              		.fpu softvfp
 9648              		.type	DMA1_Channel1_IRQHandler, %function
 9649              	DMA1_Channel1_IRQHandler:
 9650              		@ Stack Align: May be called with mis-aligned SP.
 9651              		@ args = 0, pretend = 0, frame = 0
 9652              		@ frame_needed = 0, uses_anonymous_args = 0
 9653              		@ link register save eliminated.
 9654 0000 6846     		mov	r0, sp	@,
 9655 0002 20F00701 		bic	r1, r0, #7	@,,
 9656 0006 8D46     		mov	sp, r1	@,
 9657              	@ main.c:5226: 		if(DMA1->ISR & DMA_ISR_GIF1){
 9658 0008 084B     		ldr	r3, .L779	@ tmp119,
 9659              	@ main.c:5225: __attribute__((interrupt)) void DMA1_Channel1_IRQHandler(void){
 9660 000a 11B4     		push	{r0, r4}	@
 9661              	@ main.c:5226: 		if(DMA1->ISR & DMA_ISR_GIF1){
 9662 000c 1A68     		ldr	r2, [r3]	@ _1, MEM[(struct DMA_TypeDef *)1073872896B].ISR
 9663 000e D207     		lsls	r2, r2, #31	@, _1,
 9664 0010 09D5     		bpl	.L774	@,
 9665              	@ main.c:5231: 			f7_dma1 = 1;
 9666 0012 0120     		movs	r0, #1	@ tmp126,
 9667              	@ main.c:5228: 			DMA1->IFCR =                  DMA_IFCR_CTCIF1;
 9668 0014 0224     		movs	r4, #2	@ tmp122,
 9669              	@ main.c:5231: 			f7_dma1 = 1;
 9670 0016 064A     		ldr	r2, .L779+4	@ tmp124,
 9671              	@ main.c:5232: 			LED1   ^= 1;
 9672 0018 0649     		ldr	r1, .L779+8	@ tmp127,
 9673              	@ main.c:5231: 			f7_dma1 = 1;
 9674 001a 5201     		lsls	r2, r2, #5	@ tmp125, tmp124,
 9675              	@ main.c:5228: 			DMA1->IFCR =                  DMA_IFCR_CTCIF1;
 9676 001c 5C60     		str	r4, [r3, #4]	@ tmp122, MEM[(struct DMA_TypeDef *)1073872896B].IFCR
 9677              	@ main.c:5231: 			f7_dma1 = 1;
 9678 001e D061     		str	r0, [r2, #28]	@ tmp126, *_7
 9679              	@ main.c:5232: 			LED1   ^= 1;
 9680 0020 0B68     		ldr	r3, [r1]	@ _8, MEM[(volatile long unsigned int *)1109492096B]
 9681 0022 4340     		eors	r3, r3, r0	@, _9, _8,
 9682 0024 0B60     		str	r3, [r1]	@ _9, MEM[(volatile long unsigned int *)1109492096B]
 9683              	.L774:
 9684              	@ main.c:5236: 	}
 9685 0026 11BC     		pop	{r0, r4}	@
 9686 0028 8546     		mov	sp, r0	@,
 9687 002a 7047     		bx	lr	@
 9688              	.L780:
 9689              		.align	2
 9690              	.L779:
ARM GAS  /tmp/ccrMssCc.s 			page 171


 9691 002c 00000240 		.word	1073872896
 9692 0030 00001001 		.word	.LANCHOR17+17825792
 9693 0034 80812142 		.word	1109492096
 9694              		.size	DMA1_Channel1_IRQHandler, .-DMA1_Channel1_IRQHandler
 9695              		.section	.text.FSMC_IRQHandler,"ax",%progbits
 9696              		.align	1
 9697              		.p2align 2,,3
 9698              		.global	FSMC_IRQHandler
 9699              		.syntax unified
 9700              		.thumb
 9701              		.thumb_func
 9702              		.fpu softvfp
 9703              		.type	FSMC_IRQHandler, %function
 9704              	FSMC_IRQHandler:
 9705              		@ Stack Align: May be called with mis-aligned SP.
 9706              		@ args = 0, pretend = 0, frame = 0
 9707              		@ frame_needed = 0, uses_anonymous_args = 0
 9708              		@ link register save eliminated.
 9709 0000 6846     		mov	r0, sp	@,
 9710 0002 20F00701 		bic	r1, r0, #7	@,,
 9711 0006 8D46     		mov	sp, r1	@,
 9712 0008 01B4     		push	{r0}	@
 9713              	@ main.c:5239: }
 9714 000a 01BC     		pop	{r0}	@
 9715 000c 8546     		mov	sp, r0	@,
 9716 000e 7047     		bx	lr	@
 9717              		.size	FSMC_IRQHandler, .-FSMC_IRQHandler
 9718              		.section	.text.DACDmaInit,"ax",%progbits
 9719              		.align	1
 9720              		.p2align 2,,3
 9721              		.global	DACDmaInit
 9722              		.syntax unified
 9723              		.thumb
 9724              		.thumb_func
 9725              		.fpu softvfp
 9726              		.type	DACDmaInit, %function
 9727              	DACDmaInit:
 9728              		@ args = 0, pretend = 0, frame = 0
 9729              		@ frame_needed = 0, uses_anonymous_args = 0
 9730              		@ link register save eliminated.
 9731 0000 10B4     		push	{r4}	@
 9732              	@ main.c:5430: 	DAC->DHR12RD	= (0<<16) | 900;
 9733 0002 4FF46174 		mov	r4, #900	@ tmp125,
 9734              	@ main.c:5421: 	RCC->APB1ENR  |= RCC_APB1ENR_DACEN;
 9735 0006 0A48     		ldr	r0, .L784	@ tmp116,
 9736              	@ main.c:5422: 	GPIOA->CRL   	&= 0xff00ffff;
 9737 0008 0A4B     		ldr	r3, .L784+4	@ tmp118,
 9738              	@ main.c:5421: 	RCC->APB1ENR  |= RCC_APB1ENR_DACEN;
 9739 000a C269     		ldr	r2, [r0, #28]	@ _1, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 9740              	@ main.c:5426: 	DAC->CR				= DAC_CR_TEN1|DAC_CR_TEN2|DAC_CR_WAVE1|DAC_CR_WAVE2|DAC_CR_EN1|DAC_CR_EN
 9741 000c 0A49     		ldr	r1, .L784+8	@ tmp122,
 9742              	@ main.c:5421: 	RCC->APB1ENR  |= RCC_APB1ENR_DACEN;
 9743 000e 42F00052 		orr	r2, r2, #536870912	@ _2, _1,
 9744 0012 C261     		str	r2, [r0, #28]	@ _2, MEM[(struct RCC_TypeDef *)1073876992B].APB1ENR
 9745              	@ main.c:5422: 	GPIOA->CRL   	&= 0xff00ffff;
 9746 0014 1A68     		ldr	r2, [r3]	@ _3, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 9747              	@ main.c:5426: 	DAC->CR				= DAC_CR_TEN1|DAC_CR_TEN2|DAC_CR_WAVE1|DAC_CR_WAVE2|DAC_CR_EN1|DAC_CR_EN
ARM GAS  /tmp/ccrMssCc.s 			page 172


 9748 0016 0948     		ldr	r0, .L784+12	@ tmp123,
 9749              	@ main.c:5422: 	GPIOA->CRL   	&= 0xff00ffff;
 9750 0018 22F47F02 		bic	r2, r2, #16711680	@ _4, _3,
 9751 001c 1A60     		str	r2, [r3]	@ _4, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 9752              	@ main.c:5423: 	GPIOA->CRL   	|= 0x00dd0000;
 9753 001e 1A68     		ldr	r2, [r3]	@ _5, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 9754 0020 42F45D02 		orr	r2, r2, #14483456	@ _6, _5,
 9755 0024 1A60     		str	r2, [r3]	@ _6, MEM[(struct GPIO_TypeDef *)1073809408B].CRL
 9756              	@ main.c:5426: 	DAC->CR				= DAC_CR_TEN1|DAC_CR_TEN2|DAC_CR_WAVE1|DAC_CR_WAVE2|DAC_CR_EN1|DAC_CR_EN
 9757 0026 0860     		str	r0, [r1]	@ tmp123, MEM[(struct DAC_TypeDef *)1073771520B].CR
 9758              	@ main.c:5430: 	DAC->DHR12RD	= (0<<16) | 900;
 9759 0028 0C62     		str	r4, [r1, #32]	@ tmp125, MEM[(struct DAC_TypeDef *)1073771520B].DHR12RD
 9760              	@ main.c:5432: }
 9761 002a 10BC     		pop	{r4}	@
 9762 002c 7047     		bx	lr	@
 9763              	.L785:
 9764 002e 00BF     		.align	2
 9765              	.L784:
 9766 0030 00100240 		.word	1073876992
 9767 0034 00080140 		.word	1073809408
 9768 0038 00740040 		.word	1073771520
 9769 003c D50AD50A 		.word	181734101
 9770              		.size	DACDmaInit, .-DACDmaInit
 9771              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 9772              		.align	1
 9773              		.p2align 2,,3
 9774              		.global	TIM4_IRQHandler
 9775              		.syntax unified
 9776              		.thumb
 9777              		.thumb_func
 9778              		.fpu softvfp
 9779              		.type	TIM4_IRQHandler, %function
 9780              	TIM4_IRQHandler:
 9781              		@ args = 0, pretend = 0, frame = 0
 9782              		@ frame_needed = 0, uses_anonymous_args = 0
 9783              		@ link register save eliminated.
 9784              	@ main.c:5506: 		TIM4->SR = 0;
 9785 0000 0021     		movs	r1, #0	@ tmp114,
 9786 0002 034B     		ldr	r3, .L787	@ tmp112,
 9787              	@ main.c:5508: 		Tim4++;
 9788 0004 034A     		ldr	r2, .L787+4	@ tmp115,
 9789              	@ main.c:5506: 		TIM4->SR = 0;
 9790 0006 1982     		strh	r1, [r3, #16]	@ movhi	@ tmp114, MEM[(struct TIM_TypeDef *)1073743872B].SR
 9791              	@ main.c:5508: 		Tim4++;
 9792 0008 1368     		ldr	r3, [r2]	@ Tim4.276_1, Tim4
 9793 000a 0133     		adds	r3, r3, #1	@ _2, Tim4.276_1,
 9794 000c 1360     		str	r3, [r2]	@ _2, Tim4
 9795              	@ main.c:5509: 	}
 9796 000e 7047     		bx	lr	@
 9797              	.L788:
 9798              		.align	2
 9799              	.L787:
 9800 0010 00080040 		.word	1073743872
 9801 0014 00000000 		.word	Tim4
 9802              		.size	TIM4_IRQHandler, .-TIM4_IRQHandler
 9803              		.section	.text.adc1_init_injected,"ax",%progbits
 9804              		.align	1
ARM GAS  /tmp/ccrMssCc.s 			page 173


 9805              		.p2align 2,,3
 9806              		.global	adc1_init_injected
 9807              		.syntax unified
 9808              		.thumb
 9809              		.thumb_func
 9810              		.fpu softvfp
 9811              		.type	adc1_init_injected, %function
 9812              	adc1_init_injected:
 9813              		@ args = 0, pretend = 0, frame = 0
 9814              		@ frame_needed = 0, uses_anonymous_args = 0
 9815              		@ link register save eliminated.
 9816 0000 F0B4     		push	{r4, r5, r6, r7}	@
 9817              	@ main.c:5554: 	ADC1_CR1_SCAN_bb = 1;									// enable scan mode (multi channel mode)
 9818 0002 0124     		movs	r4, #1	@ tmp144,
 9819              	@ main.c:5544: 	ADC1->SMPR2 = (0<<channel*3);
 9820 0004 0026     		movs	r6, #0	@ tmp131,
 9821              	@ main.c:5552: 	ADC1->CR2 = ADC_CR2_JEXTSEL_JSWSTART | ADC_CR2_JEXTTRIG | ADC_CR2_CAL | ADC_CR2_ADO
 9822 0006 4FF20505 		movw	r5, #61445	@ tmp142,
 9823              	@ main.c:5541: 	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;		// divide the ADC clock by 6 -> f_SAMP = 0.85MH
 9824 000a 114A     		ldr	r2, .L797	@ tmp126,
 9825              	@ main.c:5548: 			(channel << ADC_JSQR_JSQ3_bit) |
 9826 000c 8B02     		lsls	r3, r1, #10	@ tmp133, channel,
 9827              	@ main.c:5541: 	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;		// divide the ADC clock by 6 -> f_SAMP = 0.85MH
 9828 000e 5768     		ldr	r7, [r2, #4]	@ _1, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 9829              	@ main.c:5549: 			(channel << ADC_JSQR_JSQ2_bit) |
 9830 0010 43EAC133 		orr	r3, r3, r1, lsl #15	@ tmp134, tmp133, channel,
 9831 0014 0B43     		orrs	r3, r3, r1	@, tmp135, tmp134, channel
 9832              	@ main.c:5541: 	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;		// divide the ADC clock by 6 -> f_SAMP = 0.85MH
 9833 0016 5760     		str	r7, [r2, #4]	@ _1, MEM[(struct RCC_TypeDef *)1073876992B].CFGR
 9834              	@ main.c:5546: 	ADC1->JSQR = ((conversions - 1) << ADC_JSQR_JL_bit) |	// configure desired number o
 9835 0018 0138     		subs	r0, r0, #1	@ tmp138, conversions,
 9836              	@ main.c:5549: 			(channel << ADC_JSQR_JSQ2_bit) |
 9837 001a 43EA4113 		orr	r3, r3, r1, lsl #5	@ tmp137, tmp135, channel,
 9838 001e 43EA0053 		orr	r3, r3, r0, lsl #20	@ _12, tmp137, tmp138,
 9839              	@ main.c:5542: 	RCC->APB2ENR   |= RCC_APB2ENR_ADC1EN;	// enable clock for ADC1
 9840 0022 9069     		ldr	r0, [r2, #24]	@ _2, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 9841              	@ main.c:5544: 	ADC1->SMPR2 = (0<<channel*3);
 9842 0024 0B49     		ldr	r1, .L797+4	@ tmp130,
 9843              	@ main.c:5542: 	RCC->APB2ENR   |= RCC_APB2ENR_ADC1EN;	// enable clock for ADC1
 9844 0026 40F40070 		orr	r0, r0, #512	@ _3, _2,
 9845 002a 9061     		str	r0, [r2, #24]	@ _3, MEM[(struct RCC_TypeDef *)1073876992B].APB2ENR
 9846              	@ main.c:5554: 	ADC1_CR1_SCAN_bb = 1;									// enable scan mode (multi channel mode)
 9847 002c 0A4F     		ldr	r7, .L797+8	@ tmp143,
 9848              	@ main.c:5556: 	ADC1_CR2_JSWSTART_bb = 1;						// start Injected Group
 9849 002e 0B48     		ldr	r0, .L797+12	@ tmp145,
 9850              	@ main.c:5557: 	while (ADC1_SR_JSTRT_bb == 0);			// wait for conversion to start
 9851 0030 0B4A     		ldr	r2, .L797+16	@ tmp147,
 9852              	@ main.c:5544: 	ADC1->SMPR2 = (0<<channel*3);
 9853 0032 0E61     		str	r6, [r1, #16]	@ tmp131, MEM[(struct ADC_TypeDef *)1073816576B].SMPR2
 9854              	@ main.c:5546: 	ADC1->JSQR = ((conversions - 1) << ADC_JSQR_JL_bit) |	// configure desired number o
 9855 0034 8B63     		str	r3, [r1, #56]	@ _12, MEM[(struct ADC_TypeDef *)1073816576B].JSQR
 9856              	@ main.c:5552: 	ADC1->CR2 = ADC_CR2_JEXTSEL_JSWSTART | ADC_CR2_JEXTTRIG | ADC_CR2_CAL | ADC_CR2_ADO
 9857 0036 8D60     		str	r5, [r1, #8]	@ tmp142, MEM[(struct ADC_TypeDef *)1073816576B].CR2
 9858              	@ main.c:5554: 	ADC1_CR1_SCAN_bb = 1;									// enable scan mode (multi channel mode)
 9859 0038 3C60     		str	r4, [r7]	@ tmp144, MEM[(volatile long unsigned int *)1109688480B]
 9860              	@ main.c:5556: 	ADC1_CR2_JSWSTART_bb = 1;						// start Injected Group
 9861 003a 0460     		str	r4, [r0]	@ tmp144, MEM[(volatile long unsigned int *)1109688660B]
ARM GAS  /tmp/ccrMssCc.s 			page 174


 9862              	.L790:
 9863              	@ main.c:5557: 	while (ADC1_SR_JSTRT_bb == 0);			// wait for conversion to start
 9864 003c 1368     		ldr	r3, [r2]	@ _13, MEM[(volatile long unsigned int *)1109688332B]
 9865 003e 002B     		cmp	r3, #0	@ _13
 9866 0040 FCD0     		beq	.L790	@
 9867              	@ main.c:5563: 	while (ADC1_CR2_CAL_bb == 1);					// wait for calibration end
 9868 0042 084A     		ldr	r2, .L797+20	@ tmp148,
 9869              	.L791:
 9870              	@ main.c:5563: 	while (ADC1_CR2_CAL_bb == 1);					// wait for calibration end
 9871 0044 1368     		ldr	r3, [r2]	@ _14, MEM[(volatile long unsigned int *)1109688584B]
 9872 0046 012B     		cmp	r3, #1	@ _14,
 9873 0048 FCD0     		beq	.L791	@,
 9874              	@ main.c:5564: }
 9875 004a F0BC     		pop	{r4, r5, r6, r7}	@
 9876 004c 7047     		bx	lr	@
 9877              	.L798:
 9878 004e 00BF     		.align	2
 9879              	.L797:
 9880 0050 00100240 		.word	1073876992
 9881 0054 00240140 		.word	1073816576
 9882 0058 A0802442 		.word	1109688480
 9883 005c 54812442 		.word	1109688660
 9884 0060 0C802442 		.word	1109688332
 9885 0064 08812442 		.word	1109688584
 9886              		.size	adc1_init_injected, .-adc1_init_injected
 9887              		.section	.text.adc_get_internals,"ax",%progbits
 9888              		.align	1
 9889              		.p2align 2,,3
 9890              		.global	adc_get_internals
 9891              		.syntax unified
 9892              		.thumb
 9893              		.thumb_func
 9894              		.fpu softvfp
 9895              		.type	adc_get_internals, %function
 9896              	adc_get_internals:
 9897              		@ args = 0, pretend = 0, frame = 0
 9898              		@ frame_needed = 0, uses_anonymous_args = 0
 9899              		@ link register save eliminated.
 9900              	@ main.c:5570: 	ADC1_CR2_JSWSTART_bb = 1;						// start Injected Group
 9901 0000 0122     		movs	r2, #1	@ tmp122,
 9902              	@ main.c:5565: uint32_t adc_get_internals(uint32_t avg_cycles)		{
 9903 0002 10B4     		push	{r4}	@
 9904              	@ main.c:5565: uint32_t adc_get_internals(uint32_t avg_cycles)		{
 9905 0004 0446     		mov	r4, r0	@ avg_cycles, avg_cycles
 9906              	@ main.c:5570: 	ADC1_CR2_JSWSTART_bb = 1;						// start Injected Group
 9907 0006 134B     		ldr	r3, .L813	@ tmp121,
 9908              	@ main.c:5571: 	while (ADC1_SR_JSTRT_bb == 0);			// wait for conversion to start
 9909 0008 1349     		ldr	r1, .L813+4	@ tmp123,
 9910              	@ main.c:5570: 	ADC1_CR2_JSWSTART_bb = 1;						// start Injected Group
 9911 000a 1A60     		str	r2, [r3]	@ tmp122, MEM[(volatile long unsigned int *)1109688660B]
 9912              	.L800:
 9913              	@ main.c:5571: 	while (ADC1_SR_JSTRT_bb == 0);			// wait for conversion to start
 9914 000c 0B68     		ldr	r3, [r1]	@ _1, MEM[(volatile long unsigned int *)1109688332B]
 9915 000e 002B     		cmp	r3, #0	@ _1
 9916 0010 FCD0     		beq	.L800	@
 9917              	@ main.c:5572: 	ADC1_SR_JSTRT_bb = 0;								// reset "Injected Group start of conversion" flag
 9918 0012 0023     		movs	r3, #0	@ tmp125,
ARM GAS  /tmp/ccrMssCc.s 			page 175


 9919              	@ main.c:5573: 	while (ADC1_SR_JEOC_bb == 0);				// wait for conversions to end
 9920 0014 114A     		ldr	r2, .L813+8	@ tmp126,
 9921              	@ main.c:5572: 	ADC1_SR_JSTRT_bb = 0;								// reset "Injected Group start of conversion" flag
 9922 0016 0B60     		str	r3, [r1]	@ tmp125, MEM[(volatile long unsigned int *)1109688332B]
 9923              	.L801:
 9924              	@ main.c:5573: 	while (ADC1_SR_JEOC_bb == 0);				// wait for conversions to end
 9925 0018 1368     		ldr	r3, [r2]	@ _2, MEM[(volatile long unsigned int *)1109688328B]
 9926 001a 002B     		cmp	r3, #0	@ _2
 9927 001c FCD0     		beq	.L801	@
 9928              	@ main.c:5574: 	ADC1_SR_JEOC_bb = 0;								// reset "end of conversion" flag
 9929 001e 0020     		movs	r0, #0	@ tmp128,
 9930 0020 1060     		str	r0, [r2]	@ tmp128, MEM[(volatile long unsigned int *)1109688328B]
 9931              	@ main.c:5576: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 9932 0022 A4B1     		cbz	r4, .L805	@ avg_cycles,
 9933 0024 0E49     		ldr	r1, .L813+12	@ tmp129,
 9934 0026 0F4A     		ldr	r2, .L813+16	@ pretmp_5,
 9935 0028 0B1D     		adds	r3, r1, #4	@ ivtmp.774, tmp129,
 9936              	@ main.c:5577: 		value += *jdrs[i];
 9937 002a 1268     		ldr	r2, [r2]	@ _14, *prephitmp_20
 9938 002c 01EB8401 		add	r1, r1, r4, lsl #2	@ _24, tmp129, avg_cycles,
 9939              	@ main.c:5576: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 9940 0030 8B42     		cmp	r3, r1	@ ivtmp.774, _24
 9941              	@ main.c:5577: 		value += *jdrs[i];
 9942 0032 1044     		add	r0, r0, r2	@ <retval>, _14
 9943              	@ main.c:5576: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 9944 0034 05D0     		beq	.L803	@,
 9945              	.L812:
 9946 0036 53F8042B 		ldr	r2, [r3], #4	@ pretmp_5, MEM[base: _25, offset: 0B]
 9947              	@ main.c:5577: 		value += *jdrs[i];
 9948 003a 1268     		ldr	r2, [r2]	@ _14, *prephitmp_20
 9949              	@ main.c:5576: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 9950 003c 8B42     		cmp	r3, r1	@ ivtmp.774, _24
 9951              	@ main.c:5577: 		value += *jdrs[i];
 9952 003e 1044     		add	r0, r0, r2	@ <retval>, _14
 9953              	@ main.c:5576: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 9954 0040 F9D1     		bne	.L812	@,
 9955              	.L803:
 9956              	@ main.c:5579: 	if (avg_cycles > 1)									// should the samples be averaged?
 9957 0042 012C     		cmp	r4, #1	@ avg_cycles,
 9958 0044 01D9     		bls	.L799	@,
 9959              	@ main.c:5582: 		value /= avg_cycles;
 9960 0046 B0FBF4F0 		udiv	r0, r0, r4	@ <retval>, <retval>, avg_cycles
 9961              	.L799:
 9962              	@ main.c:5586: }
 9963 004a 10BC     		pop	{r4}	@
 9964 004c 7047     		bx	lr	@
 9965              	.L805:
 9966              	@ main.c:5568: 	uint32_t i, value = 0;
 9967 004e 2046     		mov	r0, r4	@ <retval>, avg_cycles
 9968              	@ main.c:5586: }
 9969 0050 10BC     		pop	{r4}	@
 9970 0052 7047     		bx	lr	@
 9971              	.L814:
 9972              		.align	2
 9973              	.L813:
 9974 0054 54812442 		.word	1109688660
 9975 0058 0C802442 		.word	1109688332
ARM GAS  /tmp/ccrMssCc.s 			page 176


 9976 005c 08802442 		.word	1109688328
 9977 0060 00000000 		.word	.LANCHOR35
 9978 0064 3C240140 		.word	1073816636
 9979              		.size	adc_get_internals, .-adc_get_internals
 9980              		.section	.text.adc_get_injected,"ax",%progbits
 9981              		.align	1
 9982              		.p2align 2,,3
 9983              		.global	adc_get_injected
 9984              		.syntax unified
 9985              		.thumb
 9986              		.thumb_func
 9987              		.fpu softvfp
 9988              		.type	adc_get_injected, %function
 9989              	adc_get_injected:
 9990              		@ args = 0, pretend = 0, frame = 0
 9991              		@ frame_needed = 0, uses_anonymous_args = 0
 9992              		@ link register save eliminated.
 9993              	@ main.c:5592: 	ADC1_CR2_JSWSTART_bb = 1;
 9994 0000 0121     		movs	r1, #1	@ tmp121,
 9995              	@ main.c:5587: uint32_t adc_get_injected(uint32_t avg_cycles)		{
 9996 0002 10B4     		push	{r4}	@
 9997              	@ main.c:5587: uint32_t adc_get_injected(uint32_t avg_cycles)		{
 9998 0004 0446     		mov	r4, r0	@ avg_cycles, avg_cycles
 9999              	@ main.c:5592: 	ADC1_CR2_JSWSTART_bb = 1;
 10000 0006 104B     		ldr	r3, .L826	@ tmp120,
 10001              	@ main.c:5593: 	while (ADC1_SR_JEOC_bb == 0);				// wait for conversions to end
 10002 0008 104A     		ldr	r2, .L826+4	@ tmp122,
 10003              	@ main.c:5592: 	ADC1_CR2_JSWSTART_bb = 1;
 10004 000a 1960     		str	r1, [r3]	@ tmp121, MEM[(volatile long unsigned int *)1109688660B]
 10005              	.L816:
 10006              	@ main.c:5593: 	while (ADC1_SR_JEOC_bb == 0);				// wait for conversions to end
 10007 000c 1368     		ldr	r3, [r2]	@ _1, MEM[(volatile long unsigned int *)1109688328B]
 10008 000e 002B     		cmp	r3, #0	@ _1
 10009 0010 FCD0     		beq	.L816	@
 10010              	@ main.c:5594: 	ADC1_SR_JEOC_bb = 0;								// reset "end of conversion" flag
 10011 0012 0020     		movs	r0, #0	@ tmp124,
 10012 0014 1060     		str	r0, [r2]	@ tmp124, MEM[(volatile long unsigned int *)1109688328B]
 10013              	@ main.c:5596: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 10014 0016 A4B1     		cbz	r4, .L820	@ avg_cycles,
 10015 0018 0D4B     		ldr	r3, .L826+8	@ ivtmp.788,
 10016 001a 0E4A     		ldr	r2, .L826+12	@ pretmp_4,
 10017 001c 191F     		subs	r1, r3, #4	@ tmp126, ivtmp.788,
 10018 001e 01EB8401 		add	r1, r1, r4, lsl #2	@ _22, tmp126, avg_cycles,
 10019              	@ main.c:5597: 		value += *jdrs[i];
 10020 0022 1268     		ldr	r2, [r2]	@ _12, *prephitmp_18
 10021              	@ main.c:5596: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 10022 0024 8B42     		cmp	r3, r1	@ ivtmp.788, _22
 10023              	@ main.c:5597: 		value += *jdrs[i];
 10024 0026 1044     		add	r0, r0, r2	@ <retval>, _12
 10025              	@ main.c:5596: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 10026 0028 05D0     		beq	.L818	@,
 10027              	.L825:
 10028 002a 53F8042B 		ldr	r2, [r3], #4	@ pretmp_4, MEM[base: _23, offset: 0B]
 10029              	@ main.c:5597: 		value += *jdrs[i];
 10030 002e 1268     		ldr	r2, [r2]	@ _12, *prephitmp_18
 10031              	@ main.c:5596: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 10032 0030 8B42     		cmp	r3, r1	@ ivtmp.788, _22
ARM GAS  /tmp/ccrMssCc.s 			page 177


 10033              	@ main.c:5597: 		value += *jdrs[i];
 10034 0032 1044     		add	r0, r0, r2	@ <retval>, _12
 10035              	@ main.c:5596: 	for (i = 0; i < avg_cycles; i++)		// accumulate desired number of samples
 10036 0034 F9D1     		bne	.L825	@,
 10037              	.L818:
 10038              	@ main.c:5599: 	if (avg_cycles > 1)									// should the samples be averaged?
 10039 0036 012C     		cmp	r4, #1	@ avg_cycles,
 10040 0038 01D9     		bls	.L815	@,
 10041              	@ main.c:5602: 		value /= avg_cycles;
 10042 003a B0FBF4F0 		udiv	r0, r0, r4	@ <retval>, <retval>, avg_cycles
 10043              	.L815:
 10044              	@ main.c:5606: }
 10045 003e 10BC     		pop	{r4}	@
 10046 0040 7047     		bx	lr	@
 10047              	.L820:
 10048              	@ main.c:5590: 	uint32_t i, value = 0;
 10049 0042 2046     		mov	r0, r4	@ <retval>, avg_cycles
 10050              	@ main.c:5606: }
 10051 0044 10BC     		pop	{r4}	@
 10052 0046 7047     		bx	lr	@
 10053              	.L827:
 10054              		.align	2
 10055              	.L826:
 10056 0048 54812442 		.word	1109688660
 10057 004c 08802442 		.word	1109688328
 10058 0050 04000000 		.word	jdrs.9070+4
 10059 0054 3C240140 		.word	1073816636
 10060              		.size	adc_get_injected, .-adc_get_injected
 10061              		.section	.text.NVIC_conf,"ax",%progbits
 10062              		.align	1
 10063              		.p2align 2,,3
 10064              		.global	NVIC_conf
 10065              		.syntax unified
 10066              		.thumb
 10067              		.thumb_func
 10068              		.fpu softvfp
 10069              		.type	NVIC_conf, %function
 10070              	NVIC_conf:
 10071              		@ args = 0, pretend = 0, frame = 0
 10072              		@ frame_needed = 0, uses_anonymous_args = 0
 10073              		@ link register save eliminated.
 10074 0000 70B4     		push	{r4, r5, r6}	@
 10075              	@ main.c:5615: 	NVIC->IP[TIM1_CC_IRQn] = (0<<4);           //Set the highest priority for TIMER1, s
 10076 0002 0020     		movs	r0, #0	@ tmp122,
 10077              	@ main.c:5613: 	NVIC->IP[ADC1_2_IRQn]  = (2<<4);
 10078 0004 2025     		movs	r5, #32	@ tmp116,
 10079              	@ main.c:5614: 	NVIC->IP[DMA1_Channel1_IRQn] = (1<<4);
 10080 0006 1024     		movs	r4, #16	@ tmp119,
 10081              	@ main.c:5610: 	SCB->AIRCR |= AIRCR_VECTKEY_MASK | (3<<8);      //[Optional] Define interrupt field
 10082 0008 0749     		ldr	r1, .L830	@ tmp112,
 10083 000a 084A     		ldr	r2, .L830+4	@ _2,
 10084 000c CE68     		ldr	r6, [r1, #12]	@ _1, MEM[(struct SCB_Type *)3758157056B].AIRCR
 10085              	@ main.c:5613: 	NVIC->IP[ADC1_2_IRQn]  = (2<<4);
 10086 000e 084B     		ldr	r3, .L830+8	@ tmp115,
 10087              	@ main.c:5610: 	SCB->AIRCR |= AIRCR_VECTKEY_MASK | (3<<8);      //[Optional] Define interrupt field
 10088 0010 3243     		orrs	r2, r2, r6	@, _2, _2, _1
 10089 0012 CA60     		str	r2, [r1, #12]	@ _2, MEM[(struct SCB_Type *)3758157056B].AIRCR
ARM GAS  /tmp/ccrMssCc.s 			page 178


 10090              	@ main.c:5618: 	NVIC->ISER[0]= (1<<TIM1_CC_IRQn )|(1<<ADC1_2_IRQn)|(1<<DMA1_Channel1_IRQn);   //Ena
 10091 0014 074A     		ldr	r2, .L830+12	@ tmp125,
 10092              	@ main.c:5613: 	NVIC->IP[ADC1_2_IRQn]  = (2<<4);
 10093 0016 83F81253 		strb	r5, [r3, #786]	@ tmp116, MEM[(struct NVIC_Type *)3758153984B].IP
 10094              	@ main.c:5614: 	NVIC->IP[DMA1_Channel1_IRQn] = (1<<4);
 10095 001a 83F80B43 		strb	r4, [r3, #779]	@ tmp119, MEM[(struct NVIC_Type *)3758153984B].IP
 10096              	@ main.c:5615: 	NVIC->IP[TIM1_CC_IRQn] = (0<<4);           //Set the highest priority for TIMER1, s
 10097 001e 83F81B03 		strb	r0, [r3, #795]	@ tmp122, MEM[(struct NVIC_Type *)3758153984B].IP
 10098              	@ main.c:5619: }
 10099 0022 70BC     		pop	{r4, r5, r6}	@
 10100              	@ main.c:5618: 	NVIC->ISER[0]= (1<<TIM1_CC_IRQn )|(1<<ADC1_2_IRQn)|(1<<DMA1_Channel1_IRQn);   //Ena
 10101 0024 1A60     		str	r2, [r3]	@ tmp125, MEM[(struct NVIC_Type *)3758153984B].ISER
 10102              	@ main.c:5619: }
 10103 0026 7047     		bx	lr	@
 10104              	.L831:
 10105              		.align	2
 10106              	.L830:
 10107 0028 00ED00E0 		.word	-536810240
 10108 002c 0003FA05 		.word	100270848
 10109 0030 00E100E0 		.word	-536813312
 10110 0034 00080408 		.word	134481920
 10111              		.size	NVIC_conf, .-NVIC_conf
 10112              		.section	.text.SetDate,"ax",%progbits
 10113              		.align	1
 10114              		.p2align 2,,3
 10115              		.global	SetDate
 10116              		.syntax unified
 10117              		.thumb
 10118              		.thumb_func
 10119              		.fpu softvfp
 10120              		.type	SetDate, %function
 10121              	SetDate:
 10122              		@ args = 0, pretend = 0, frame = 40
 10123              		@ frame_needed = 0, uses_anonymous_args = 0
 10124 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 10125              	@ main.c:5626: 	UaPutS("\r\n rok = ");
 10126 0004 6548     		ldr	r0, .L848	@,
 10127              	@ main.c:5623: void SetDate(void)	{
 10128 0006 8BB0     		sub	sp, sp, #44	@,,
 10129              	@ main.c:5626: 	UaPutS("\r\n rok = ");
 10130 0008 FFF7FEFF 		bl	UaPutS	@
 10131              	@ main.c:5627: 	u16 yer = str2int((char *)u1buf);
 10132 000c 06A8     		add	r0, sp, #24	@ tmp230,,
 10133 000e FFF7FEFF 		bl	str2int	@
 10134              	@ main.c:5628: 	memset((char *)u1buf,0,16);
 10135 0012 0027     		movs	r7, #0	@ tmp152,
 10136              	@ main.c:5627: 	u16 yer = str2int((char *)u1buf);
 10137 0014 0546     		mov	r5, r0	@ _1,
 10138              	@ main.c:5629: 	UaPutS("\r\n mies = ");
 10139 0016 6248     		ldr	r0, .L848+4	@,
 10140              	@ main.c:5628: 	memset((char *)u1buf,0,16);
 10141 0018 CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10142 001c CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10143              	@ main.c:5629: 	UaPutS("\r\n mies = ");
 10144 0020 FFF7FEFF 		bl	UaPutS	@
 10145              	@ main.c:5630: 	u08 mon = str2int((char *)u1buf);
 10146 0024 06A8     		add	r0, sp, #24	@ tmp231,,
ARM GAS  /tmp/ccrMssCc.s 			page 179


 10147 0026 FFF7FEFF 		bl	str2int	@
 10148 002a 0646     		mov	r6, r0	@ _2,
 10149              	@ main.c:5632: 	UaPutS("\r\n dzien = ");
 10150 002c 5D48     		ldr	r0, .L848+8	@,
 10151              	@ main.c:5631: 	memset((char *)u1buf,0,16);
 10152 002e CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10153 0032 CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10154              	@ main.c:5632: 	UaPutS("\r\n dzien = ");
 10155 0036 FFF7FEFF 		bl	UaPutS	@
 10156              	@ main.c:5633: 	u08 day = str2int((char *)u1buf);
 10157 003a 06A8     		add	r0, sp, #24	@ tmp232,,
 10158 003c FFF7FEFF 		bl	str2int	@
 10159 0040 8246     		mov	r10, r0	@ _3,
 10160              	@ main.c:5635: 	UaPutS("\r\n gdz = ");
 10161 0042 5948     		ldr	r0, .L848+12	@,
 10162              	@ main.c:5634: 	memset((char *)u1buf,0,16);
 10163 0044 CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10164 0048 CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10165              	@ main.c:5635: 	UaPutS("\r\n gdz = ");
 10166 004c FFF7FEFF 		bl	UaPutS	@
 10167              	@ main.c:5636: 	u08 hor = str2int((char *)u1buf);
 10168 0050 06A8     		add	r0, sp, #24	@ tmp233,,
 10169 0052 FFF7FEFF 		bl	str2int	@
 10170 0056 8046     		mov	r8, r0	@ _4,
 10171              	@ main.c:5638: 	UaPutS("\r\n min = ");
 10172 0058 5448     		ldr	r0, .L848+16	@,
 10173              	@ main.c:5637: 	memset((char *)u1buf,0,16);
 10174 005a CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10175 005e CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10176              	@ main.c:5638: 	UaPutS("\r\n min = ");
 10177 0062 FFF7FEFF 		bl	UaPutS	@
 10178              	@ main.c:5639: 	u08 min = str2int((char *)u1buf);
 10179 0066 06A8     		add	r0, sp, #24	@ tmp234,,
 10180 0068 FFF7FEFF 		bl	str2int	@
 10181 006c 8146     		mov	r9, r0	@ _5,
 10182              	@ main.c:5641: 	UaPutS("\r\n sek = ");
 10183 006e 5048     		ldr	r0, .L848+20	@,
 10184              	@ main.c:5640: 	memset((char *)u1buf,0,16);
 10185 0070 CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10186 0074 CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10187              	@ main.c:5641: 	UaPutS("\r\n sek = ");
 10188 0078 FFF7FEFF 		bl	UaPutS	@
 10189              	@ main.c:5642: 	u08 sec = str2int((char *)u1buf);
 10190 007c 06A8     		add	r0, sp, #24	@ tmp235,,
 10191 007e FFF7FEFF 		bl	str2int	@
 10192              	@ main.c:5643: 	memset((char *)u1buf,0,16);
 10193 0082 CDE90677 		strd	r7, r7, [sp, #24]	@ tmp152, tmp152,,
 10194 0086 CDE90877 		strd	r7, r7, [sp, #32]	@ tmp152, tmp152,,
 10195              	@ main.c:5644: 	u32 Uxt = 1924984799;
 10196 008a 4A4C     		ldr	r4, .L848+24	@ Uxt,
 10197 008c DFF830B1 		ldr	fp, .L848+36	@ tmp226,
 10198              	@ main.c:5642: 	u08 sec = str2int((char *)u1buf);
 10199 0090 0190     		str	r0, [sp, #4]	@, %sfp
 10200 0092 ADB2     		uxth	r5, r5	@ _92, _1
 10201              	@ main.c:5648: 			if(ptm.tm_mon == mon) 	{
 10202 0094 F6B2     		uxtb	r6, r6	@ _2, _2
 10203              	@ main.c:5649: 				if(ptm.tm_mday == day)  {
ARM GAS  /tmp/ccrMssCc.s 			page 180


 10204 0096 5FFA8AFA 		uxtb	r10, r10	@ _3, _3
 10205              	@ main.c:5650: 					if(ptm.tm_hour == hor)  {
 10206 009a 5FFA88F8 		uxtb	r8, r8	@ _4, _4
 10207              	.L841:
 10208              	@ main.c:5646: 		gmtime_r (&Uxt, &ptm);
 10209 009e 2046     		mov	r0, r4	@, Uxt
 10210 00a0 FFF7FEFF 		bl	gmtime_r.isra.0.constprop.2	@
 10211              	@ main.c:5647: 		if(ptm.tm_year == yer) 	{
 10212 00a4 DBF81430 		ldr	r3, [fp, #20]	@ ptm.tm_year, ptm.tm_year
 10213 00a8 AB42     		cmp	r3, r5	@ ptm.tm_year, _92
 10214 00aa 08D0     		beq	.L844	@,
 10215              	.L833:
 10216              	@ main.c:5668: 		} else Uxt -= 86400;
 10217 00ac A4F5A834 		sub	r4, r4, #86016	@ Uxt, Uxt,
 10218 00b0 A4F5C074 		sub	r4, r4, #384	@ Uxt, Uxt,
 10219              	@ main.c:5670: 	while(Uxt);
 10220 00b4 002C     		cmp	r4, #0	@ Uxt
 10221 00b6 F2D1     		bne	.L841	@
 10222              	.L832:
 10223              	@ main.c:5671: }
 10224 00b8 0BB0     		add	sp, sp, #44	@,,
 10225              		@ sp needed	@
 10226 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 10227              	.L844:
 10228              	@ main.c:5648: 			if(ptm.tm_mon == mon) 	{
 10229 00be DBF81030 		ldr	r3, [fp, #16]	@ ptm.tm_mon, ptm.tm_mon
 10230 00c2 B342     		cmp	r3, r6	@ ptm.tm_mon, _2
 10231 00c4 F2D1     		bne	.L833	@,
 10232              	@ main.c:5649: 				if(ptm.tm_mday == day)  {
 10233 00c6 DBF80C30 		ldr	r3, [fp, #12]	@ ptm.tm_mday, ptm.tm_mday
 10234 00ca 5345     		cmp	r3, r10	@ ptm.tm_mday, _3
 10235 00cc EED1     		bne	.L833	@,
 10236              	@ main.c:5650: 					if(ptm.tm_hour == hor)  {
 10237 00ce DBF80830 		ldr	r3, [fp, #8]	@ ptm.tm_hour, ptm.tm_hour
 10238 00d2 4345     		cmp	r3, r8	@ ptm.tm_hour, _4
 10239 00d4 04D0     		beq	.L845	@,
 10240              	@ main.c:5665: 					}else Uxt -= 3600;
 10241 00d6 A4F56164 		sub	r4, r4, #3600	@ Uxt, Uxt,
 10242              	@ main.c:5670: 	while(Uxt);
 10243 00da 002C     		cmp	r4, #0	@ Uxt
 10244 00dc DFD1     		bne	.L841	@
 10245 00de EBE7     		b	.L832	@
 10246              	.L845:
 10247              	@ main.c:5651: 						if(ptm.tm_min == min) 	{
 10248 00e0 DBF80420 		ldr	r2, [fp, #4]	@ ptm.tm_min, ptm.tm_min
 10249 00e4 5FFA89F3 		uxtb	r3, r9	@ _5, _5
 10250 00e8 9A42     		cmp	r2, r3	@ ptm.tm_min, _5
 10251 00ea 03D0     		beq	.L846	@,
 10252              	@ main.c:5664: 						}else Uxt -= 60;
 10253 00ec 3C3C     		subs	r4, r4, #60	@ Uxt, Uxt,
 10254              	@ main.c:5670: 	while(Uxt);
 10255 00ee 002C     		cmp	r4, #0	@ Uxt
 10256 00f0 D5D1     		bne	.L841	@
 10257 00f2 E1E7     		b	.L832	@
 10258              	.L846:
 10259              	@ main.c:5652: 							if(ptm.tm_sec == sec)		{
 10260 00f4 DBF80020 		ldr	r2, [fp]	@ ptm.tm_sec, ptm.tm_sec
ARM GAS  /tmp/ccrMssCc.s 			page 181


 10261 00f8 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2	@ _6, %sfp
 10262 00fc 9A42     		cmp	r2, r3	@ ptm.tm_sec, _6
 10263 00fe 03D0     		beq	.L847	@,
 10264              	@ main.c:5663: 							} else Uxt --;
 10265 0100 013C     		subs	r4, r4, #1	@ Uxt, Uxt,
 10266              	@ main.c:5670: 	while(Uxt);
 10267 0102 002C     		cmp	r4, #0	@ Uxt
 10268 0104 CBD1     		bne	.L841	@
 10269 0106 D7E7     		b	.L832	@
 10270              	.L847:
 10271              	@ main.c:5653: 								gmtime_r (&Uxt, &ptm);
 10272 0108 2046     		mov	r0, r4	@, Uxt
 10273 010a FFF7FEFF 		bl	gmtime_r.isra.0.constprop.2	@
 10274              	@ main.c:5654: 								UaPutS("\r\n ");
 10275 010e 2A48     		ldr	r0, .L848+28	@,
 10276 0110 FFF7FEFF 		bl	UaPutS	@
 10277              	@ main.c:5655: 								UaPutS(uint2str(ptm.tm_year,tbuf));		UaPutC('-');
 10278 0114 02A9     		add	r1, sp, #8	@,,
 10279 0116 DBF81400 		ldr	r0, [fp, #20]	@, ptm.tm_year
 10280 011a FFF7FEFF 		bl	uint2str	@
 10281 011e FFF7FEFF 		bl	UaPutS	@
 10282 0122 2D20     		movs	r0, #45	@,
 10283 0124 FFF7FEFF 		bl	UaPutC	@
 10284              	@ main.c:5656: 								UaPutS(uint2str(ptm.tm_mon,tbuf));		UaPutC('-');
 10285 0128 02A9     		add	r1, sp, #8	@,,
 10286 012a DBF81000 		ldr	r0, [fp, #16]	@, ptm.tm_mon
 10287 012e FFF7FEFF 		bl	uint2str	@
 10288 0132 FFF7FEFF 		bl	UaPutS	@
 10289 0136 2D20     		movs	r0, #45	@,
 10290 0138 FFF7FEFF 		bl	UaPutC	@
 10291              	@ main.c:5657: 								UaPutS(uint2str(ptm.tm_mday,tbuf));		UaPutC(' ');
 10292 013c 02A9     		add	r1, sp, #8	@,,
 10293 013e DBF80C00 		ldr	r0, [fp, #12]	@, ptm.tm_mday
 10294 0142 FFF7FEFF 		bl	uint2str	@
 10295 0146 FFF7FEFF 		bl	UaPutS	@
 10296 014a 2020     		movs	r0, #32	@,
 10297 014c FFF7FEFF 		bl	UaPutC	@
 10298              	@ main.c:5658: 								UaPutS(uint2str(ptm.tm_hour,tbuf));		UaPutC(':');
 10299 0150 02A9     		add	r1, sp, #8	@,,
 10300 0152 DBF80800 		ldr	r0, [fp, #8]	@, ptm.tm_hour
 10301 0156 FFF7FEFF 		bl	uint2str	@
 10302 015a FFF7FEFF 		bl	UaPutS	@
 10303 015e 3A20     		movs	r0, #58	@,
 10304 0160 FFF7FEFF 		bl	UaPutC	@
 10305              	@ main.c:5659: 								UaPutS(uint2str(ptm.tm_min,tbuf));		UaPutC(':');
 10306 0164 02A9     		add	r1, sp, #8	@,,
 10307 0166 DBF80400 		ldr	r0, [fp, #4]	@, ptm.tm_min
 10308 016a FFF7FEFF 		bl	uint2str	@
 10309 016e FFF7FEFF 		bl	UaPutS	@
 10310 0172 3A20     		movs	r0, #58	@,
 10311 0174 FFF7FEFF 		bl	UaPutC	@
 10312              	@ main.c:5660: 								UaPutS(uint2str(ptm.tm_sec,tbuf));		UaPutS("\r\n TimStmp = ");
 10313 0178 02A9     		add	r1, sp, #8	@,,
 10314 017a DBF80000 		ldr	r0, [fp]	@, ptm.tm_sec
 10315 017e FFF7FEFF 		bl	uint2str	@
 10316 0182 FFF7FEFF 		bl	UaPutS	@
 10317 0186 0D48     		ldr	r0, .L848+32	@,
ARM GAS  /tmp/ccrMssCc.s 			page 182


 10318 0188 FFF7FEFF 		bl	UaPutS	@
 10319              	@ main.c:5661: 								UaPutS(uint2str(Uxt,tbuf));
 10320 018c 02A9     		add	r1, sp, #8	@,,
 10321 018e 2046     		mov	r0, r4	@, Uxt
 10322 0190 FFF7FEFF 		bl	uint2str	@
 10323 0194 FFF7FEFF 		bl	UaPutS	@
 10324              	@ main.c:5662: 								break;
 10325 0198 8EE7     		b	.L832	@
 10326              	.L849:
 10327 019a 00BF     		.align	2
 10328              	.L848:
 10329 019c 00000000 		.word	.LC162
 10330 01a0 0C000000 		.word	.LC163
 10331 01a4 18000000 		.word	.LC164
 10332 01a8 24000000 		.word	.LC165
 10333 01ac 30000000 		.word	.LC166
 10334 01b0 3C000000 		.word	.LC167
 10335 01b4 DFEFBC72 		.word	1924984799
 10336 01b8 30000000 		.word	.LC78
 10337 01bc 48000000 		.word	.LC168
 10338 01c0 00000000 		.word	ptm
 10339              		.size	SetDate, .-SetDate
 10340              		.section	.text.flash_latency,"ax",%progbits
 10341              		.align	1
 10342              		.p2align 2,,3
 10343              		.global	flash_latency
 10344              		.syntax unified
 10345              		.thumb
 10346              		.thumb_func
 10347              		.fpu softvfp
 10348              		.type	flash_latency, %function
 10349              	flash_latency:
 10350              		@ args = 0, pretend = 0, frame = 0
 10351              		@ frame_needed = 0, uses_anonymous_args = 0
 10352              		@ link register save eliminated.
 10353              	@ main.c:5707: 	if (frequency < 24000000ul)			// 0 wait states for core speed below 24MHz
 10354 0000 084B     		ldr	r3, .L854	@ tmp114,
 10355 0002 9842     		cmp	r0, r3	@ frequency, tmp114
 10356 0004 0CD9     		bls	.L852	@,
 10357              	@ main.c:5709: 	else if (frequency < 48000000ul)// 1 wait state for core 24MHz < speed >48MHz
 10358 0006 03F1B773 		add	r3, r3, #23986176	@ tmp115, tmp115,
 10359 000a 03F55853 		add	r3, r3, #13824	@ tmp115, tmp115,
 10360              	@ main.c:5712: 		wait_states = 2;
 10361 000e 9842     		cmp	r0, r3	@ frequency, tmp115
 10362 0010 94BF     		ite	ls	@
 10363 0012 0120     		movls	r0, #1	@, wait_states,
 10364 0014 0220     		movhi	r0, #2	@, wait_states,
 10365              	.L851:
 10366              	@ main.c:5714: 	FLASH->ACR |= wait_states;				// set the latency
 10367 0016 044A     		ldr	r2, .L854+4	@ tmp116,
 10368 0018 1368     		ldr	r3, [r2]	@ _1, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 10369 001a 1843     		orrs	r0, r0, r3	@, _2, wait_states, _1
 10370 001c 1060     		str	r0, [r2]	@ _2, MEM[(struct FLASH_TypeDef *)1073881088B].ACR
 10371              	@ main.c:5715: }
 10372 001e 7047     		bx	lr	@
 10373              	.L852:
 10374              	@ main.c:5708: 		wait_states = 0;
ARM GAS  /tmp/ccrMssCc.s 			page 183


 10375 0020 0020     		movs	r0, #0	@ wait_states,
 10376 0022 F8E7     		b	.L851	@
 10377              	.L855:
 10378              		.align	2
 10379              	.L854:
 10380 0024 FF356E01 		.word	23999999
 10381 0028 00200240 		.word	1073881088
 10382              		.size	flash_latency, .-flash_latency
 10383              		.set	jdrs.9070,jdrs.9055
 10384              		.global	p_TSpm
 10385              		.comm	Rtc,8,4
 10386              		.global	FLAG
 10387              		.global	_ytab
 10388              		.comm	Timt3,4,4
 10389              		.comm	Timt,4,4
 10390              		.comm	Time6,4,4
 10391              		.comm	Tim6,4,4
 10392              		.comm	Tim4,4,4
 10393              		.comm	delay_us,4,4
 10394              		.comm	Tim2,4,4
 10395              		.comm	Tim1,4,4
 10396              		.comm	Tim0,4,4
 10397              		.comm	delay3_us,4,4
 10398              		.comm	t3rg2,4,4
 10399              		.comm	t3rg1,4,4
 10400              		.comm	t3rg0,4,4
 10401              		.comm	trg5,4,4
 10402              		.comm	trg4,4,4
 10403              		.comm	trg3,4,4
 10404              		.comm	trg2,4,4
 10405              		.comm	trg1,4,4
 10406              		.comm	trg0,4,4
 10407              		.comm	PutChar,4,4
 10408              		.comm	ptm,36,4
 10409              		.section	.rodata
 10410              		.align	2
 10411              		.set	.LANCHOR1,. + 0
 10412              	.LC0:
 10413 0000 6D01     		.short	365
 10414 0002 6401     		.short	356
 10415 0004 0000     		.short	0
 10416 0006 1E00     		.short	30
 10417 0008 0000     		.short	0
 10418 000a 0000     		.short	0
 10419 000c 0000     		.short	0
 10420 000e 0000     		.short	0
 10421              	.LC1:
 10422 0010 D007     		.short	2000
 10423 0012 0019     		.short	6400
 10424 0014 0000     		.short	0
 10425 0016 1E00     		.short	30
 10426 0018 0000     		.short	0
 10427 001a 0000     		.short	0
 10428 001c 0000     		.short	0
 10429 001e 0000     		.short	0
 10430              	.LC2:
 10431 0020 5601     		.short	342
ARM GAS  /tmp/ccrMssCc.s 			page 184


 10432 0022 5001     		.short	336
 10433 0024 0000     		.short	0
 10434 0026 0200     		.short	2
 10435 0028 0000     		.short	0
 10436 002a 0000     		.short	0
 10437 002c 0000     		.short	0
 10438 002e 0000     		.short	0
 10439              	.LC3:
 10440 0030 7200     		.short	114
 10441 0032 0701     		.short	263
 10442 0034 0000     		.short	0
 10443 0036 0200     		.short	2
 10444 0038 0000     		.short	0
 10445 003a 0000     		.short	0
 10446 003c 0000     		.short	0
 10447 003e 0000     		.short	0
 10448              	.LC4:
 10449 0040 00       		.byte	0
 10450 0041 1E       		.byte	30
 10451 0042 67       		.byte	103
 10452 0043 00       		.space	1
 10453              	.LC5:
 10454 0044 20506F6A 		.ascii	" PojLad\000"
 10454      4C616400 
 10455 004c 20506F6A 		.ascii	" PojRoz\000"
 10455      526F7A00 
 10456 0054 20437A65 		.ascii	" Czekaj\000"
 10456      6B616A00 
 10457 005c 204E6170 		.ascii	" Napiec\000"
 10457      69656300 
 10458 0064 204B6F6E 		.ascii	" KonLad\000"
 10458      4C616400 
 10459 006c 204B6F6E 		.ascii	" KonRoz\000"
 10459      526F7A00 
 10460 0074 204C6164 		.ascii	" Laduj\000"
 10460      756A00
 10461 007b 00       		.space	1
 10462              		.section	.bss.Cah.8242,"aw",%nobits
 10463              		.align	2
 10464              		.set	.LANCHOR11,. + 0
 10465              		.type	Cah.8242, %object
 10466              		.size	Cah.8242, 4
 10467              	Cah.8242:
 10468 0000 00000000 		.space	4
 10469              		.section	.bss.Cwh.8243,"aw",%nobits
 10470              		.align	2
 10471              		.set	.LANCHOR12,. + 0
 10472              		.type	Cwh.8243, %object
 10473              		.size	Cwh.8243, 4
 10474              	Cwh.8243:
 10475 0000 00000000 		.space	4
 10476              		.section	.bss.FLAG,"aw",%nobits
 10477              		.align	2
 10478              		.set	.LANCHOR17,. + 0
 10479              		.type	FLAG, %object
 10480              		.size	FLAG, 4
 10481              	FLAG:
ARM GAS  /tmp/ccrMssCc.s 			page 185


 10482 0000 00000000 		.space	4
 10483              		.section	.bss.Rwa.8244,"aw",%nobits
 10484              		.align	2
 10485              		.set	.LANCHOR9,. + 0
 10486              		.type	Rwa.8244, %object
 10487              		.size	Rwa.8244, 8
 10488              	Rwa.8244:
 10489 0000 00000000 		.space	8
 10489      00000000 
 10490              		.section	.bss.SX1278_1.8439,"aw",%nobits
 10491              		.align	2
 10492              		.set	.LANCHOR19,. + 0
 10493              		.type	SX1278_1.8439, %object
 10494              		.size	SX1278_1.8439, 76
 10495              	SX1278_1.8439:
 10496 0000 00000000 		.space	76
 10496      00000000 
 10496      00000000 
 10496      00000000 
 10496      00000000 
 10497              		.section	.bss.SX1278_1.8465,"aw",%nobits
 10498              		.align	2
 10499              		.set	.LANCHOR21,. + 0
 10500              		.type	SX1278_1.8465, %object
 10501              		.size	SX1278_1.8465, 76
 10502              	SX1278_1.8465:
 10503 0000 00000000 		.space	76
 10503      00000000 
 10503      00000000 
 10503      00000000 
 10503      00000000 
 10504              		.section	.bss.SX1278_1.8490,"aw",%nobits
 10505              		.align	2
 10506              		.set	.LANCHOR24,. + 0
 10507              		.type	SX1278_1.8490, %object
 10508              		.size	SX1278_1.8490, 76
 10509              	SX1278_1.8490:
 10510 0000 00000000 		.space	76
 10510      00000000 
 10510      00000000 
 10510      00000000 
 10510      00000000 
 10511              		.section	.bss.SX1278_hw1.8438,"aw",%nobits
 10512              		.align	2
 10513              		.set	.LANCHOR18,. + 0
 10514              		.type	SX1278_hw1.8438, %object
 10515              		.size	SX1278_hw1.8438, 24
 10516              	SX1278_hw1.8438:
 10517 0000 00000000 		.space	24
 10517      00000000 
 10517      00000000 
 10517      00000000 
 10517      00000000 
 10518              		.section	.bss.SX1278_hw1.8464,"aw",%nobits
 10519              		.align	2
 10520              		.set	.LANCHOR20,. + 0
 10521              		.type	SX1278_hw1.8464, %object
ARM GAS  /tmp/ccrMssCc.s 			page 186


 10522              		.size	SX1278_hw1.8464, 24
 10523              	SX1278_hw1.8464:
 10524 0000 00000000 		.space	24
 10524      00000000 
 10524      00000000 
 10524      00000000 
 10524      00000000 
 10525              		.section	.bss.SX1278_hw1.8489,"aw",%nobits
 10526              		.align	2
 10527              		.set	.LANCHOR23,. + 0
 10528              		.type	SX1278_hw1.8489, %object
 10529              		.size	SX1278_hw1.8489, 24
 10530              	SX1278_hw1.8489:
 10531 0000 00000000 		.space	24
 10531      00000000 
 10531      00000000 
 10531      00000000 
 10531      00000000 
 10532              		.section	.bss.TSpm,"aw",%nobits
 10533              		.align	2
 10534              		.type	TSpm, %object
 10535              		.size	TSpm, 4096
 10536              	TSpm:
 10537 0000 00000000 		.space	4096
 10537      00000000 
 10537      00000000 
 10537      00000000 
 10537      00000000 
 10538              		.section	.bss.buf_rx.8468,"aw",%nobits
 10539              		.align	2
 10540              		.set	.LANCHOR22,. + 0
 10541              		.type	buf_rx.8468, %object
 10542              		.size	buf_rx.8468, 256
 10543              	buf_rx.8468:
 10544 0000 00000000 		.space	256
 10544      00000000 
 10544      00000000 
 10544      00000000 
 10544      00000000 
 10545              		.section	.bss.buf_tx.8492,"aw",%nobits
 10546              		.align	2
 10547              		.set	.LANCHOR25,. + 0
 10548              		.type	buf_tx.8492, %object
 10549              		.size	buf_tx.8492, 10
 10550              	buf_tx.8492:
 10551 0000 00000000 		.space	10
 10551      00000000 
 10551      0000
 10552              		.section	.bss.buffer.8844,"aw",%nobits
 10553              		.align	2
 10554              		.type	buffer.8844, %object
 10555              		.size	buffer.8844, 8192
 10556              	buffer.8844:
 10557 0000 00000000 		.space	8192
 10557      00000000 
 10557      00000000 
 10557      00000000 
ARM GAS  /tmp/ccrMssCc.s 			page 187


 10557      00000000 
 10558              		.section	.bss.cah.8240,"aw",%nobits
 10559              		.align	2
 10560              		.set	.LANCHOR2,. + 0
 10561              		.type	cah.8240, %object
 10562              		.size	cah.8240, 4
 10563              	cah.8240:
 10564 0000 00000000 		.space	4
 10565              		.section	.bss.cnt.8236,"aw",%nobits
 10566              		.align	1
 10567              		.set	.LANCHOR6,. + 0
 10568              		.type	cnt.8236, %object
 10569              		.size	cnt.8236, 2
 10570              	cnt.8236:
 10571 0000 0000     		.space	2
 10572              		.section	.bss.cnt2.8245,"aw",%nobits
 10573              		.align	2
 10574              		.set	.LANCHOR7,. + 0
 10575              		.type	cnt2.8245, %object
 10576              		.size	cnt2.8245, 4
 10577              	cnt2.8245:
 10578 0000 00000000 		.space	4
 10579              		.section	.bss.coile.8260,"aw",%nobits
 10580              		.set	.LANCHOR13,. + 0
 10581              		.type	coile.8260, %object
 10582              		.size	coile.8260, 1
 10583              	coile.8260:
 10584 0000 00       		.space	1
 10585              		.section	.bss.cur.8252,"aw",%nobits
 10586              		.align	1
 10587              		.set	.LANCHOR8,. + 0
 10588              		.type	cur.8252, %object
 10589              		.size	cur.8252, 2
 10590              	cur.8252:
 10591 0000 0000     		.space	2
 10592              		.section	.bss.cwh.8241,"aw",%nobits
 10593              		.align	2
 10594              		.set	.LANCHOR3,. + 0
 10595              		.type	cwh.8241, %object
 10596              		.size	cwh.8241, 4
 10597              	cwh.8241:
 10598 0000 00000000 		.space	4
 10599              		.section	.bss.datetime.8667,"aw",%nobits
 10600              		.align	2
 10601              		.set	.LANCHOR28,. + 0
 10602              		.type	datetime.8667, %object
 10603              		.size	datetime.8667, 8
 10604              	datetime.8667:
 10605 0000 00000000 		.space	8
 10605      00000000 
 10606              		.section	.bss.dcur.8253,"aw",%nobits
 10607              		.align	1
 10608              		.set	.LANCHOR5,. + 0
 10609              		.type	dcur.8253, %object
 10610              		.size	dcur.8253, 2
 10611              	dcur.8253:
 10612 0000 0000     		.space	2
ARM GAS  /tmp/ccrMssCc.s 			page 188


 10613              		.section	.bss.dinit.8845,"aw",%nobits
 10614              		.set	.LANCHOR29,. + 0
 10615              		.type	dinit.8845, %object
 10616              		.size	dinit.8845, 1
 10617              	dinit.8845:
 10618 0000 00       		.space	1
 10619              		.section	.bss.dma_buf,"aw",%nobits
 10620              		.align	2
 10621              		.set	.LANCHOR27,. + 0
 10622              		.type	dma_buf, %object
 10623              		.size	dma_buf, 24
 10624              	dma_buf:
 10625 0000 00000000 		.space	24
 10625      00000000 
 10625      00000000 
 10625      00000000 
 10625      00000000 
 10626              		.section	.bss.dma_buf.8755,"aw",%nobits
 10627              		.align	2
 10628              		.set	.LANCHOR32,. + 0
 10629              		.type	dma_buf.8755, %object
 10630              		.size	dma_buf.8755, 578
 10631              	dma_buf.8755:
 10632 0000 00000000 		.space	578
 10632      00000000 
 10632      00000000 
 10632      00000000 
 10632      00000000 
 10633              		.section	.bss.pow.8248,"aw",%nobits
 10634              		.align	1
 10635              		.set	.LANCHOR10,. + 0
 10636              		.type	pow.8248, %object
 10637              		.size	pow.8248, 2
 10638              	pow.8248:
 10639 0000 0000     		.space	2
 10640              		.section	.bss.str_num.8493,"aw",%nobits
 10641              		.align	2
 10642              		.set	.LANCHOR26,. + 0
 10643              		.type	str_num.8493, %object
 10644              		.size	str_num.8493, 5
 10645              	str_num.8493:
 10646 0000 00000000 		.space	5
 10646      00
 10647              		.section	.bss.val.8740,"aw",%nobits
 10648              		.align	2
 10649              		.set	.LANCHOR33,. + 0
 10650              		.type	val.8740, %object
 10651              		.size	val.8740, 20
 10652              	val.8740:
 10653 0000 00000000 		.space	20
 10653      00000000 
 10653      00000000 
 10653      00000000 
 10653      00000000 
 10654              		.section	.bss.vbus.8254,"aw",%nobits
 10655              		.align	1
 10656              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/ccrMssCc.s 			page 189


 10657              		.type	vbus.8254, %object
 10658              		.size	vbus.8254, 2
 10659              	vbus.8254:
 10660 0000 0000     		.space	2
 10661              		.section	.bss.vr1.8237,"aw",%nobits
 10662              		.align	1
 10663              		.set	.LANCHOR14,. + 0
 10664              		.type	vr1.8237, %object
 10665              		.size	vr1.8237, 2
 10666              	vr1.8237:
 10667 0000 0000     		.space	2
 10668              		.section	.bss.vr3.8246,"aw",%nobits
 10669              		.align	2
 10670              		.set	.LANCHOR15,. + 0
 10671              		.type	vr3.8246, %object
 10672              		.size	vr3.8246, 4
 10673              	vr3.8246:
 10674 0000 00000000 		.space	4
 10675              		.section	.bss.vr4.8247,"aw",%nobits
 10676              		.align	2
 10677              		.set	.LANCHOR16,. + 0
 10678              		.type	vr4.8247, %object
 10679              		.size	vr4.8247, 4
 10680              	vr4.8247:
 10681 0000 00000000 		.space	4
 10682              		.section	.bss.yb.8736,"aw",%nobits
 10683              		.align	2
 10684              		.set	.LANCHOR30,. + 0
 10685              		.type	yb.8736, %object
 10686              		.size	yb.8736, 1
 10687              	yb.8736:
 10688 0000 00       		.space	1
 10689              		.section	.bss.yn.8737,"aw",%nobits
 10690              		.align	2
 10691              		.set	.LANCHOR31,. + 0
 10692              		.type	yn.8737, %object
 10693              		.size	yn.8737, 1
 10694              	yn.8737:
 10695 0000 00       		.space	1
 10696              		.section	.data.p_TSpm,"aw",%progbits
 10697              		.align	2
 10698              		.type	p_TSpm, %object
 10699              		.size	p_TSpm, 4
 10700              	p_TSpm:
 10701 0000 00000000 		.word	TSpm
 10702              		.section	.data.tbuf.8742,"aw",%progbits
 10703              		.align	2
 10704              		.set	.LANCHOR34,. + 0
 10705              		.type	tbuf.8742, %object
 10706              		.size	tbuf.8742, 20
 10707              	tbuf.8742:
 10708 0000 30303030 		.ascii	"0000-00-00 00:00:00\000"
 10708      2D30302D 
 10708      30302030 
 10708      303A3030 
 10708      3A303000 
 10709              		.section	.rodata.BMP280_i2c.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccrMssCc.s 			page 190


 10710              		.align	2
 10711              	.LC69:
 10712 0000 0D0A2069 		.ascii	"\015\012 i2c_BMP280 = 0x\000"
 10712      32635F42 
 10712      4D503238 
 10712      30203D20 
 10712      307800
 10713 0013 00       		.space	1
 10714              	.LC70:
 10715 0014 0D0A2042 		.ascii	"\015\012 BMP280 \000"
 10715      4D503238 
 10715      302000
 10716 001f 00       		.space	1
 10717              	.LC71:
 10718 0020 74743D00 		.ascii	"tt=\000"
 10719              	.LC72:
 10720 0024 20543D00 		.ascii	" T=\000"
 10721              	.LC73:
 10722 0028 20703D20 		.ascii	" p= \000"
 10722      00
 10723 002d 000000   		.space	3
 10724              	.LC74:
 10725 0030 2074703D 		.ascii	" tp=\000"
 10725      00
 10726              		.section	.rodata.BMP280_spi.str1.4,"aMS",%progbits,1
 10727              		.align	2
 10728              	.LC75:
 10729 0000 0D0A2042 		.ascii	"\015\012 BMP280T1 = 0x\000"
 10729      4D503238 
 10729      30543120 
 10729      3D203078 
 10729      00
 10730              		.section	.rodata.Intro2.str1.4,"aMS",%progbits,1
 10731              		.align	2
 10732              	.LC156:
 10733 0000 0D0A2053 		.ascii	"\015\012 Start programu... \015\012\000"
 10733      74617274 
 10733      2070726F 
 10733      6772616D 
 10733      752E2E2E 
 10734              	.LC157:
 10735 0018 0D0A2044 		.ascii	"\015\012 Debug0...\000"
 10735      65627567 
 10735      302E2E2E 
 10735      00
 10736 0025 000000   		.space	3
 10737              	.LC158:
 10738 0028 0D0A2077 		.ascii	"\015\012 wXlen \000"
 10738      586C656E 
 10738      2000
 10739 0032 0000     		.space	2
 10740              	.LC159:
 10741 0034 0D0A2054 		.ascii	"\015\012 TIM4->PSC/ARR=\000"
 10741      494D342D 
 10741      3E505343 
 10741      2F415252 
 10741      3D00
ARM GAS  /tmp/ccrMssCc.s 			page 191


 10742              		.section	.rodata.LoRaRX.str1.4,"aMS",%progbits,1
 10743              		.align	2
 10744              	.LC47:
 10745 0000 0A00     		.ascii	"\012\000"
 10746              		.section	.rodata.LoRaRX1.str1.4,"aMS",%progbits,1
 10747              		.align	2
 10748              	.LC48:
 10749 0000 2054696D 		.ascii	" Time=\000"
 10749      653D00
 10750 0007 00       		.space	1
 10751              	.LC49:
 10752 0008 0D0A2052 		.ascii	"\015\012 Read Reg1=0x\000"
 10752      65616420 
 10752      52656731 
 10752      3D307800 
 10753              	.LC50:
 10754 0018 20526567 		.ascii	" Reg1 0x\000"
 10754      31203078 
 10754      00
 10755 0021 000000   		.space	3
 10756              	.LC51:
 10757 0024 3D203078 		.ascii	"= 0x\000"
 10757      00
 10758 0029 000000   		.space	3
 10759              	.LC52:
 10760 002c 0D0A2030 		.ascii	"\015\012 0-3(\000"
 10760      2D332800 
 10761              	.LC53:
 10762 0034 2920504F 		.ascii	") POWER=\000"
 10762      5745523D 
 10762      00
 10763 003d 000000   		.space	3
 10764              	.LC54:
 10765 0040 0D0A2030 		.ascii	"\015\012 0-6(\000"
 10765      2D362800 
 10766              	.LC55:
 10767 0048 29205346 		.ascii	") SF=\000"
 10767      3D00
 10768 004e 0000     		.space	2
 10769              	.LC56:
 10770 0050 0D0A2030 		.ascii	"\015\012 0-9(\000"
 10770      2D392800 
 10771              	.LC57:
 10772 0058 29204257 		.ascii	") BW=\000"
 10772      3D00
 10773 005e 0000     		.space	2
 10774              	.LC58:
 10775 0060 0D0A2073 		.ascii	"\015\012 sek(\000"
 10775      656B2800 
 10776              	.LC59:
 10777 0068 29204465 		.ascii	") Delay=\000"
 10777      6C61793D 
 10777      00
 10778 0071 000000   		.space	3
 10779              	.LC60:
 10780 0074 0D0A204D 		.ascii	"\015\012 Menu > \000"
 10780      656E7520 
ARM GAS  /tmp/ccrMssCc.s 			page 192


 10780      3E2000
 10781 007f 00       		.space	1
 10782              	.LC61:
 10783 0080 0D0A2070 		.ascii	"\015\012 prssi->\000"
 10783      72737369 
 10783      2D3E00
 10784              		.section	.rodata.MAX44009_i2c.str1.4,"aMS",%progbits,1
 10785              		.align	2
 10786              	.LC68:
 10787 0000 0D0A2041 		.ascii	"\015\012 APDS9960_ID=0x\000"
 10787      50445339 
 10787      3936305F 
 10787      49443D30 
 10787      7800
 10788              		.section	.rodata.MemCard_Menu.str1.4,"aMS",%progbits,1
 10789              		.align	2
 10790              	.LC110:
 10791 0000 0D0A5344 		.ascii	"\015\012SD Card Init = \000"
 10791      20436172 
 10791      6420496E 
 10791      6974203D 
 10791      2000
 10792 0012 0000     		.space	2
 10793              	.LC111:
 10794 0014 0D0A5344 		.ascii	"\015\012SD Card Init ERROR \000"
 10794      20436172 
 10794      6420496E 
 10794      69742045 
 10794      52524F52 
 10795 002a 0000     		.space	2
 10796              	.LC112:
 10797 002c 0D0A5344 		.ascii	"\015\012SD Card ser_num    = \000"
 10797      20436172 
 10797      64207365 
 10797      725F6E75 
 10797      6D202020 
 10798              	.LC113:
 10799 0044 0D0A5344 		.ascii	"\015\012SD Card block_num  = \000"
 10799      20436172 
 10799      6420626C 
 10799      6F636B5F 
 10799      6E756D20 
 10800              	.LC114:
 10801 005c 0D0A5344 		.ascii	"\015\012SD Card read_blen  = \000"
 10801      20436172 
 10801      64207265 
 10801      61645F62 
 10801      6C656E20 
 10802              	.LC115:
 10803 0074 0D0A5344 		.ascii	"\015\012SD Card write_blen = \000"
 10803      20436172 
 10803      64207772 
 10803      6974655F 
 10803      626C656E 
 10804              	.LC116:
 10805 008c 53746174 		.ascii	"Statistic Card  \000"
 10805      69737469 
ARM GAS  /tmp/ccrMssCc.s 			page 193


 10805      63204361 
 10805      72642020 
 10805      00
 10806 009d 000000   		.space	3
 10807              	.LC117:
 10808 00a0 0D0A5344 		.ascii	"\015\012SD Card Not Init\000"
 10808      20436172 
 10808      64204E6F 
 10808      7420496E 
 10808      697400
 10809 00b3 00       		.space	1
 10810              	.LC118:
 10811 00b4 46696C6C 		.ascii	"Fill sector\000"
 10811      20736563 
 10811      746F7200 
 10812              	.LC119:
 10813 00c0 0D0A2053 		.ascii	"\015\012 Start Block  = 0x\000"
 10813      74617274 
 10813      20426C6F 
 10813      636B2020 
 10813      3D203078 
 10814 00d5 000000   		.space	3
 10815              	.LC120:
 10816 00d8 0D0A2045 		.ascii	"\015\012 End   Blocks = 0x\000"
 10816      6E642020 
 10816      20426C6F 
 10816      636B7320 
 10816      3D203078 
 10817 00ed 000000   		.space	3
 10818              	.LC121:
 10819 00f0 0D0A204E 		.ascii	"\015\012 Num Blocks   = \000"
 10819      756D2042 
 10819      6C6F636B 
 10819      73202020 
 10819      3D2000
 10820 0103 00       		.space	1
 10821              	.LC122:
 10822 0104 0D0A2044 		.ascii	"\015\012 Data to fill = 0x\000"
 10822      61746120 
 10822      746F2066 
 10822      696C6C20 
 10822      3D203078 
 10823 0119 000000   		.space	3
 10824              	.LC123:
 10825 011c 0D0A2046 		.ascii	"\015\012 Fill error = 0x\000"
 10825      696C6C20 
 10825      6572726F 
 10825      72203D20 
 10825      307800
 10826 012f 00       		.space	1
 10827              	.LC124:
 10828 0130 0D0A2046 		.ascii	"\015\012 Fill OK \000"
 10828      696C6C20 
 10828      4F4B2000 
 10829              	.LC125:
 10830 013c 2054696D 		.ascii	" Time[us] = \000"
 10830      655B7573 
ARM GAS  /tmp/ccrMssCc.s 			page 194


 10830      5D203D20 
 10830      00
 10831 0149 000000   		.space	3
 10832              	.LC126:
 10833 014c 4D6F6469 		.ascii	"Modify memory\000"
 10833      6679206D 
 10833      656D6F72 
 10833      7900
 10834 015a 0000     		.space	2
 10835              	.LC127:
 10836 015c 0D0A204D 		.ascii	"\015\012 Memory Addr = 0x\000"
 10836      656D6F72 
 10836      79204164 
 10836      6472203D 
 10836      20307800 
 10837              	.LC128:
 10838 0170 0D0A204D 		.ascii	"\015\012 Memory Data = 0x\000"
 10838      656D6F72 
 10838      79204461 
 10838      7461203D 
 10838      20307800 
 10839              	.LC129:
 10840 0184 0D0A204E 		.ascii	"\015\012 New Data    = 0x\000"
 10840      65772044 
 10840      61746120 
 10840      2020203D 
 10840      20307800 
 10841              	.LC130:
 10842 0198 0D0A204D 		.ascii	"\015\012 Modify OK\000"
 10842      6F646966 
 10842      79204F4B 
 10842      00
 10843 01a5 000000   		.space	3
 10844              	.LC131:
 10845 01a8 0D0A2052 		.ascii	"\015\012 ReadB 0x\000"
 10845      65616442 
 10845      20307800 
 10846              	.LC132:
 10847 01b4 20204672 		.ascii	"  From 0x\000"
 10847      6F6D2030 
 10847      7800
 10848 01be 0000     		.space	2
 10849              	.LC133:
 10850 01c0 2D3E3078 		.ascii	"->0x\000"
 10850      00
 10851 01c5 000000   		.space	3
 10852              	.LC134:
 10853 01c8 20205772 		.ascii	"  WriteB 0x\000"
 10853      69746542 
 10853      20307800 
 10854              	.LC135:
 10855 01d4 20203078 		.ascii	"  0x\000"
 10855      00
 10856 01d9 000000   		.space	3
 10857              	.LC136:
 10858 01dc 0D0A2073 		.ascii	"\015\012 sectorNumber = 0x\000"
 10858      6563746F 
ARM GAS  /tmp/ccrMssCc.s 			page 195


 10858      724E756D 
 10858      62657220 
 10858      3D203078 
 10859 01f1 000000   		.space	3
 10860              	.LC137:
 10861 01f4 20745F63 		.ascii	" t_crc = \000"
 10861      7263203D 
 10861      2000
 10862 01fe 0000     		.space	2
 10863              	.LC138:
 10864 0200 0D0A2052 		.ascii	"\015\012 Read Error = \000"
 10864      65616420 
 10864      4572726F 
 10864      72203D20 
 10864      00
 10865 0211 000000   		.space	3
 10866              	.LC139:
 10867 0214 52656164 		.ascii	"Read multi sector\000"
 10867      206D756C 
 10867      74692073 
 10867      6563746F 
 10867      7200
 10868 0226 0000     		.space	2
 10869              	.LC140:
 10870 0228 0D0A204E 		.ascii	"\015\012 Num Sectors  = \000"
 10870      756D2053 
 10870      6563746F 
 10870      72732020 
 10870      3D2000
 10871 023b 00       		.space	1
 10872              	.LC141:
 10873 023c 0D0A2052 		.ascii	"\015\012 Read error = 0x\000"
 10873      65616420 
 10873      6572726F 
 10873      72203D20 
 10873      307800
 10874 024f 00       		.space	1
 10875              	.LC142:
 10876 0250 0D0A2052 		.ascii	"\015\012 Read OK \000"
 10876      65616420 
 10876      4F4B2000 
 10877              	.LC143:
 10878 025c 20793220 		.ascii	" y2 = \000"
 10878      3D2000
 10879 0263 00       		.space	1
 10880              	.LC144:
 10881 0264 0900     		.ascii	"\011\000"
 10882 0266 0000     		.space	2
 10883              	.LC145:
 10884 0268 56696577 		.ascii	"View last sector\000"
 10884      206C6173 
 10884      74207365 
 10884      63746F72 
 10884      00
 10885 0279 000000   		.space	3
 10886              	.LC146:
 10887 027c 0D0A2046 		.ascii	"\015\012 First Sector = 0x\000"
ARM GAS  /tmp/ccrMssCc.s 			page 196


 10887      69727374 
 10887      20536563 
 10887      746F7220 
 10887      3D203078 
 10888 0291 000000   		.space	3
 10889              	.LC147:
 10890 0294 0D0A2053 		.ascii	"\015\012 Searching \000"
 10890      65617263 
 10890      68696E67 
 10890      2000
 10891 02a2 0000     		.space	2
 10892              	.LC148:
 10893 02a4 0D0A2045 		.ascii	"\015\012 Exit Read Error !!!\000"
 10893      78697420 
 10893      52656164 
 10893      20457272 
 10893      6F722021 
 10894 02bb 00       		.space	1
 10895              	.LC149:
 10896 02bc 0D0A2046 		.ascii	"\015\012 Find Sector = 0x\000"
 10896      696E6420 
 10896      53656374 
 10896      6F72203D 
 10896      20307800 
 10897              	.LC150:
 10898 02d0 0D0A2020 		.ascii	"\015\012     lenBlock= \000"
 10898      2020206C 
 10898      656E426C 
 10898      6F636B3D 
 10898      2000
 10899 02e2 0000     		.space	2
 10900              	.LC151:
 10901 02e4 0D0A2042 		.ascii	"\015\012 Block = \000"
 10901      6C6F636B 
 10901      203D2000 
 10902              	.LC152:
 10903 02f0 0D0A2052 		.ascii	"\015\012 Read Error \000"
 10903      65616420 
 10903      4572726F 
 10903      722000
 10904 02ff 00       		.space	1
 10905              	.LC153:
 10906 0300 0D0A2053 		.ascii	"\015\012 SD_Status \015\012 \000"
 10906      445F5374 
 10906      61747573 
 10906      200D0A20 
 10906      00
 10907 0311 000000   		.space	3
 10908              	.LC154:
 10909 0314 54657374 		.ascii	"Testing ...\000"
 10909      696E6720 
 10909      2E2E2E00 
 10910              	.LC155:
 10911 0320 556E6B72 		.ascii	"Unkr_dma_buf Command !\000"
 10911      5F646D61 
 10911      5F627566 
 10911      20436F6D 
ARM GAS  /tmp/ccrMssCc.s 			page 197


 10911      6D616E64 
 10912              		.section	.rodata.Menu1.str1.4,"aMS",%progbits,1
 10913              		.align	2
 10914              	.LC106:
 10915 0000 0A0D0A3D 		.ascii	"\012\015\012======= STM32F4 SD/MMC Card ==========="
 10915      3D3D3D3D 
 10915      3D3D2053 
 10915      544D3332 
 10915      46342053 
 10916 002a 3D3D3D3D 		.ascii	"===========\015\012\000"
 10916      3D3D3D3D 
 10916      3D3D3D0D 
 10916      0A00
 10917              	.LC107:
 10918 0038 2069202D 		.ascii	" i - Init      r - Read  sector  e - Erase sector  "
 10918      20496E69 
 10918      74202020 
 10918      20202072 
 10918      202D2052 
 10919 006b 200D0A00 		.ascii	" \015\012\000"
 10920 006f 00       		.space	1
 10921              	.LC108:
 10922 0070 2064202D 		.ascii	" d - Delete    f - Write sector  s - Statistic Card"
 10922      2044656C 
 10922      65746520 
 10922      20202066 
 10922      202D2057 
 10923 00a3 200D0A00 		.ascii	" \015\012\000"
 10924 00a7 00       		.space	1
 10925              	.LC109:
 10926 00a8 206D202D 		.ascii	" m - Modf mem  c - Copy  sector  n - Next Cluster  "
 10926      204D6F64 
 10926      66206D65 
 10926      6D202063 
 10926      202D2043 
 10927 00db 0D0A00   		.ascii	"\015\012\000"
 10928              		.section	.rodata.SPI_Tool.str1.4,"aMS",%progbits,1
 10929              		.align	2
 10930              	.LC99:
 10931 0000 0D0A496E 		.ascii	"\015\012Init spi    = \000"
 10931      69742073 
 10931      70692020 
 10931      20203D20 
 10931      00
 10932 0011 000000   		.space	3
 10933              	.LC100:
 10934 0014 0D0A2052 		.ascii	"\015\012 Reg = \000"
 10934      6567203D 
 10934      2000
 10935 001e 0000     		.space	2
 10936              	.LC101:
 10937 0020 436F7079 		.ascii	"Copy memory\000"
 10937      206D656D 
 10937      6F727900 
 10938              	.LC102:
 10939 002c 0D0A2053 		.ascii	"\015\012 Src Mem adr = 0x\000"
 10939      7263204D 
ARM GAS  /tmp/ccrMssCc.s 			page 198


 10939      656D2061 
 10939      6472203D 
 10939      20307800 
 10940              	.LC103:
 10941 0040 0D0A2048 		.ascii	"\015\012 How many byte = \000"
 10941      6F77206D 
 10941      616E7920 
 10941      62797465 
 10941      203D2000 
 10942              	.LC104:
 10943 0054 0D0A2044 		.ascii	"\015\012 Dst mem adr = 0x\000"
 10943      7374206D 
 10943      656D2061 
 10943      6472203D 
 10943      20307800 
 10944              	.LC105:
 10945 0068 4E69657A 		.ascii	"Nieznana Komenda\000"
 10945      6E616E61 
 10945      204B6F6D 
 10945      656E6461 
 10945      00
 10946              		.section	.rodata.SPI_Tool_Menu.str1.4,"aMS",%progbits,1
 10947              		.align	2
 10948              	.LC95:
 10949 0000 0A0D0A3D 		.ascii	"\012\015\012======= STM32F1 SPI TOOL =============="
 10949      3D3D3D3D 
 10949      3D3D2053 
 10949      544D3332 
 10949      46312053 
 10950 002a 3D3D3D3D 		.ascii	"===========\015\012\000"
 10950      3D3D3D3D 
 10950      3D3D3D0D 
 10950      0A00
 10951              	.LC96:
 10952 0038 2069202D 		.ascii	" i - Init      r - Read  sector  e -               "
 10952      20496E69 
 10952      74202020 
 10952      20202072 
 10952      202D2052 
 10953 006b 200D0A00 		.ascii	" \015\012\000"
 10954 006f 00       		.space	1
 10955              	.LC97:
 10956 0070 2064202D 		.ascii	" d - Delete    f - Write sector  s -               "
 10956      2044656C 
 10956      65746520 
 10956      20202066 
 10956      202D2057 
 10957 00a3 200D0A00 		.ascii	" \015\012\000"
 10958 00a7 00       		.space	1
 10959              	.LC98:
 10960 00a8 206D202D 		.ascii	" m - Modf      c - Copy  sector  n -               "
 10960      204D6F64 
 10960      66202020 
 10960      20202063 
 10960      202D2043 
 10961 00db 0D0A00   		.ascii	"\015\012\000"
 10962              		.section	.rodata.SetDate.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccrMssCc.s 			page 199


 10963              		.align	2
 10964              	.LC162:
 10965 0000 0D0A2072 		.ascii	"\015\012 rok = \000"
 10965      6F6B203D 
 10965      2000
 10966 000a 0000     		.space	2
 10967              	.LC163:
 10968 000c 0D0A206D 		.ascii	"\015\012 mies = \000"
 10968      69657320 
 10968      3D2000
 10969 0017 00       		.space	1
 10970              	.LC164:
 10971 0018 0D0A2064 		.ascii	"\015\012 dzien = \000"
 10971      7A69656E 
 10971      203D2000 
 10972              	.LC165:
 10973 0024 0D0A2067 		.ascii	"\015\012 gdz = \000"
 10973      647A203D 
 10973      2000
 10974 002e 0000     		.space	2
 10975              	.LC166:
 10976 0030 0D0A206D 		.ascii	"\015\012 min = \000"
 10976      696E203D 
 10976      2000
 10977 003a 0000     		.space	2
 10978              	.LC167:
 10979 003c 0D0A2073 		.ascii	"\015\012 sek = \000"
 10979      656B203D 
 10979      2000
 10980 0046 0000     		.space	2
 10981              	.LC168:
 10982 0048 0D0A2054 		.ascii	"\015\012 TimStmp = \000"
 10982      696D5374 
 10982      6D70203D 
 10982      2000
 10983              		.section	.rodata.TSL2561_i2c.str1.4,"aMS",%progbits,1
 10984              		.align	2
 10985              	.LC67:
 10986 0000 2C00     		.ascii	",\000"
 10987              		.section	.rodata.Zegarek.str1.4,"aMS",%progbits,1
 10988              		.align	2
 10989              	.LC160:
 10990 0000 30302D30 		.ascii	"00-00-00\000"
 10990      302D3030 
 10990      00
 10991 0009 000000   		.space	3
 10992              	.LC161:
 10993 000c 30303030 		.ascii	"0000-00-00\000"
 10993      2D30302D 
 10993      303000
 10994              		.section	.rodata._ytab,"a",%progbits
 10995              		.align	2
 10996              		.set	.LANCHOR0,. + 0
 10997              		.type	_ytab, %object
 10998              		.size	_ytab, 96
 10999              	_ytab:
 11000 0000 1F000000 		.word	31
ARM GAS  /tmp/ccrMssCc.s 			page 200


 11001 0004 1C000000 		.word	28
 11002 0008 1F000000 		.word	31
 11003 000c 1E000000 		.word	30
 11004 0010 1F000000 		.word	31
 11005 0014 1E000000 		.word	30
 11006 0018 1F000000 		.word	31
 11007 001c 1F000000 		.word	31
 11008 0020 1E000000 		.word	30
 11009 0024 1F000000 		.word	31
 11010 0028 1E000000 		.word	30
 11011 002c 1F000000 		.word	31
 11012 0030 1F000000 		.word	31
 11013 0034 1D000000 		.word	29
 11014 0038 1F000000 		.word	31
 11015 003c 1E000000 		.word	30
 11016 0040 1F000000 		.word	31
 11017 0044 1E000000 		.word	30
 11018 0048 1F000000 		.word	31
 11019 004c 1F000000 		.word	31
 11020 0050 1E000000 		.word	30
 11021 0054 1F000000 		.word	31
 11022 0058 1E000000 		.word	30
 11023 005c 1F000000 		.word	31
 11024              		.section	.rodata.fun_tool.str1.4,"aMS",%progbits,1
 11025              		.align	2
 11026              	.LC76:
 11027 0000 0D0A2046 		.ascii	"\015\012 FLASH memory Read = \000"
 11027      4C415348 
 11027      206D656D 
 11027      6F727920 
 11027      52656164 
 11028              	.LC77:
 11029 0018 0D0A2046 		.ascii	"\015\012 Flash memory Page =\000"
 11029      6C617368 
 11029      206D656D 
 11029      6F727920 
 11029      50616765 
 11030 002f 00       		.space	1
 11031              	.LC78:
 11032 0030 0D0A2000 		.ascii	"\015\012 \000"
 11033              	.LC79:
 11034 0034 0D0A0A20 		.ascii	"\015\012\012 \000"
 11034      00
 11035 0039 000000   		.space	3
 11036              	.LC80:
 11037 003c 202000   		.ascii	"  \000"
 11038 003f 00       		.space	1
 11039              	.LC81:
 11040 0040 20637263 		.ascii	" crc = \000"
 11040      203D2000 
 11041              	.LC82:
 11042 0048 0D0A2046 		.ascii	"\015\012 Flash memory Page = \000"
 11042      6C617368 
 11042      206D656D 
 11042      6F727920 
 11042      50616765 
 11043              	.LC83:
ARM GAS  /tmp/ccrMssCc.s 			page 201


 11044 0060 0D0A204B 		.ascii	"\015\012 Kasowanie pamieci FLASH = \000"
 11044      61736F77 
 11044      616E6965 
 11044      2070616D 
 11044      69656369 
 11045 007e 0000     		.space	2
 11046              	.LC84:
 11047 0080 0D0A2047 		.ascii	"\015\012 Godzina = \000"
 11047      6F647A69 
 11047      6E61203D 
 11047      2000
 11048 008e 0000     		.space	2
 11049              	.LC85:
 11050 0090 0D0A204D 		.ascii	"\015\012 Minut   = \000"
 11050      696E7574 
 11050      2020203D 
 11050      2000
 11051 009e 0000     		.space	2
 11052              	.LC86:
 11053 00a0 0D0A2053 		.ascii	"\015\012 Sekunda = \000"
 11053      656B756E 
 11053      6461203D 
 11053      2000
 11054 00ae 0000     		.space	2
 11055              	.LC87:
 11056 00b0 0D0A2052 		.ascii	"\015\012 Read Start !\000"
 11056      65616420 
 11056      53746172 
 11056      74202100 
 11057              	.LC88:
 11058 00c0 0D0A2052 		.ascii	"\015\012 Read Done !\000"
 11058      65616420 
 11058      446F6E65 
 11058      202100
 11059 00cf 00       		.space	1
 11060              	.LC89:
 11061 00d0 0D0A2043 		.ascii	"\015\012 Clear !\000"
 11061      6C656172 
 11061      202100
 11062 00db 00       		.space	1
 11063              	.LC90:
 11064 00dc 52656164 		.ascii	"Read sector\000"
 11064      20736563 
 11064      746F7200 
 11065              	.LC91:
 11066 00e8 0D0A2073 		.ascii	"\015\012 sectorNumber = \000"
 11066      6563746F 
 11066      724E756D 
 11066      62657220 
 11066      3D2000
 11067 00fb 00       		.space	1
 11068              	.LC92:
 11069 00fc 20745F72 		.ascii	" t_rsdio = \000"
 11069      7364696F 
 11069      203D2000 
 11070              	.LC93:
 11071 0108 0D0A2052 		.ascii	"\015\012 Read Error !!!\000"
ARM GAS  /tmp/ccrMssCc.s 			page 202


 11071      65616420 
 11071      4572726F 
 11071      72202121 
 11071      2100
 11072              		.section	.rodata.head.str1.4,"aMS",%progbits,1
 11073              		.align	2
 11074              	.LC10:
 11075 0000 0C0D0A20 		.ascii	"\014\015\012 Mini STM32F103C8T6 RAM   \000"
 11075      4D696E69 
 11075      2053544D 
 11075      33324631 
 11075      30334338 
 11076 001e 0000     		.space	2
 11077              	.LC11:
 11078 0020 204D487A 		.ascii	" MHz\000"
 11078      00
 11079              		.section	.rodata.ili9486.str1.4,"aMS",%progbits,1
 11080              		.align	2
 11081              	.LC39:
 11082 0000 0D0A2072 		.ascii	"\015\012 reg = 0x\000"
 11082      6567203D 
 11082      20307800 
 11083              	.LC40:
 11084 000c 0D0A2064 		.ascii	"\015\012 dat = 0x\000"
 11084      6174203D 
 11084      20307800 
 11085              	.LC41:
 11086 0018 0C00     		.ascii	"\014\000"
 11087 001a 0000     		.space	2
 11088              	.LC42:
 11089 001c 0A0D0A3D 		.ascii	"\012\015\012======= ILI9486 ======================="
 11089      3D3D3D3D 
 11089      3D3D2049 
 11089      4C493934 
 11089      3836203D 
 11090 0046 3D3D3D3D 		.ascii	"===========\015\012\000"
 11090      3D3D3D3D 
 11090      3D3D3D0D 
 11090      0A00
 11091              	.LC43:
 11092 0054 2072202D 		.ascii	" r - Read   c - Clear page  \015\012\000"
 11092      20526561 
 11092      64202020 
 11092      63202D20 
 11092      436C6561 
 11093 0073 00       		.space	1
 11094              	.LC44:
 11095 0074 2077202D 		.ascii	" w - Write  l - Loop read   \015\012\000"
 11095      20577269 
 11095      74652020 
 11095      6C202D20 
 11095      4C6F6F70 
 11096 0093 00       		.space	1
 11097              	.LC45:
 11098 0094 3D3D3D3D 		.ascii	"==================================================\015"
 11098      3D3D3D3D 
 11098      3D3D3D3D 
ARM GAS  /tmp/ccrMssCc.s 			page 203


 11098      3D3D3D3D 
 11098      3D3D3D3D 
 11099 00c7 0A203E20 		.ascii	"\012 > \000"
 11099      00
 11100              	.LC46:
 11101 00cc 0D00     		.ascii	"\015\000"
 11102              		.section	.rodata.jdrs.9055,"a",%progbits
 11103              		.align	2
 11104              		.set	.LANCHOR35,. + 0
 11105              		.type	jdrs.9055, %object
 11106              		.size	jdrs.9055, 16
 11107              	jdrs.9055:
 11108 0000 3C240140 		.word	1073816636
 11109 0004 40240140 		.word	1073816640
 11110 0008 44240140 		.word	1073816644
 11111 000c 48240140 		.word	1073816648
 11112              		.section	.rodata.lexmark_lcd.str1.4,"aMS",%progbits,1
 11113              		.align	2
 11114              	.LC63:
 11115 0000 57697461 		.ascii	"Witaj szkolo         \000"
 11115      6A20737A 
 11115      6B6F6C6F 
 11115      20202020 
 11115      20202020 
 11116 0016 0000     		.space	2
 11117              	.LC64:
 11118 0018 5A617072 		.ascii	"Zapraszam do pracy        \000"
 11118      61737A61 
 11118      6D20646F 
 11118      20707261 
 11118      63792020 
 11119 0033 00       		.space	1
 11120              	.LC65:
 11121 0034 20202020 		.ascii	"                          \000"
 11121      20202020 
 11121      20202020 
 11121      20202020 
 11121      20202020 
 11122 004f 00       		.space	1
 11123              	.LC66:
 11124 0050 20545B75 		.ascii	" T[us]=\000"
 11124      735D3D00 
 11125              		.section	.rodata.lion_updown.str1.4,"aMS",%progbits,1
 11126              		.align	2
 11127              	.LC17:
 11128 0000 0C205541 		.ascii	"\014 UART2 \000"
 11128      52543220 
 11128      00
 11129 0009 000000   		.space	3
 11130              	.LC18:
 11131 000c 2E00     		.ascii	".\000"
 11132 000e 0000     		.space	2
 11133              	.LC19:
 11134 0010 5600     		.ascii	"V\000"
 11135 0012 0000     		.space	2
 11136              	.LC20:
 11137 0014 6D4100   		.ascii	"mA\000"
ARM GAS  /tmp/ccrMssCc.s 			page 204


 11138 0017 00       		.space	1
 11139              	.LC21:
 11140 0018 6D416800 		.ascii	"mAh\000"
 11141              	.LC22:
 11142 001c 5700     		.ascii	"W\000"
 11143 001e 0000     		.space	2
 11144              	.LC23:
 11145 0020 6D576800 		.ascii	"mWh\000"
 11146              	.LC24:
 11147 0024 6F686D00 		.ascii	"ohm\000"
 11148              	.LC25:
 11149 0028 0D2000   		.ascii	"\015 \000"
 11150 002b 00       		.space	1
 11151              	.LC26:
 11152 002c 1B5B4B00 		.ascii	"\033[K\000"
 11153              	.LC27:
 11154 0030 30202020 		.ascii	"0        1         2         3         4         5\000"
 11154      20202020 
 11154      20312020 
 11154      20202020 
 11154      20202032 
 11155 0063 00       		.space	1
 11156              	.LC28:
 11157 0064 31323334 		.ascii	"123456789 123456789 123456789 123456789 123456789 1"
 11157      35363738 
 11157      39203132 
 11157      33343536 
 11157      37383920 
 11158 0097 32333435 		.ascii	"234567890\000"
 11158      36373839 
 11158      3000
 11159 00a1 000000   		.space	3
 11160              	.LC29:
 11161 00a4 506F6461 		.ascii	"Podaj wrtosc= \000"
 11161      6A207772 
 11161      746F7363 
 11161      3D2000
 11162 00b3 00       		.space	1
 11163              	.LC30:
 11164 00b4 1B5B4B57 		.ascii	"\033[KWartosc ileZnak= \000"
 11164      6172746F 
 11164      73632069 
 11164      6C655A6E 
 11164      616B3D20 
 11165 00c9 000000   		.space	3
 11166              	.LC31:
 11167 00cc 1B5B3131 		.ascii	"\033[11;36H\000"
 11167      3B333648 
 11167      00
 11168 00d5 000000   		.space	3
 11169              	.LC32:
 11170 00d8 5A65726F 		.ascii	"Zerowanie t/n=\000"
 11170      77616E69 
 11170      6520742F 
 11170      6E3D00
 11171 00e7 00       		.space	1
 11172              	.LC33:
ARM GAS  /tmp/ccrMssCc.s 			page 205


 11173 00e8 20506F64 		.ascii	" Podaj wrtosc= \000"
 11173      616A2077 
 11173      72746F73 
 11173      633D2000 
 11174              	.LC34:
 11175 00f8 1B5B4B69 		.ascii	"\033[KileZnak,Wartosc=\000"
 11175      6C655A6E 
 11175      616B2C57 
 11175      6172746F 
 11175      73633D00 
 11176              	.LC35:
 11177 010c 204C6164 		.ascii	" Laduj do 70% x [mAh]=\000"
 11177      756A2064 
 11177      6F203730 
 11177      25207820 
 11177      5B6D4168 
 11178 0123 00       		.space	1
 11179              	.LC36:
 11180 0124 2000     		.ascii	" \000"
 11181 0126 0000     		.space	2
 11182              	.LC37:
 11183 0128 1B5B4B20 		.ascii	"\033[K Rozladuj [t/n]=\000"
 11183      526F7A6C 
 11183      6164756A 
 11183      205B742F 
 11183      6E5D3D00 
 11184              	.LC38:
 11185 013c 1B5B4B4C 		.ascii	"\033[KLaduj do [mAh]=\000"
 11185      6164756A 
 11185      20646F20 
 11185      5B6D4168 
 11185      5D3D00
 11186              		.section	.rodata.liontrend.str1.4,"aMS",%progbits,1
 11187              		.align	2
 11188              	.LC12:
 11189 0000 763D00   		.ascii	"v=\000"
 11190 0003 00       		.space	1
 11191              	.LC13:
 11192 0004 0D0A00   		.ascii	"\015\012\000"
 11193 0007 00       		.space	1
 11194              	.LC14:
 11195 0008 633D00   		.ascii	"c=\000"
 11196              		.section	.rodata.oblicz.str1.4,"aMS",%progbits,1
 11197              		.align	2
 11198              	.LC15:
 11199 0000 0C205541 		.ascii	"\014 UART1 \000"
 11199      52543120 
 11199      00
 11200 0009 000000   		.space	3
 11201              	.LC16:
 11202 000c 20622F73 		.ascii	" b/s \015\012\000"
 11202      200D0A00 
 11203              		.section	.rodata.qtouch.str1.4,"aMS",%progbits,1
 11204              		.align	2
 11205              	.LC94:
 11206 0000 0D0A2051 		.ascii	"\015\012 QT =\000"
 11206      54203D00 
ARM GAS  /tmp/ccrMssCc.s 			page 206


 11207              		.section	.rodata.ws2812led.str1.4,"aMS",%progbits,1
 11208              		.align	2
 11209              	.LC62:
 11210 0000 0D0A2044 		.ascii	"\015\012 DMA start...\000"
 11210      4D412073 
 11210      74617274 
 11210      2E2E2E00 
 11211              		.ident	"GCC: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907]"
ARM GAS  /tmp/ccrMssCc.s 			page 207


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccrMssCc.s:69     .text.gmtime_r.isra.0.constprop.2:00000000 $t
     /tmp/ccrMssCc.s:76     .text.gmtime_r.isra.0.constprop.2:00000000 gmtime_r.isra.0.constprop.2
     /tmp/ccrMssCc.s:264    .text.gmtime_r.isra.0.constprop.2:00000154 $d
                            *COM*:00000024 ptm
     /tmp/ccrMssCc.s:274    .text.head:00000000 $t
     /tmp/ccrMssCc.s:282    .text.head:00000000 head
     /tmp/ccrMssCc.s:305    .text.head:00000024 $d
     /tmp/ccrMssCc.s:309    .text.liontrend:00000000 $t
     /tmp/ccrMssCc.s:317    .text.liontrend:00000000 liontrend
     /tmp/ccrMssCc.s:446    .text.liontrend:00000124 $d
     /tmp/ccrMssCc.s:452    .text.oblicz:00000000 $t
     /tmp/ccrMssCc.s:460    .text.oblicz:00000000 oblicz
     /tmp/ccrMssCc.s:591    .text.oblicz:000000dc $d
                            *COM*:00000004 PutChar
     /tmp/ccrMssCc.s:606    .text.lion_updown:00000000 $t
     /tmp/ccrMssCc.s:614    .text.lion_updown:00000000 lion_updown
     /tmp/ccrMssCc.s:988    .text.lion_updown:00000298 $d
     /tmp/ccrMssCc.s:1014   .text.lion_updown:00000300 $t
     /tmp/ccrMssCc.s:1036   .text.lion_updown:00000318 $d
                            *COM*:00000004 trg1
                            *COM*:00000004 trg0
                            *COM*:00000004 trg2
                            *COM*:00000004 trg3
     /tmp/ccrMssCc.s:1074   .text.lion_updown:000003a8 $t
     /tmp/ccrMssCc.s:1437   .text.lion_updown:000005e0 $d
     /tmp/ccrMssCc.s:1461   .text.lion_updown:00000638 $t
     /tmp/ccrMssCc.s:1873   .text.lion_updown:0000091c $d
                            *COM*:00000004 delay_us
     /tmp/ccrMssCc.s:1908   .text.lion_updown:000009a0 $t
     /tmp/ccrMssCc.s:2033   .text.lion_updown:00000a64 $d
     /tmp/ccrMssCc.s:2044   .text.startup.main:00000000 $t
     /tmp/ccrMssCc.s:2052   .text.startup.main:00000000 main
     /tmp/ccrMssCc.s:2143   .text.startup.main:00000074 $d
     /tmp/ccrMssCc.s:2154   .text.uht:00000000 $t
     /tmp/ccrMssCc.s:2162   .text.uht:00000000 uht
     /tmp/ccrMssCc.s:2177   .text.uht:00000010 $d
     /tmp/ccrMssCc.s:2180   .text.rtc_calibrate:00000000 $t
     /tmp/ccrMssCc.s:2188   .text.rtc_calibrate:00000000 rtc_calibrate
     /tmp/ccrMssCc.s:2351   .text.rtc_calibrate:00000104 $d
                            *COM*:00000004 Timt
     /tmp/ccrMssCc.s:2366   .text.testwsk:00000000 $t
     /tmp/ccrMssCc.s:2374   .text.testwsk:00000000 testwsk
     /tmp/ccrMssCc.s:2382   .text.veml6075:00000000 $t
     /tmp/ccrMssCc.s:2390   .text.veml6075:00000000 veml6075
     /tmp/ccrMssCc.s:2495   .text.veml6075:000000a0 $d
     /tmp/ccrMssCc.s:2510   .text.softSPI_w:00000000 $t
     /tmp/ccrMssCc.s:2518   .text.softSPI_w:00000000 softSPI_w
     /tmp/ccrMssCc.s:2588   .text.softSPI_w:00000064 $d
     /tmp/ccrMssCc.s:2595   .text.softSPI_r:00000000 $t
     /tmp/ccrMssCc.s:2603   .text.softSPI_r:00000000 softSPI_r
     /tmp/ccrMssCc.s:2655   .text.softSPI_r:00000038 $d
     /tmp/ccrMssCc.s:2660   .text.ili9486:00000000 $t
     /tmp/ccrMssCc.s:2668   .text.ili9486:00000000 ili9486
     /tmp/ccrMssCc.s:2870   .text.ili9486:00000128 $d
     /tmp/ccrMssCc.s:2887   .text.wiznet5500:00000000 $t
ARM GAS  /tmp/ccrMssCc.s 			page 208


     /tmp/ccrMssCc.s:2895   .text.wiznet5500:00000000 wiznet5500
     /tmp/ccrMssCc.s:2969   .text.wiznet5500:00000074 $d
     /tmp/ccrMssCc.s:2979   .text.uv_meter:00000000 $t
     /tmp/ccrMssCc.s:2987   .text.uv_meter:00000000 uv_meter
     /tmp/ccrMssCc.s:3077   .text.uv_meter:00000078 $d
     /tmp/ccrMssCc.s:3085   .text.IRQLoraInit:00000000 $t
     /tmp/ccrMssCc.s:3093   .text.IRQLoraInit:00000000 IRQLoraInit
     /tmp/ccrMssCc.s:3126   .text.IRQLoraInit:0000001c $d
     /tmp/ccrMssCc.s:3131   .text.LoRaRX:00000000 $t
     /tmp/ccrMssCc.s:3139   .text.LoRaRX:00000000 LoRaRX
     /tmp/ccrMssCc.s:3348   .text.LoRaRX:00000144 $d
     /tmp/ccrMssCc.s:3366   .text.LoRaRX1:00000000 $t
     /tmp/ccrMssCc.s:3374   .text.LoRaRX1:00000000 LoRaRX1
     /tmp/ccrMssCc.s:3530   .text.LoRaRX1:00000100 $d
     /tmp/ccrMssCc.s:3548   .text.LoRaRX1:00000112 $t
     /tmp/ccrMssCc.s:3697   .text.LoRaRX1:00000238 $d
     /tmp/ccrMssCc.s:3729   .text.LoRaTX:00000000 $t
     /tmp/ccrMssCc.s:3737   .text.LoRaTX:00000000 LoRaTX
     /tmp/ccrMssCc.s:3979   .text.LoRaTX:00000198 $d
     /tmp/ccrMssCc.s:3999   .text.col1:00000000 $t
     /tmp/ccrMssCc.s:4007   .text.col1:00000000 col1
     /tmp/ccrMssCc.s:4027   .text.col1:00000018 $d
     /tmp/ccrMssCc.s:4031   .text.col2:00000000 $t
     /tmp/ccrMssCc.s:4039   .text.col2:00000000 col2
     /tmp/ccrMssCc.s:4055   .text.col2:00000014 $d
     /tmp/ccrMssCc.s:4058   .text.col0:00000000 $t
     /tmp/ccrMssCc.s:4066   .text.col0:00000000 col0
     /tmp/ccrMssCc.s:4082   .text.col0:00000014 $d
     /tmp/ccrMssCc.s:4085   .text.ws2812led:00000000 $t
     /tmp/ccrMssCc.s:4093   .text.ws2812led:00000000 ws2812led
     /tmp/ccrMssCc.s:4251   .text.ws2812led:000000e4 $d
     /tmp/ccrMssCc.s:4268   .text.lexmark_lcd:00000000 $t
     /tmp/ccrMssCc.s:4276   .text.lexmark_lcd:00000000 lexmark_lcd
     /tmp/ccrMssCc.s:4346   .text.lexmark_lcd:0000006c $d
     /tmp/ccrMssCc.s:4357   .text.softUTX_init:00000000 $t
     /tmp/ccrMssCc.s:4365   .text.softUTX_init:00000000 softUTX_init
     /tmp/ccrMssCc.s:4380   .text.softUTX_init:00000010 $d
     /tmp/ccrMssCc.s:4383   .text.sofUTX:00000000 $t
     /tmp/ccrMssCc.s:4391   .text.sofUTX:00000000 sofUTX
     /tmp/ccrMssCc.s:4482   .text.sofUTX:0000006c $d
     /tmp/ccrMssCc.s:4487   .text.ToLED:00000000 $t
     /tmp/ccrMssCc.s:4495   .text.ToLED:00000000 ToLED
     /tmp/ccrMssCc.s:4523   .text.cmd_LCD:00000000 $t
     /tmp/ccrMssCc.s:4531   .text.cmd_LCD:00000000 cmd_LCD
     /tmp/ccrMssCc.s:4593   .text.cmd_LCD:00000058 $d
     /tmp/ccrMssCc.s:4599   .text.CalculateLux:00000000 $t
     /tmp/ccrMssCc.s:4607   .text.CalculateLux:00000000 CalculateLux
     /tmp/ccrMssCc.s:4779   .text.TSL2561_i2c:00000000 $t
     /tmp/ccrMssCc.s:4787   .text.TSL2561_i2c:00000000 TSL2561_i2c
     /tmp/ccrMssCc.s:4924   .text.TSL2561_i2c:000000dc $d
     /tmp/ccrMssCc.s:4936   .text.set_mode:00000000 $t
     /tmp/ccrMssCc.s:4944   .text.set_mode:00000000 set_mode
     /tmp/ccrMssCc.s:5005   .text.MAX44009_i2c:00000000 $t
     /tmp/ccrMssCc.s:5013   .text.MAX44009_i2c:00000000 MAX44009_i2c
     /tmp/ccrMssCc.s:5284   .text.MAX44009_i2c:000001ec $d
     /tmp/ccrMssCc.s:5300   .text.BMP280_i2c:00000000 $t
     /tmp/ccrMssCc.s:5308   .text.BMP280_i2c:00000000 BMP280_i2c
ARM GAS  /tmp/ccrMssCc.s 			page 209


     /tmp/ccrMssCc.s:5778   .text.BMP280_i2c:00000334 $d
     /tmp/ccrMssCc.s:5799   .text.BMP280_spi:00000000 $t
     /tmp/ccrMssCc.s:5807   .text.BMP280_spi:00000000 BMP280_spi
     /tmp/ccrMssCc.s:6061   .text.BMP280_spi:000001bc $d
     /tmp/ccrMssCc.s:6077   .text.fun_tool:00000000 $t
     /tmp/ccrMssCc.s:6085   .text.fun_tool:00000000 fun_tool
     /tmp/ccrMssCc.s:6098   .text.fun_tool:00000014 $d
     /tmp/ccrMssCc.s:6119   .text.fun_tool:0000003e $t
     /tmp/ccrMssCc.s:6525   .text.fun_tool:00000318 $d
     /tmp/ccrMssCc.s:6552   .text.qtouch_mesaure:00000000 $t
     /tmp/ccrMssCc.s:6560   .text.qtouch_mesaure:00000000 qtouch_mesaure
     /tmp/ccrMssCc.s:6616   .text.qtouch_mesaure:0000003c $d
     /tmp/ccrMssCc.s:6622   .text.qtouch:00000000 $t
     /tmp/ccrMssCc.s:6630   .text.qtouch:00000000 qtouch
     /tmp/ccrMssCc.s:6673   .text.qtouch:00000048 $d
     /tmp/ccrMssCc.s:6680   .text.DHT_Tool:00000000 $t
     /tmp/ccrMssCc.s:6688   .text.DHT_Tool:00000000 DHT_Tool
     /tmp/ccrMssCc.s:6721   .text.DHT_Tool:0000002c $d
     /tmp/ccrMssCc.s:6727   .text.SPI_Tool_Menu:00000000 $t
     /tmp/ccrMssCc.s:6735   .text.SPI_Tool_Menu:00000000 SPI_Tool_Menu
     /tmp/ccrMssCc.s:6759   .text.SPI_Tool_Menu:00000024 $d
     /tmp/ccrMssCc.s:6766   .text.SPI_Tool:00000000 $t
     /tmp/ccrMssCc.s:6774   .text.SPI_Tool:00000000 SPI_Tool
     /tmp/ccrMssCc.s:6941   .text.SPI_Tool:00000114 $d
     /tmp/ccrMssCc.s:6962   .text.Menu1:00000000 $t
     /tmp/ccrMssCc.s:6970   .text.Menu1:00000000 Menu1
     /tmp/ccrMssCc.s:6994   .text.Menu1:00000024 $d
     /tmp/ccrMssCc.s:7001   .text.MemCard_Menu:00000000 $t
     /tmp/ccrMssCc.s:7009   .text.MemCard_Menu:00000000 MemCard_Menu
     /tmp/ccrMssCc.s:7082   .text.MemCard_Menu:00000082 $d
     /tmp/ccrMssCc.s:7121   .text.MemCard_Menu:000000d0 $t
     /tmp/ccrMssCc.s:7397   .text.MemCard_Menu:000002c0 $d
     /tmp/ccrMssCc.s:10556  .bss.buffer.8844:00000000 buffer.8844
     /tmp/ccrMssCc.s:7424   .text.MemCard_Menu:00000324 $t
     /tmp/ccrMssCc.s:7787   .text.MemCard_Menu:000005e8 $d
     /tmp/ccrMssCc.s:7826   .text.MemCard_Menu:0000067c $t
     /tmp/ccrMssCc.s:8085   .text.MemCard_Menu:00000854 $d
     /tmp/ccrMssCc.s:8110   .text.CopyClock:00000000 $t
     /tmp/ccrMssCc.s:8118   .text.CopyClock:00000000 CopyClock
     /tmp/ccrMssCc.s:8184   .text.Intro2:00000000 $t
     /tmp/ccrMssCc.s:8192   .text.Intro2:00000000 Intro2
     /tmp/ccrMssCc.s:8637   .text.Intro2:000002e0 $d
                            *COM*:00000008 Rtc
     /tmp/ccrMssCc.s:8665   .text.Intro2:00000348 $t
     /tmp/ccrMssCc.s:8842   .text.Intro2:00000490 $d
     /tmp/ccrMssCc.s:8853   .text.CopyTime:00000000 $t
     /tmp/ccrMssCc.s:8861   .text.CopyTime:00000000 CopyTime
     /tmp/ccrMssCc.s:8900   .text.CopyDate:00000000 $t
     /tmp/ccrMssCc.s:8908   .text.CopyDate:00000000 CopyDate
     /tmp/ccrMssCc.s:8947   .text.Zegarek:00000000 $t
     /tmp/ccrMssCc.s:8955   .text.Zegarek:00000000 Zegarek
     /tmp/ccrMssCc.s:9014   .text.Zegarek:00000054 $d
     /tmp/ccrMssCc.s:9022   .text.SysTick_Handler:00000000 $t
     /tmp/ccrMssCc.s:9030   .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccrMssCc.s:9108   .text.SysTick_Handler:00000054 $d
                            *COM*:00000004 Tim0
                            *COM*:00000004 Tim1
ARM GAS  /tmp/ccrMssCc.s 			page 210


                            *COM*:00000004 trg4
                            *COM*:00000004 trg5
     /tmp/ccrMssCc.s:9121   .text.TIM2_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9129   .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
     /tmp/ccrMssCc.s:9158   .text.TIM2_IRQHandler:0000001c $d
     /tmp/ccrMssCc.s:9161   .text.TIM3_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9169   .text.TIM3_IRQHandler:00000000 TIM3_IRQHandler
     /tmp/ccrMssCc.s:9229   .text.TIM3_IRQHandler:00000044 $d
                            *COM*:00000004 Timt3
                            *COM*:00000004 delay3_us
                            *COM*:00000004 t3rg0
                            *COM*:00000004 t3rg1
                            *COM*:00000004 t3rg2
     /tmp/ccrMssCc.s:9237   .text.EXTI0_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9245   .text.EXTI0_IRQHandler:00000000 EXTI0_IRQHandler
     /tmp/ccrMssCc.s:9279   .text.EXTI0_IRQHandler:00000024 $d
     /tmp/ccrMssCc.s:9284   .text.EXTI1_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9292   .text.EXTI1_IRQHandler:00000000 EXTI1_IRQHandler
     /tmp/ccrMssCc.s:9322   .text.EXTI1_IRQHandler:00000020 $d
     /tmp/ccrMssCc.s:9326   .text.EXTI2_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9334   .text.EXTI2_IRQHandler:00000000 EXTI2_IRQHandler
     /tmp/ccrMssCc.s:9364   .text.EXTI2_IRQHandler:00000020 $d
     /tmp/ccrMssCc.s:9368   .text.EXTI3_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9376   .text.EXTI3_IRQHandler:00000000 EXTI3_IRQHandler
     /tmp/ccrMssCc.s:9406   .text.EXTI3_IRQHandler:00000020 $d
     /tmp/ccrMssCc.s:9410   .text.EXTI4_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9418   .text.EXTI4_IRQHandler:00000000 EXTI4_IRQHandler
     /tmp/ccrMssCc.s:9448   .text.EXTI4_IRQHandler:00000020 $d
     /tmp/ccrMssCc.s:9452   .text.EXTI15_10_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9460   .text.EXTI15_10_IRQHandler:00000000 EXTI15_10_IRQHandler
     /tmp/ccrMssCc.s:9486   .text.EXTI15_10_IRQHandler:0000001c $d
     /tmp/ccrMssCc.s:9489   .text.EXTI9_5_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9497   .text.EXTI9_5_IRQHandler:00000000 EXTI9_5_IRQHandler
     /tmp/ccrMssCc.s:9540   .text.EXTI9_5_IRQHandler:00000038 $d
     /tmp/ccrMssCc.s:9544   .text.RTC_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9552   .text.RTC_IRQHandler:00000000 RTC_IRQHandler
     /tmp/ccrMssCc.s:9590   .text.RTC_IRQHandler:00000028 $d
     /tmp/ccrMssCc.s:9595   .text.RTCAlarm_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9603   .text.RTCAlarm_IRQHandler:00000000 RTCAlarm_IRQHandler
     /tmp/ccrMssCc.s:9637   .text.RTCAlarm_IRQHandler:00000028 $d
     /tmp/ccrMssCc.s:9641   .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9649   .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/ccrMssCc.s:9691   .text.DMA1_Channel1_IRQHandler:0000002c $d
     /tmp/ccrMssCc.s:9696   .text.FSMC_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9704   .text.FSMC_IRQHandler:00000000 FSMC_IRQHandler
     /tmp/ccrMssCc.s:9719   .text.DACDmaInit:00000000 $t
     /tmp/ccrMssCc.s:9727   .text.DACDmaInit:00000000 DACDmaInit
     /tmp/ccrMssCc.s:9766   .text.DACDmaInit:00000030 $d
     /tmp/ccrMssCc.s:9772   .text.TIM4_IRQHandler:00000000 $t
     /tmp/ccrMssCc.s:9780   .text.TIM4_IRQHandler:00000000 TIM4_IRQHandler
     /tmp/ccrMssCc.s:9800   .text.TIM4_IRQHandler:00000010 $d
                            *COM*:00000004 Tim4
     /tmp/ccrMssCc.s:9804   .text.adc1_init_injected:00000000 $t
     /tmp/ccrMssCc.s:9812   .text.adc1_init_injected:00000000 adc1_init_injected
     /tmp/ccrMssCc.s:9880   .text.adc1_init_injected:00000050 $d
     /tmp/ccrMssCc.s:9888   .text.adc_get_internals:00000000 $t
     /tmp/ccrMssCc.s:9896   .text.adc_get_internals:00000000 adc_get_internals
ARM GAS  /tmp/ccrMssCc.s 			page 211


     /tmp/ccrMssCc.s:9974   .text.adc_get_internals:00000054 $d
     /tmp/ccrMssCc.s:9981   .text.adc_get_injected:00000000 $t
     /tmp/ccrMssCc.s:9989   .text.adc_get_injected:00000000 adc_get_injected
     /tmp/ccrMssCc.s:10056  .text.adc_get_injected:00000048 $d
                .rodata.jdrs.9055:00000000 jdrs.9070
     /tmp/ccrMssCc.s:10062  .text.NVIC_conf:00000000 $t
     /tmp/ccrMssCc.s:10070  .text.NVIC_conf:00000000 NVIC_conf
     /tmp/ccrMssCc.s:10107  .text.NVIC_conf:00000028 $d
     /tmp/ccrMssCc.s:10113  .text.SetDate:00000000 $t
     /tmp/ccrMssCc.s:10121  .text.SetDate:00000000 SetDate
     /tmp/ccrMssCc.s:10329  .text.SetDate:0000019c $d
     /tmp/ccrMssCc.s:10341  .text.flash_latency:00000000 $t
     /tmp/ccrMssCc.s:10349  .text.flash_latency:00000000 flash_latency
     /tmp/ccrMssCc.s:10380  .text.flash_latency:00000024 $d
     /tmp/ccrMssCc.s:11107  .rodata.jdrs.9055:00000000 jdrs.9055
     /tmp/ccrMssCc.s:10700  .data.p_TSpm:00000000 p_TSpm
     /tmp/ccrMssCc.s:10481  .bss.FLAG:00000000 FLAG
     /tmp/ccrMssCc.s:10999  .rodata._ytab:00000000 _ytab
                            *COM*:00000004 Time6
                            *COM*:00000004 Tim6
                            *COM*:00000004 Tim2
     /tmp/ccrMssCc.s:10410  .rodata:00000000 $d
     /tmp/ccrMssCc.s:10463  .bss.Cah.8242:00000000 $d
     /tmp/ccrMssCc.s:10467  .bss.Cah.8242:00000000 Cah.8242
     /tmp/ccrMssCc.s:10470  .bss.Cwh.8243:00000000 $d
     /tmp/ccrMssCc.s:10474  .bss.Cwh.8243:00000000 Cwh.8243
     /tmp/ccrMssCc.s:10477  .bss.FLAG:00000000 $d
     /tmp/ccrMssCc.s:10484  .bss.Rwa.8244:00000000 $d
     /tmp/ccrMssCc.s:10488  .bss.Rwa.8244:00000000 Rwa.8244
     /tmp/ccrMssCc.s:10491  .bss.SX1278_1.8439:00000000 $d
     /tmp/ccrMssCc.s:10495  .bss.SX1278_1.8439:00000000 SX1278_1.8439
     /tmp/ccrMssCc.s:10498  .bss.SX1278_1.8465:00000000 $d
     /tmp/ccrMssCc.s:10502  .bss.SX1278_1.8465:00000000 SX1278_1.8465
     /tmp/ccrMssCc.s:10505  .bss.SX1278_1.8490:00000000 $d
     /tmp/ccrMssCc.s:10509  .bss.SX1278_1.8490:00000000 SX1278_1.8490
     /tmp/ccrMssCc.s:10512  .bss.SX1278_hw1.8438:00000000 $d
     /tmp/ccrMssCc.s:10516  .bss.SX1278_hw1.8438:00000000 SX1278_hw1.8438
     /tmp/ccrMssCc.s:10519  .bss.SX1278_hw1.8464:00000000 $d
     /tmp/ccrMssCc.s:10523  .bss.SX1278_hw1.8464:00000000 SX1278_hw1.8464
     /tmp/ccrMssCc.s:10526  .bss.SX1278_hw1.8489:00000000 $d
     /tmp/ccrMssCc.s:10530  .bss.SX1278_hw1.8489:00000000 SX1278_hw1.8489
     /tmp/ccrMssCc.s:10533  .bss.TSpm:00000000 $d
     /tmp/ccrMssCc.s:10536  .bss.TSpm:00000000 TSpm
     /tmp/ccrMssCc.s:10539  .bss.buf_rx.8468:00000000 $d
     /tmp/ccrMssCc.s:10543  .bss.buf_rx.8468:00000000 buf_rx.8468
     /tmp/ccrMssCc.s:10546  .bss.buf_tx.8492:00000000 $d
     /tmp/ccrMssCc.s:10550  .bss.buf_tx.8492:00000000 buf_tx.8492
     /tmp/ccrMssCc.s:10553  .bss.buffer.8844:00000000 $d
     /tmp/ccrMssCc.s:10559  .bss.cah.8240:00000000 $d
     /tmp/ccrMssCc.s:10563  .bss.cah.8240:00000000 cah.8240
     /tmp/ccrMssCc.s:10566  .bss.cnt.8236:00000000 $d
     /tmp/ccrMssCc.s:10570  .bss.cnt.8236:00000000 cnt.8236
     /tmp/ccrMssCc.s:10573  .bss.cnt2.8245:00000000 $d
     /tmp/ccrMssCc.s:10577  .bss.cnt2.8245:00000000 cnt2.8245
     /tmp/ccrMssCc.s:10583  .bss.coile.8260:00000000 coile.8260
     /tmp/ccrMssCc.s:10584  .bss.coile.8260:00000000 $d
     /tmp/ccrMssCc.s:10586  .bss.cur.8252:00000000 $d
ARM GAS  /tmp/ccrMssCc.s 			page 212


     /tmp/ccrMssCc.s:10590  .bss.cur.8252:00000000 cur.8252
     /tmp/ccrMssCc.s:10593  .bss.cwh.8241:00000000 $d
     /tmp/ccrMssCc.s:10597  .bss.cwh.8241:00000000 cwh.8241
     /tmp/ccrMssCc.s:10600  .bss.datetime.8667:00000000 $d
     /tmp/ccrMssCc.s:10604  .bss.datetime.8667:00000000 datetime.8667
     /tmp/ccrMssCc.s:10607  .bss.dcur.8253:00000000 $d
     /tmp/ccrMssCc.s:10611  .bss.dcur.8253:00000000 dcur.8253
     /tmp/ccrMssCc.s:10617  .bss.dinit.8845:00000000 dinit.8845
     /tmp/ccrMssCc.s:10618  .bss.dinit.8845:00000000 $d
     /tmp/ccrMssCc.s:10620  .bss.dma_buf:00000000 $d
     /tmp/ccrMssCc.s:10624  .bss.dma_buf:00000000 dma_buf
     /tmp/ccrMssCc.s:10627  .bss.dma_buf.8755:00000000 $d
     /tmp/ccrMssCc.s:10631  .bss.dma_buf.8755:00000000 dma_buf.8755
     /tmp/ccrMssCc.s:10634  .bss.pow.8248:00000000 $d
     /tmp/ccrMssCc.s:10638  .bss.pow.8248:00000000 pow.8248
     /tmp/ccrMssCc.s:10641  .bss.str_num.8493:00000000 $d
     /tmp/ccrMssCc.s:10645  .bss.str_num.8493:00000000 str_num.8493
     /tmp/ccrMssCc.s:10648  .bss.val.8740:00000000 $d
     /tmp/ccrMssCc.s:10652  .bss.val.8740:00000000 val.8740
     /tmp/ccrMssCc.s:10655  .bss.vbus.8254:00000000 $d
     /tmp/ccrMssCc.s:10659  .bss.vbus.8254:00000000 vbus.8254
     /tmp/ccrMssCc.s:10662  .bss.vr1.8237:00000000 $d
     /tmp/ccrMssCc.s:10666  .bss.vr1.8237:00000000 vr1.8237
     /tmp/ccrMssCc.s:10669  .bss.vr3.8246:00000000 $d
     /tmp/ccrMssCc.s:10673  .bss.vr3.8246:00000000 vr3.8246
     /tmp/ccrMssCc.s:10676  .bss.vr4.8247:00000000 $d
     /tmp/ccrMssCc.s:10680  .bss.vr4.8247:00000000 vr4.8247
     /tmp/ccrMssCc.s:10683  .bss.yb.8736:00000000 $d
     /tmp/ccrMssCc.s:10687  .bss.yb.8736:00000000 yb.8736
     /tmp/ccrMssCc.s:10690  .bss.yn.8737:00000000 $d
     /tmp/ccrMssCc.s:10694  .bss.yn.8737:00000000 yn.8737
     /tmp/ccrMssCc.s:10697  .data.p_TSpm:00000000 $d
     /tmp/ccrMssCc.s:10703  .data.tbuf.8742:00000000 $d
     /tmp/ccrMssCc.s:10707  .data.tbuf.8742:00000000 tbuf.8742
     /tmp/ccrMssCc.s:10710  .rodata.BMP280_i2c.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10727  .rodata.BMP280_spi.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10731  .rodata.Intro2.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10743  .rodata.LoRaRX.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10747  .rodata.LoRaRX1.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10785  .rodata.MAX44009_i2c.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10789  .rodata.MemCard_Menu.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10913  .rodata.Menu1.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10929  .rodata.SPI_Tool.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10947  .rodata.SPI_Tool_Menu.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10963  .rodata.SetDate.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10984  .rodata.TSL2561_i2c.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10988  .rodata.Zegarek.str1.4:00000000 $d
     /tmp/ccrMssCc.s:10995  .rodata._ytab:00000000 $d
     /tmp/ccrMssCc.s:11025  .rodata.fun_tool.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11073  .rodata.head.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11080  .rodata.ili9486.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11103  .rodata.jdrs.9055:00000000 $d
     /tmp/ccrMssCc.s:11113  .rodata.lexmark_lcd.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11126  .rodata.lion_updown.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11187  .rodata.liontrend.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11197  .rodata.oblicz.str1.4:00000000 $d
     /tmp/ccrMssCc.s:11204  .rodata.qtouch.str1.4:00000000 $d
ARM GAS  /tmp/ccrMssCc.s 			page 213


     /tmp/ccrMssCc.s:11208  .rodata.ws2812led.str1.4:00000000 $d

UNDEFINED SYMBOLS
tr_pen_color
UaPutK
uint2uart
UaPutS
sint2uart
BkpRegInit
uint2str
UART1_putc
i2c1r_init
i2c1_write
i2c1_read
UART_getChar
UART2_putc
p_Fifo1
tr_locate
UART_getDec
UART_getStr
unt2uart
int2uart
int2uarz
UaPutC
RtcInit
i2c1_init
ssd1306_init
num2uart
int2str
oled_str16
oled_refresh_gram
oled_hw
oled_num24
UART_getHex
hex2uart
SPI1_init_
DHT_Init
DHT_read
I2C2_init
i2c2_scan
SX1278_begin
SX1278_LoRaEntryRx
SX1278_LoRaRx
SX1278_SPIRead
UART_getNum
SX1278_LoRaRxPacket
SX1278_read
unt2str
strlen
stpcpy
SX1278_LoRaEntryTx
SX1278_LoRaTxPacketStart
SX1278_sleep
UC1608_Init
UC1608_Clr
UC1608_str
UC1608_Refresh
ARM GAS  /tmp/ccrMssCc.s 			page 214


i2c2_write
i2c2_read
spi1_rw
mmc_read_sect
crc16_spi2
EraseFlashPage
TFT_Clear
rtc_SetTime
SPI2_init
spi2_rw
TFT_Init
crc16_spi2_init
CardType
mmc_init
mmc_read_config
mmc_write_sect
TFT_dy
rtc_GetTime
TFT_Fill
TFT_txt
TFT_SetWindow
ColCon
str2int
